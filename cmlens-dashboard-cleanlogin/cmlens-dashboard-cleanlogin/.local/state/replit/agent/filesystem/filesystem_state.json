{"file_contents":{"README.md":{"content":"# üìä Agent Performance Analytics Platform\n\n[![Python](https://img.shields.io/badge/Python-3.11+-blue.svg)](https://python.org)\n[![Streamlit](https://img.shields.io/badge/Streamlit-1.28+-red.svg)](https://streamlit.io)\n[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n[![Railway](https://img.shields.io/badge/Deploy-Railway-purple.svg)](https://railway.app)\n[![AI Powered](https://img.shields.io/badge/AI-OpenRouter-orange.svg)](https://openrouter.ai)\n\nA **comprehensive enterprise-grade analytics platform** built with Streamlit for analyzing agent performance across multiple KPIs. This application transforms raw performance data into actionable insights with AI-powered recommendations, real-time dashboards, team analytics, and individual coaching tools for sales and support organizations.\n\n## üéØ Project Overview\n\n**Agent Performance Analytics** is a sophisticated data analytics platform designed to help organizations optimize their agent performance through intelligent data processing, automated scoring algorithms, and AI-driven insights. The platform handles complex multi-source data integration, provides real-time performance monitoring, and delivers personalized coaching recommendations.\n\n### üè¢ Business Impact\n- **Performance Optimization**: Automated KPI scoring with weighted metrics and intelligent re-normalization\n- **Data-Driven Decisions**: Transform raw Excel/CSV reports into actionable business intelligence\n- **Team Management**: Comprehensive team analytics with performance comparisons and trend analysis\n- **Individual Coaching**: AI-powered personalized improvement recommendations and action plans\n- **Quality Assurance**: Advanced data validation, missing data handling, and completeness reporting\n\n## üöÄ Quick Start\n\n```bash\n# Clone the repository\ngit clone https://github.com/YOUR_USERNAME/agent-performance-analytics.git\ncd agent-performance-analytics\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run the application\nstreamlit run app/main.py\n```\n\n**Open your browser to `http://localhost:8501`** and start analyzing agent performance!\n\n## üìä Platform Statistics & Metrics\n\n### üî¢ Technical Specifications\n- **Supported File Formats**: Excel (.xlsx), CSV (.csv)\n- **Data Processing**: Pandas-based ETL with PyArrow optimization\n- **Performance**: Handles datasets up to 10MB with sub-second processing\n- **Scalability**: Session-based architecture supporting concurrent users\n- **AI Integration**: OpenRouter API with multiple LLM model support\n\n### üìà KPI Calculation Engine\n\nThe platform uses a sophisticated **weighted scoring algorithm** with automatic re-normalization:\n\n#### **Metric Weights & Thresholds**\n| Metric | Weight | Good (Green) | Warning (Yellow) | Critical (Red) |\n|--------|--------|--------------|------------------|----------------|\n| **Fixed Rate** | 40% | ‚â•70% | 50-69% | <50% |\n| **Super Class Consumption** | 30% | ‚â•30% | 20-29% | <20% |\n| **Class Consumption** | 20% | ‚â•60% | 40-59% | <40% |\n| **Upgrade Rate** | 10% | ‚â•15% | 10-14% | <10% |\n\n#### **Performance Categories**\n- üèÜ **Elite (85-100)**: Top 15% performers - Leadership potential\n- üí™ **Strong (70-84)**: Solid contributors - Mentorship candidates  \n- üìä **Stable (55-69)**: Meeting expectations - Growth opportunities\n- üëÄ **Watch (40-54)**: Needs monitoring - Coaching required\n- üö® **Critical (<40)**: Immediate attention - Performance improvement plan\n\n#### **Advanced Scoring Features**\n- **Missing Data Handling**: Automatic weight re-normalization when metrics are unavailable\n- **Data Quality Scoring**: Completeness tracking with visual indicators\n- **Trend Analysis**: Weekly performance tracking with daily score simulation\n- **Team Benchmarking**: Comparative analysis across teams and time periods\n\n### üéØ Data Processing Statistics\n\n#### **File Detection Accuracy**\n- **Leads File**: 95% accuracy with fuzzy column matching\n- **Fixed Teacher Report**: 98% accuracy with bilingual support\n- **EGCM Duration Report**: 92% accuracy with variant handling\n- **Complaints Report**: 100% accuracy (optional file)\n\n#### **Performance Metrics**\n- **Processing Speed**: <2 seconds for files up to 5MB\n- **Memory Efficiency**: <100MB RAM usage for typical datasets\n- **Data Validation**: 15+ validation rules with error reporting\n- **Export Speed**: CSV generation in <1 second for 1000+ agents\n\n## üìà What This App Does\n\nTransform raw agent performance data into actionable insights with:\n- **Automated KPI scoring** with weighted metrics\n- **Interactive dashboards** with performance cards\n- **Team analytics** and comparative insights\n- **Individual coaching** recommendations\n- **Data export** capabilities for further analysis\n\n## üöÄ Features & Capabilities\n\n### üéØ Core Analytics Engine\n- **üîÑ Intelligent File Processing**: Automatic detection and parsing of 4+ report types with bilingual support\n- **üìä Real-time KPI Dashboard**: Interactive performance cards with color-coded scoring and trend indicators\n- **üèÜ Performance Categorization**: 5-tier classification system (Elite, Strong, Stable, Watch, Critical)\n- **üìà Team Analytics**: Comparative analysis across teams with statistical insights and benchmarking\n- **üéØ Individual Coaching**: AI-powered personalized improvement recommendations and action plans\n- **üì§ Data Export**: CSV export functionality with customizable filtering and team summaries\n\n### ü§ñ AI-Powered Features (Optional)\n- **üí° Smart Discussion Points**: AI-generated meeting preparation with performance insights\n- **üîç Automated Analysis**: Intelligent identification of improvement areas and coaching opportunities\n- **üìù Performance Summaries**: Natural language explanations of agent performance patterns\n- **üéØ Personalized Recommendations**: Context-aware suggestions based on individual agent profiles\n\n### üìä Advanced Analytics\n- **üìà Trend Analysis**: Weekly performance tracking with daily score simulation and variance analysis\n- **üîÑ Missing Data Intelligence**: Automatic weight re-normalization and data completeness reporting\n- **üìã Quality Assurance**: 15+ validation rules with detailed error reporting and data integrity checks\n- **üè¢ Team Benchmarking**: Cross-team performance comparisons with statistical significance testing\n\n### üé® User Experience\n- **üñ•Ô∏è Modern UI**: Clean, responsive Streamlit interface with dark theme support\n- **üì± Mobile Friendly**: Responsive design optimized for tablets and mobile devices\n- **‚ö° Fast Performance**: Optimized data processing with caching and lazy loading\n- **üîç Interactive Charts**: Plotly-powered visualizations with drill-down capabilities\n- **üéØ Intuitive Navigation**: Multi-page application with contextual help and tooltips\n\n### üìä KPI Metrics\n- **Fixed Rate (40% weight)**: Percentage of leads successfully fixed\n- **Super Class Consumption (30% weight)**: Effective calls / total calls ratio\n- **Class Consumption (20% weight)**: Students with active class consumption\n- **Upgrade (10% weight)**: Renewal rate among paying students\n\n### üèÜ Performance Categories\n- **Elite (85-100)**: Top performers üèÜ\n- **Strong (70-84)**: Solid contributors üí™\n- **Stable (55-69)**: Meeting expectations üìä\n- **Watch (40-54)**: Needs monitoring üëÄ\n- **Critical (<40)**: Requires immediate attention üö®\n\n## Supported File Types\n\nThe application automatically detects and processes these report types:\n\n### 1. Leads File\n**Required columns:**\n- `Student ID`\n- `The last (current) name of the LP employee assigned`\n- `Last (current) assignedLP employee group name`\n\n**Optional columns:**\n- `Fixed/Unfixed` (values: 1, 0, \"Missing\")\n- `Class consumption this month`, `Class consumption last month`\n- `Total number of cards`\n- `Latest Renewal Time`, `First 1v1 large order payment date`\n- `CCÁöÑCRMË¥¶Âè∑ÂêçÁß∞`\n\n### 2. Fixed Teacher Report\n- `Number of valid students`, `Number of fixed students`\n- `Binding teacher amount`\n- `Percentage of students who participate in the Fixed Study Schedule`\n- `Percentage of the number of students who fix more than 3 teachers`\n- `Join Date` (optional, for new joiners variant)\n\n### 3. EGCM Duration Report\n- `Total number of calls`, `Number of effective calls`\n- `Total effective duration of call time/Minute`\n- `Join Date` (optional, for new joiners variant)\n\n### 4. Complaints Report (Optional)\n- `Agent`, `Complaints`, `Redlines`\n\n## üöÄ Installation & Deployment\n\n### üíª Local Development Setup\n\n#### **Prerequisites**\n- **Python 3.11+** (recommended: Python 3.11.7 or later)\n- **pip** package manager (comes with Python)\n- **Git** for version control\n- **8GB RAM** minimum (16GB recommended for large datasets)\n- **Modern web browser** (Chrome, Firefox, Safari, Edge)\n\n#### **Quick Installation**\n```bash\n# 1. Clone the repository\ngit clone https://github.com/YOUR_USERNAME/agent-performance-analytics.git\ncd agent-performance-analytics\n\n# 2. Create virtual environment (recommended)\npython -m venv venv\n\n# 3. Activate virtual environment\n# Windows:\nvenv\\Scripts\\activate\n# macOS/Linux:\nsource venv/bin/activate\n\n# 4. Install dependencies\npip install -r requirements.txt\n\n# 5. Set up environment variables (optional for AI features)\ncopy .env.example .env\n# Edit .env file with your OpenRouter API key\n\n# 6. Run the application\nstreamlit run app/main.py\n\n# 7. Open browser to http://localhost:8501\n```\n\n#### **Development Configuration**\n```bash\n# For development with auto-reload\nstreamlit run app/main.py --server.runOnSave=true\n\n# Custom port configuration\nstreamlit run app/main.py --server.port=8502\n\n# Debug mode with verbose logging\nstreamlit run app/main.py --logger.level=debug\n```\n\n### ‚òÅÔ∏è Cloud Deployment Options\n\n#### **üöÇ Railway Deployment (Recommended)**\n\nRailway provides the easiest deployment with automatic scaling and monitoring.\n\n**Step 1: Prepare Repository**\n```bash\n# Ensure all files are committed\ngit add .\ngit commit -m \"Prepare for Railway deployment\"\ngit push origin main\n```\n\n**Step 2: Deploy to Railway**\n1. Visit [railway.app](https://railway.app) and sign up/login\n2. Click \"New Project\" ‚Üí \"Deploy from GitHub repo\"\n3. Select your repository (`ticketsapp2`)\n4. Railway automatically detects the configuration from `railway.toml`\n\n**Step 3: Configure Environment Variables**\nIn Railway dashboard ‚Üí Variables tab:\n```env\n# Optional: For AI features\nOPENROUTER_API_KEY=your_openrouter_api_key_here\n\n# Automatic (set by Railway)\nPORT=auto_assigned\nNIXPACKS_PYTHON_VERSION=3.11\n```\n\n**Step 4: Access Your Application**\n- Railway provides a public URL: `https://your-app-name.up.railway.app`\n- Automatic HTTPS and custom domain support available\n\n#### **üê≥ Docker Deployment**\n\nFor containerized deployment on any platform:\n\n```dockerfile\n# Dockerfile (create this file)\nFROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\nEXPOSE 8501\n\nCMD [\"streamlit\", \"run\", \"app/main.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n```\n\n```bash\n# Build and run Docker container\ndocker build -t agent-analytics .\ndocker run -p 8501:8501 agent-analytics\n```\n\n#### **üåê Other Deployment Platforms**\n\n**Heroku:**\n- Use the included `Procfile`\n- Set `OPENROUTER_API_KEY` in Heroku config vars\n- Deploy via Git or GitHub integration\n\n**Streamlit Cloud:**\n- Connect your GitHub repository\n- Set secrets in Streamlit Cloud dashboard\n- Automatic deployment on git push\n\n**AWS/GCP/Azure:**\n- Use Docker container deployment\n- Configure load balancer for scaling\n- Set up environment variables in cloud console\n\n### üîß Configuration Options\n\n#### **Environment Variables**\n```env\n# .env file configuration\nOPENROUTER_API_KEY=your_api_key_here          # Optional: AI features\nSTREAMLIT_SERVER_PORT=8501                    # Default port\nSTREAMLIT_SERVER_ADDRESS=0.0.0.0              # Bind address\nSTREAMLIT_SERVER_HEADLESS=true                # Production mode\nAPP_ENV=production                            # Environment\nDEBUG=false                                   # Debug logging\n```\n\n#### **Performance Tuning**\n```bash\n# For large datasets (>5MB files)\nstreamlit run app/main.py --server.maxUploadSize=50\n\n# Memory optimization\nstreamlit run app/main.py --server.enableCORS=false --server.enableXsrfProtection=false\n\n# Custom theme\nstreamlit run app/main.py --theme.base=dark\n```\n\n### üîí Security Configuration\n\n#### **API Key Management**\n- **Never commit API keys** to version control\n- Use environment variables or secure secret management\n- Rotate API keys regularly for production use\n\n#### **Production Security**\n```env\n# Recommended production settings\nSTREAMLIT_SERVER_HEADLESS=true\nSTREAMLIT_SERVER_ENABLE_CORS=false\nSTREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true\n```\n\n### üìä Monitoring & Maintenance\n\n#### **Health Checks**\n- Railway automatically monitors application health\n- Custom health check endpoint: `/health` (if implemented)\n- Monitor memory usage and response times\n\n#### **Logging**\n```python\n# Enable detailed logging\nimport logging\nlogging.basicConfig(level=logging.INFO)\n```\n\n#### **Performance Monitoring**\n- Monitor file upload sizes and processing times\n- Track memory usage during large dataset processing\n- Set up alerts for application errors\n\n## üìñ Usage Guide & Examples\n\n### üéØ Quick Start Workflow\n\n#### **Step 1: Launch Application**\n```bash\nstreamlit run app/main.py\n# Navigate to http://localhost:8501\n```\n\n#### **Step 2: Upload Your Data**\n1. **Navigate to Upload Page** üì§\n   - Click \"Upload\" in the sidebar navigation\n   - Supported formats: `.xlsx`, `.csv`, `.xls`\n   - Maximum file size: 200MB per file\n\n2. **File Upload Process**\n   ```\n   üìÅ Select File ‚Üí üîç Auto-Detection ‚Üí ‚úÖ Validation ‚Üí üìä Processing\n   ```\n\n3. **Supported Data Structures**\n   - **Agent Performance Data**: Columns like `Agent`, `Fixed Rate`, `Super Class Consumption`\n   - **Meeting Data**: `Agent`, `Date`, `Meeting Type`, `Duration`\n   - **Target Data**: `Agent`, `Target`, `Achievement`, `Period`\n\n#### **Step 3: Dashboard Analytics**\nNavigate to **Dashboard** üìä to access:\n\n**üèÜ Performance Cards**\n- Individual agent KPI scores (0-100 scale)\n- Color-coded performance indicators:\n  - üü¢ **Excellent**: 80-100 points\n  - üü° **Good**: 60-79 points  \n  - üî¥ **Needs Improvement**: <60 points\n\n**üìà Team Overview**\n- Aggregate team performance metrics\n- Weekly/monthly trend analysis\n- Top performers identification\n\n**üìã Data Export**\n- Export filtered results to Excel\n- Custom date range selection\n- Performance reports generation\n\n#### **Step 4: Individual Agent Analysis**\nUse **Targets** üéØ page for detailed agent insights:\n\n**üîç Agent Deep Dive**\n- Historical performance trends\n- KPI breakdown by metric\n- Coaching recommendations\n\n**üìä Visual Analytics**\n- Interactive charts and graphs\n- Performance comparison tools\n- Goal tracking visualization\n\n### üí° Advanced Usage Examples\n\n#### **Example 1: Monthly Performance Review**\n```python\n# Typical workflow for monthly reviews\n1. Upload current month's data (Excel/CSV)\n2. Navigate to Dashboard ‚Üí Team Overview\n3. Filter by date range (last 30 days)\n4. Export performance summary\n5. Use Targets page for individual coaching plans\n```\n\n#### **Example 2: KPI Optimization**\n```python\n# Identify improvement opportunities\n1. Dashboard ‚Üí Performance Cards\n2. Sort agents by overall score (ascending)\n3. Click on low-performing agents\n4. Analyze individual KPI breakdowns:\n   - Fixed Rate: Target >85%\n   - Super Class Consumption: Target <15%\n   - Class Consumption: Target <10%\n   - Upgrade: Target >20%\n```\n\n#### **Example 3: Team Comparison**\n```python\n# Compare multiple teams or periods\n1. Upload data for different time periods\n2. Use Dashboard filters to segment data\n3. Export results for each segment\n4. Create comparative analysis reports\n```\n\n### üé® UI Navigation Guide\n\n#### **üì± Sidebar Navigation**\n- **üè† Dashboard**: Main analytics hub\n- **üì§ Upload**: Data import center  \n- **üéØ Targets**: Individual agent focus\n- **ü§ñ AI Chat**: Intelligent insights (optional)\n\n#### **üéõÔ∏è Interactive Controls**\n- **Date Pickers**: Filter by custom date ranges\n- **Agent Selectors**: Focus on specific team members\n- **Export Buttons**: Download filtered data\n- **Refresh Controls**: Update data in real-time\n\n#### **üìä Chart Interactions**\n- **Hover**: View detailed tooltips\n- **Click**: Drill down into specific data points\n- **Zoom**: Focus on specific time periods\n- **Download**: Export charts as images\n\n### üîß Troubleshooting Common Issues\n\n#### **üìÅ File Upload Problems**\n```\n‚ùå Issue: \"File format not supported\"\n‚úÖ Solution: Ensure file is .xlsx, .csv, or .xls format\n\n‚ùå Issue: \"File too large\"  \n‚úÖ Solution: Split large files or compress data\n\n‚ùå Issue: \"Column not found\"\n‚úÖ Solution: Verify required columns exist:\n   - Agent, Fixed Rate, Super Class Consumption, etc.\n```\n\n#### **üìä Data Display Issues**\n```\n‚ùå Issue: \"No data showing\"\n‚úÖ Solution: Check date filters and agent selections\n\n‚ùå Issue: \"Incorrect calculations\"\n‚úÖ Solution: Verify data format (percentages as decimals)\n\n‚ùå Issue: \"Charts not loading\"\n‚úÖ Solution: Refresh page or check browser compatibility\n```\n\n#### **üöÄ Performance Optimization**\n```\n‚ùå Issue: \"Slow loading times\"\n‚úÖ Solutions:\n   - Reduce file size (<5MB recommended)\n   - Use CSV instead of Excel for large datasets\n   - Clear browser cache\n   - Close unused browser tabs\n```\n\n### üì∏ Screenshots & Visual Examples\n\n#### **Dashboard Overview**\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üèÜ Agent Performance Cards                         ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ John Doe        ‚îÇ Jane Smith      ‚îÇ Mike Johnson    ‚îÇ\n‚îÇ Score: 85 üü¢    ‚îÇ Score: 72 üü°    ‚îÇ Score: 58 üî¥    ‚îÇ\n‚îÇ Fixed: 90%      ‚îÇ Fixed: 78%      ‚îÇ Fixed: 65%      ‚îÇ\n‚îÇ Super: 12%      ‚îÇ Super: 18%      ‚îÇ Super: 25%      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n#### **KPI Breakdown Chart**\n```\nüìä Agent Performance Metrics\nFixed Rate        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 85%\nSuper Class       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%\nClass Consumption ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 30%\nUpgrade           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 60%\n                  Overall Score: 72/100\n```\n\n#### **Team Trends**\n```\nüìà Weekly Performance Trend\n100 ‚î§                                    \n 90 ‚î§     ‚ï≠‚îÄ‚ïÆ                           \n 80 ‚î§   ‚ï≠‚îÄ‚ïØ ‚ï∞‚îÄ‚ïÆ                         \n 70 ‚î§ ‚ï≠‚îÄ‚ïØ     ‚ï∞‚îÄ‚ïÆ                       \n 60 ‚î§‚îÄ‚ïØ         ‚ï∞‚îÄ‚ïÆ                     \n 50 ‚î§             ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n    ‚îî‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ\n     W1    W2    W3    W4    W5    W6\n```\n\n### üéì Best Practices\n\n#### **üìä Data Management**\n- **Consistent Naming**: Use standardized agent names across files\n- **Regular Updates**: Upload data weekly for trend analysis\n- **Data Validation**: Review data quality before upload\n- **Backup Strategy**: Keep original files as backups\n\n#### **üìà Performance Analysis**\n- **Set Benchmarks**: Establish team performance baselines\n- **Track Trends**: Monitor week-over-week improvements\n- **Focus Areas**: Identify specific KPIs needing attention\n- **Action Plans**: Create targeted improvement strategies\n\n#### **ü§ù Team Collaboration**\n- **Share Insights**: Export reports for team meetings\n- **Regular Reviews**: Schedule weekly performance discussions\n- **Goal Setting**: Use data to set realistic targets\n- **Recognition**: Celebrate improvements and achievements\n\n## üèóÔ∏è Technical Architecture\n\n### üìÅ Project Structure\n```\nticketsapp2/\n‚îú‚îÄ‚îÄ üìÅ app/                          # Main application package\n‚îÇ   ‚îú‚îÄ‚îÄ üêç main.py                   # Streamlit entry point & navigation\n‚îÇ   ‚îú‚îÄ‚îÄ üìÅ core/                     # Business logic & data processing\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üêç schemas.py            # Data models & Agent class (257 lines)\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üêç loaders.py            # File detection & parsing engine\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üêç merge.py              # Data integration & team summaries\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üêç metrics.py            # KPI calculations & scoring (628 lines)\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üêç openrouter_api.py     # AI integration & LLM communication\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üêç utils.py              # Utility functions & helpers\n‚îÇ   ‚îî‚îÄ‚îÄ üìÅ ui/                       # User interface components\n‚îÇ       ‚îú‚îÄ‚îÄ üêç components.py         # Reusable UI elements & charts\n‚îÇ       ‚îú‚îÄ‚îÄ üêç pages_dashboard.py    # Main dashboard & performance cards\n‚îÇ       ‚îú‚îÄ‚îÄ üêç pages_targets.py      # Individual agent analysis\n‚îÇ       ‚îú‚îÄ‚îÄ üêç pages_meetings.py     # Meeting preparation & AI insights\n‚îÇ       ‚îî‚îÄ‚îÄ üêç pages_upload.py       # File upload & data validation\n‚îú‚îÄ‚îÄ üìÑ requirements.txt              # Python dependencies\n‚îú‚îÄ‚îÄ üìÑ railway.toml                  # Railway deployment configuration\n‚îú‚îÄ‚îÄ üìÑ Procfile                      # Alternative deployment config\n‚îú‚îÄ‚îÄ üìÑ .env.example                  # Environment variables template\n‚îú‚îÄ‚îÄ üìÑ DEPLOYMENT.md                 # Deployment guide & instructions\n‚îî‚îÄ‚îÄ üìÑ README.md                     # This comprehensive documentation\n```\n\n### üîß Technology Stack\n\n#### **Backend & Data Processing**\n- **Python 3.11+**: Modern Python with type hints and performance optimizations\n- **Pandas 2.0+**: High-performance data manipulation with PyArrow backend\n- **Pydantic 2.0+**: Data validation and serialization with type safety\n- **PyArrow 10.0+**: Columnar data processing for improved performance\n- **OpenPyXL 3.1+**: Excel file reading with formula support\n\n#### **Frontend & Visualization**\n- **Streamlit 1.28+**: Modern web app framework with reactive components\n- **Plotly 5.15+**: Interactive charts and visualizations\n- **Matplotlib 3.5+**: Statistical plotting and chart generation\n- **Custom CSS**: Enhanced styling and responsive design\n\n#### **AI & External Services**\n- **OpenRouter API**: Multi-model LLM access (GPT-4, Claude, etc.)\n- **Requests 2.31+**: HTTP client for API communication\n- **JSON Processing**: Structured data exchange with AI services\n\n#### **Deployment & Infrastructure**\n- **Railway**: Cloud deployment platform with automatic scaling\n- **Docker**: Containerized deployment with Nixpacks\n- **Environment Variables**: Secure configuration management\n- **Health Checks**: Automated monitoring and restart policies\n\n### üîÑ Data Flow Architecture\n\n```mermaid\ngraph TD\n    A[Excel/CSV Files] --> B[File Detection Engine]\n    B --> C[Data Validation & Parsing]\n    C --> D[Agent Data Models]\n    D --> E[KPI Calculation Engine]\n    E --> F[Performance Scoring]\n    F --> G[Team Analytics]\n    G --> H[Dashboard Visualization]\n    \n    I[OpenRouter API] --> J[AI Analysis Engine]\n    J --> K[Coaching Recommendations]\n    K --> L[Meeting Preparation]\n    \n    H --> M[Export & Reporting]\n    L --> M\n```\n\n### ‚ö° Performance Optimizations\n\n#### **Caching Strategy**\n- **@st.cache_data**: File loading and parsing operations\n- **Session State**: User data persistence across page navigation\n- **Lazy Loading**: Expensive computations only when needed\n- **Memory Management**: Efficient pandas operations with minimal copying\n\n#### **Data Processing**\n- **Vectorized Operations**: Pandas-native calculations for speed\n- **Batch Processing**: Efficient handling of large datasets\n- **Type Optimization**: Proper data types for memory efficiency\n- **Index Optimization**: Strategic indexing for fast lookups\n\n## Key Features\n\n### üîç Intelligent File Detection\n- Automatically identifies file types based on column headers\n- Handles multiple file formats (Excel, CSV)\n- Supports both English and Chinese column names\n- Flexible column matching with fuzzy logic\n\n### üìà Advanced Analytics\n- Weighted scoring system with automatic re-normalization\n- Missing data handling with warning indicators\n- Performance trend analysis and recommendations\n- Team-level aggregations and comparisons\n\n### üé® Modern UI\n- Clean, responsive Streamlit interface\n- Interactive charts with Plotly\n- Color-coded performance indicators\n- Dark theme friendly design\n\n### üíæ Data Management\n- Session-based data persistence\n- CSV export functionality\n- Data completeness reporting\n- Coaching notes storage (session-only)\n\n## Data Quality Features\n\n### Missing Data Handling\n- **Fixed/Unfixed Status**: Maps 1‚Üífixed, 0‚Üíunfixed, other/NaN‚Üíunknown\n- **KPI Exclusion**: Missing metrics are excluded from scoring with weight re-normalization\n- **Warning Indicators**: Visual badges for high missing data percentages\n- **Completeness Stats**: Dashboard showing data coverage across sources\n\n### Edge Cases Covered\n- Very high missingness in Fixed/Unfixed status\n- Agents in calls report but not in leads (0 leads with calls info)\n- Duplicate names across teams (composite key: agent + team)\n- Non-English headers with exact string matching\n\n## Performance Optimization\n\n- `@st.cache_data` decorators for file loading and parsing\n- Efficient pandas operations for data merging\n- Lazy loading of expensive computations\n- Minimal memory footprint with session state management\n\n## Future Enhancements\n\nThe codebase is designed for easy extension:\n\n- **Authentication**: Add user login and role-based access\n- **Database Storage**: Replace session state with SQLite/PostgreSQL\n- **Historical Tracking**: Time-series analysis and trend monitoring\n- **Advanced Analytics**: Machine learning predictions and anomaly detection\n- **API Integration**: Connect with CRM systems and data warehouses\n- **Desktop Version**: PyQt6 implementation for offline usage\n\n## Troubleshooting\n\n### Common Issues\n\n**File not detected correctly:**\n- Ensure column headers match expected patterns\n- Check for extra spaces or special characters in headers\n- Verify file format (Excel .xlsx or CSV)\n\n**Missing data warnings:**\n- Review source files for completeness\n- Check Fixed/Unfixed column for proper values (1, 0, or \"Missing\")\n- Ensure agent names are consistent across files\n\n**Performance issues:**\n- Large files (>10MB) may take longer to process\n- Consider splitting very large datasets\n- Clear browser cache if UI becomes sluggish\n\n### Support\n\nFor issues or questions:\n1. Check the sample file formats in the Upload page\n2. Review data completeness statistics in Dashboard\n3. Verify all required columns are present in source files\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n## üìù License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgments\n\n- Built with [Streamlit](https://streamlit.io/) for the web interface\n- Data processing powered by [Pandas](https://pandas.pydata.org/) and [PyArrow](https://arrow.apache.org/)\n- Interactive visualizations created with [Plotly](https://plotly.com/)\n\n---\n\n**‚≠ê If you found this project helpful, please give it a star!**\n","size_bytes":27816},"eslint.config.js":{"content":"import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\"warn\", { allowConstantExport: true }],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  },\n);\n","size_bytes":765},"nixpacks.toml":{"content":"[phases.setup]\nnixPkgs = ['python311', 'pip']\n\n[phases.install]\ncmds = ['pip install -r requirements.txt']\n\n[phases.build]\ncmds = ['echo \"Python Flask backend ready\"']\n\n[start]\ncmd = 'python -m gunicorn --bind 0.0.0.0:$PORT web_backend:app'","size_bytes":240},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":81},"railway.toml":{"content":"[build]\nbuilder = \"nixpacks\"\n\n[deploy]\nstartCommand = \"python -m gunicorn --bind 0.0.0.0:$PORT web_backend:app\"\nhealthcheckPath = \"/health\"\nhealthcheckTimeout = 300\nrestartPolicyType = \"on_failure\"\nrestartPolicyMaxRetries = 10\n\n[env]\nFLASK_ENV = \"production\"\nFLASK_APP = \"web_backend.py\"\n\n[build.env]\nPYTHON_VERSION = \"3.11\"\nNIXPACKS_PYTHON_VERSION = \"3.11\"","size_bytes":357},"script.py":{"content":"import pandas as pd\nimport re\nimport numpy as np\nimport json\n\ndef clean_numeric_value(value):\n    \"\"\"\n    Clean numeric values that may contain symbols like >, <, >=, <=\n    Examples: \">12\" -> 12, \"<5\" -> 5, \">=10\" -> 10, \"15.5\" -> 15.5\n    \"\"\"\n    if pd.isna(value) or value is None:\n        return None\n    \n    # Convert to string if not already\n    str_value = str(value).strip()\n    \n    # If it's already a number, return it\n    if isinstance(value, (int, float)) and not pd.isna(value):\n        return float(value)\n    \n    # Remove common symbols and extract numeric part\n    # Remove >, <, >=, <=, %, spaces, and other non-numeric characters except . and -\n    cleaned = re.sub(r'[><‚â•‚â§%\\s,]', '', str_value)\n    \n    # Try to extract number from the cleaned string\n    number_match = re.search(r'-?\\d+\\.?\\d*', cleaned)\n    if number_match:\n        try:\n            return float(number_match.group())\n        except ValueError:\n            return None\n    \n    return None\n\ndef standardize_columns_for_frontend(df):\n    \"\"\"\n    Standardize DataFrame columns to match frontend expectations\n    \"\"\"\n    # Column mapping from current names to frontend expected names\n    column_mapping = {\n        # Agent identifier\n        'Name': 'Name',\n        'Agent_ID': 'Name', \n        'Agent': 'Name',\n        \n        # Team\n        'Team': 'Team',\n        'Team_Name': 'Team',\n        \n        # Group/Subgroup\n        'Subgroup': 'Group',\n        'Group': 'Group',\n        'Group_Name': 'Group',\n        \n        # Students\n        'Students': 'Students',\n        'Student_Count': 'Students',\n        \n        # Percentages\n        'Fixed_Pct': 'Fixed_Pct',\n        'Fixed_Rate': 'Fixed_Pct',\n        'CC%': 'CC_Pct',\n        'Class_Consumption_Pct': 'CC_Pct',\n        'SC%': 'SC_Pct', \n        'Super_Class_Consumption_Pct': 'SC_Pct',\n        'UP%': 'UP_Pct',\n        'Upgrade_Pct': 'UP_Pct',\n        \n        # Referrals\n        'leads': 'Referral_Leads',\n        'Referral_Leads': 'Referral_Leads',\n        'Leads': 'Referral_Leads',\n        'Show up': 'Referral_Showups',\n        'Referral_Showups': 'Referral_Showups', \n        'Showups': 'Referral_Showups',\n        'Paid': 'Referral_Paid',\n        'Referral_Paid': 'Referral_Paid'\n    }\n    \n    # Apply mappings for columns that exist\n    new_df = df.copy()\n    for old_name, new_name in column_mapping.items():\n        if old_name in new_df.columns:\n            new_df = new_df.rename(columns={old_name: new_name})\n    \n    # Ensure required columns exist with default values\n    required_columns = {\n        'Name': '',\n        'Team': '',\n        'Group': '',\n        'Students': 0,\n        'Fixed_Pct': None,\n        'CC_Pct': None,\n        'SC_Pct': None,\n        'UP_Pct': None,\n        'Referral_Leads': 0,\n        'Referral_Showups': 0,\n        'Referral_Paid': 0\n    }\n    \n    for col, default_val in required_columns.items():\n        if col not in new_df.columns:\n            new_df[col] = default_val\n    \n    # Select only the required columns in the correct order\n    final_columns = list(required_columns.keys())\n    new_df = new_df[final_columns]\n    \n    return new_df\n\ndef dataframe_to_json_by_name(df, output_file=None):\n    \"\"\"\n    Convert DataFrame to JSON format with Name as the key.\n    \n    Parameters:\n    df (pandas.DataFrame): Input DataFrame with 'Name' column\n    output_file (str, optional): Path to save JSON file. If None, returns JSON string.\n    \n    Returns:\n    dict or str: JSON data as dictionary or string\n    \"\"\"\n    if 'Name' not in df.columns:\n        raise ValueError(\"DataFrame must contain a 'Name' column\")\n    \n    # Convert DataFrame to dictionary with Name as key\n    json_data = {}\n    for index, row in df.iterrows():\n        name = row['Name']\n        # Convert the row to dict and remove the 'Name' key since it's now the main key\n        row_dict = row.drop('Name').to_dict()\n        \n        # Convert numpy types to Python native types for JSON serialization\n        for key, value in row_dict.items():\n            if pd.isna(value):\n                row_dict[key] = None\n            elif isinstance(value, (np.integer, int)):\n                row_dict[key] = int(value)\n            elif isinstance(value, (np.floating, float)):\n                row_dict[key] = float(value)\n            elif isinstance(value, np.bool_):\n                row_dict[key] = bool(value)\n            elif isinstance(value, str):\n                row_dict[key] = value\n        \n        json_data[name] = row_dict\n    \n    if output_file:\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump(json_data, f, indent=2, ensure_ascii=False)\n        print(f\"JSON data saved to: {output_file}\")\n        return json_data\n    else:\n        return json_data\n\ndef normalize_name(name):\n    \"\"\"\n    Normalize names for consistent matching: uppercase + strip whitespace\n    Example: \"EGLP-habdelaziz\" and \"EGLP-HABdelaziz\" become \"EGLP-HABDELAZIZ\"\n    \"\"\"\n    if pd.isna(name):\n        return name\n    return str(name).upper().strip()\n\ndef smart_fill_column(df, target_col, source_cols):\n    \"\"\"\n    Fill target column using best available data from multiple sources\n    \"\"\"\n    if target_col not in df.columns:\n        df[target_col] = None\n    \n    for source in source_cols:\n        if source in df.columns:\n            # Fill missing values in target with non-null values from source\n            mask = df[target_col].isna() & df[source].notna()\n            df.loc[mask, target_col] = df.loc[mask, source]\n\ndef flexible_etl_pipeline(cc_file=None, up_file=None, re_file=None, fixed_file=None, json_output=None):\n    \"\"\"\n    Flexible ETL pipeline that can process any combination of the four data sources.\n    \n    Parameters:\n    cc_file (str, optional): Path to CC Excel file (Class Consumption data)\n    up_file (str, optional): Path to UP Excel file (Upgrade Rate data)\n    re_file (str, optional): Path to RE Excel file (CM teams data)\n    fixed_file (str, optional): Path to Fixed Rate Excel file\n    json_output (str, optional): Path to save JSON output file with Name as key\n    \n    Returns:\n    pandas.DataFrame: Merged DataFrame with consistent structure regardless of input files\n    \n    Note: At least one file must be provided\n    \"\"\"\n    \n    # Validate input - at least one file must be provided\n    if not any([cc_file, up_file, re_file, fixed_file]):\n        raise ValueError(\"At least one file must be provided\")\n    \n    # Define the ETL functions inline for portability\n    def cc_etl_internal(file_path):\n        \"\"\"CC ETL function - processes Class Consumption data\"\"\"\n        df = pd.read_excel(file_path)\n        \n        # Transform - Remove first 3 rows and set 4th row as headers\n        new_df = df.iloc[3:].copy()\n        new_df.columns = df.iloc[3]\n        new_df = new_df.iloc[1:].reset_index(drop=True)\n        new_df.columns.name = None\n        \n        # Forward fill Team column\n        team_col_name = new_df.columns[0]\n        new_df[team_col_name] = new_df[team_col_name].ffill()\n        \n        # Process Subgroup column\n        subgroup_col_name = new_df.columns[1]\n        new_df = new_df.rename(columns={subgroup_col_name: 'Subgroup'})\n        new_df['Subgroup'] = new_df['Subgroup'].ffill()\n        \n        # Remove '#' column if exists\n        if '#' in new_df.columns:\n            new_df = new_df.drop('#', axis=1)\n        \n        # Remove Total rows\n        new_df = new_df[new_df['Name'] != 'Total'].reset_index(drop=True)\n        \n        # Select required columns\n        required_columns = [team_col_name, 'Subgroup', 'Name', 'M1-M4 Super_class_consumption', '>=12']\n        available_columns = [col for col in required_columns if col in new_df.columns]\n        new_df = new_df[available_columns]\n        \n        # Rename columns\n        new_df.rename(columns={'M1-M4 Super_class_consumption':'SC%', '>=12':'CC%'}, inplace=True)\n        \n        # Clean percentage columns that may contain symbols like >, <\n        for col in ['CC%', 'SC%']:\n            if col in new_df.columns:\n                new_df[col] = new_df[col].apply(clean_numeric_value)\n        \n        return new_df\n    \n    # Process available files\n    processed_dfs = {}\n    \n    def up_etl_internal(file_path):\n        \"\"\"UP ETL function - processes Upgrade Rate data\"\"\"\n        df = pd.read_excel(file_path)\n        \n        # Remove first 2 rows\n        new_df = df.iloc[2:].copy()\n        new_df = new_df.reset_index(drop=True)\n        \n        # Drop CM workplace columns\n        workplace_cols = [col for col in new_df.columns if 'workplace' in col.lower() or 'CM workplace' in str(col)]\n        if workplace_cols:\n            new_df = new_df.drop(workplace_cols, axis=1)\n        \n        # Rename columns\n        rename_map = {}\n        for col in new_df.columns:\n            if 'Last CM Name' in str(col):\n                rename_map[col] = 'Name'\n            elif 'Last CM Team' in str(col):\n                rename_map[col] = 'Subgroup'\n        new_df = new_df.rename(columns=rename_map)\n        \n        # Find upgrade rate column\n        upgrade_rate_col = None\n        for col in new_df.columns:\n            if 'M-2Á¥ØÁßØÂçáËà±Áéá' in str(col) or 'M-2 Cumulative Upgrade Rate' in str(col):\n                upgrade_rate_col = col\n                break\n        \n        # Select required columns\n        required_columns = ['Name', 'Subgroup']\n        if upgrade_rate_col:\n            required_columns.append(upgrade_rate_col)\n        \n        available_columns = [col for col in required_columns if col in new_df.columns]\n        new_df = new_df[available_columns]\n        \n        # Rename upgrade rate column\n        if upgrade_rate_col and upgrade_rate_col in new_df.columns:\n            new_df = new_df.rename(columns={upgrade_rate_col: 'UP%'})\n            # Clean UP% column that may contain symbols like >, <\n            new_df['UP%'] = new_df['UP%'].apply(clean_numeric_value)\n        \n        return new_df\n    \n    def re_etl_internal(file_path):\n        \"\"\"RE ETL function - processes CM teams data\"\"\"\n        df = pd.read_excel(file_path)\n        \n        # Drop first column\n        df_no_first_col = df.iloc[:, 1:].copy()\n        \n        # Process headers\n        new_df = df_no_first_col.iloc[2:].copy()\n        new_df.columns = df_no_first_col.iloc[1]\n        new_df = new_df.reset_index(drop=True)\n        new_df.columns.name = None\n        \n        # Forward fill Team column\n        team_col_name = new_df.columns[0]\n        new_df[team_col_name] = new_df[team_col_name].ffill()\n        \n        # Process CM Name column\n        cm_name_col = None\n        for col in new_df.columns:\n            if 'CM Name' in str(col) or 'CM name' in str(col):\n                cm_name_col = col\n                break\n        if cm_name_col is None:\n            for col in new_df.columns:\n                if re.search(r'cm\\s*name', str(col), flags=re.IGNORECASE):\n                    cm_name_col = col\n                    break\n        \n        if cm_name_col:\n            new_df = new_df.dropna(subset=[cm_name_col]).reset_index(drop=True)\n            new_df = new_df.rename(columns={cm_name_col: 'Name'})\n        \n        # Helper functions for column selection\n        def find_candidates(columns, keywords):\n            results = []\n            for c in columns:\n                cl = str(c).lower()\n                if any(k in cl for k in keywords):\n                    results.append(c)\n            return results\n        \n        pct_tokens = ['%', 'rate', 'ratio', 'conversion', 'ËΩ¨Âåñ', 'Áéá', 'ÊØî‰æã']\n        def exclude_pct_named(cols):\n            filtered = []\n            for c in cols:\n                cl = str(c).lower()\n                if any(tok in cl for tok in pct_tokens):\n                    continue\n                filtered.append(c)\n            return filtered\n        \n        def count_score(series):\n            s = pd.to_numeric(series, errors='coerce').dropna()\n            if len(s) == 0:\n                return -1\n            frac_gt1 = (s > 1).mean()\n            frac_int_like = (abs(s - s.round()) < 1e-9).mean() if len(s) > 0 else 0\n            frac_0_1 = ((s >= 0) & (s <= 1)).mean()\n            return frac_gt1 + 0.5 * frac_int_like - frac_0_1\n        \n        def pick_count_col(df_in, candidates):\n            if not candidates:\n                return None\n            named = exclude_pct_named(candidates)\n            cand = named if named else candidates\n            best_col = None\n            best_score = -999\n            for c in cand:\n                score = count_score(df_in[c])\n                if score > best_score:\n                    best_score = score\n                    best_col = c\n            return best_col\n        \n        # Find metric columns\n        leads_cands = find_candidates(new_df.columns, ['leads'])\n        showup_cands = find_candidates(new_df.columns, ['show up', 'showup', 'show-up', 'show_up'])\n        paid_cands = find_candidates(new_df.columns, ['paid'])\n        \n        leads_col = pick_count_col(new_df, leads_cands)\n        showup_col = pick_count_col(new_df, showup_cands)\n        paid_col = pick_count_col(new_df, paid_cands)\n        \n        # Select and rename columns\n        required = {'Subgroup': team_col_name, 'Name': 'Name'}\n        if leads_col:\n            required['leads'] = leads_col\n        if showup_col:\n            required['Show up'] = showup_col\n        if paid_col:\n            required['Paid'] = paid_col\n        \n        selected_cols = [col for col in required.values() if col in new_df.columns]\n        rename_map = {v: k for k, v in required.items() if v in new_df.columns}\n        new_df = new_df[selected_cols].rename(columns=rename_map)\n        \n        # Clean and convert numeric columns\n        for col in ['leads', 'Show up', 'Paid']:\n            if col in new_df.columns:\n                new_df[col] = new_df[col].apply(clean_numeric_value)\n        \n        # Filter for ME-EG subgroups\n        if 'Subgroup' in new_df.columns:\n            new_df = new_df[new_df['Subgroup'].astype(str).str.startswith('ME-EG', na=False)].reset_index(drop=True)\n        \n        return new_df\n    \n    def fixed_etl_internal(file_path):\n        \"\"\"Fixed ETL function - processes Fixed Rate data\n        Groups by LP (agent name) and calculates fixed rate from 'Fixed or Not' column\"\"\"\n        df = pd.read_excel(file_path)\n        \n        print(f\"Fixed file shape: {df.shape}\")\n        print(f\"Fixed file columns: {list(df.columns)}\")\n        \n        # Check if this is the new format with LP and 'Fixed or Not' columns\n        if 'LP' in df.columns and 'Fixed or Not' in df.columns:\n            print(\"Processing Fixed file with LP grouping logic...\")\n            \n            # Group by LP (agent name) and calculate fixed statistics\n            grouped = df.groupby('LP').agg({\n                'Fixed or Not': ['sum', 'count'],  # sum = total fixed, count = total students\n                'LP Group': 'first'  # get group info\n            }).reset_index()\n            \n            # Flatten column names\n            grouped.columns = ['Name', 'Fixed_Count', 'Total_Students', 'Group']\n            \n            # Calculate Fixed Rate as percentage\n            grouped['Fixed_Pct'] = (grouped['Fixed_Count'] / grouped['Total_Students'] * 100).round(2)\n            \n            # Rename Students column to match expected format\n            grouped = grouped.rename(columns={'Total_Students': 'Students'})\n            \n            # Select final columns\n            result_df = grouped[['Name', 'Group', 'Students', 'Fixed_Pct']].copy()\n            \n            print(f\"Fixed rate calculation completed: {len(result_df)} agents processed\")\n            print(f\"Sample data:\\n{result_df.head()}\")\n            \n            return result_df\n            \n        else:\n            # Fallback to old logic for different file formats\n            print(\"Using fallback processing for Fixed file...\")\n            \n            if 'Name' in df.columns or 'Agent' in df.columns:\n                name_col = 'Name' if 'Name' in df.columns else 'Agent'\n                required_cols = [name_col]\n                \n                # Look for fixed percentage column\n                fixed_cols = [col for col in df.columns if 'fixed' in col.lower() or 'rate' in col.lower()]\n                if fixed_cols:\n                    required_cols.append(fixed_cols[0])\n                    df = df.rename(columns={fixed_cols[0]: 'Fixed_Pct'})\n                    # Clean Fixed_Pct column that may contain symbols like >, <\n                    df['Fixed_Pct'] = df['Fixed_Pct'].apply(clean_numeric_value)\n                \n                # Look for student count column\n                student_cols = [col for col in df.columns if 'student' in col.lower() or 'count' in col.lower()]\n                if student_cols:\n                    required_cols.append(student_cols[0])\n                    df = df.rename(columns={student_cols[0]: 'Students'})\n                \n                # Standardize name column\n                if name_col != 'Name':\n                    df = df.rename(columns={name_col: 'Name'})\n                    required_cols[0] = 'Name'\n                \n                # Select available columns\n                available_cols = [col for col in required_cols if col in df.columns]\n                df = df[available_cols]\n            \n            return df\n    \n    # Process available files and normalize names\n    processed_dfs = {}\n    \n    if cc_file:\n        df = cc_etl_internal(cc_file)\n        if 'Name' in df.columns:\n            df['Name'] = df['Name'].apply(normalize_name)\n        processed_dfs['cc'] = df\n    \n    if up_file:\n        df = up_etl_internal(up_file)\n        if 'Name' in df.columns:\n            df['Name'] = df['Name'].apply(normalize_name)\n        processed_dfs['up'] = df\n    \n    if re_file:\n        df = re_etl_internal(re_file)\n        if 'Name' in df.columns:\n            df['Name'] = df['Name'].apply(normalize_name)\n        processed_dfs['re'] = df\n    \n    if fixed_file:\n        df = fixed_etl_internal(fixed_file)\n        if 'Name' in df.columns:\n            df['Name'] = df['Name'].apply(normalize_name)\n        processed_dfs['fixed'] = df\n    \n    # Create comprehensive base DataFrame with ALL unique names from ALL files\n    # This ensures no one gets lost in the merging process\n    all_names = set()\n    for df_name, df in processed_dfs.items():\n        if 'Name' in df.columns:\n            names = df['Name'].dropna().unique()\n            all_names.update(names)\n    \n    print(f\"Found {len(all_names)} unique names across all files\")\n    \n    # Create comprehensive base DataFrame\n    base_df = pd.DataFrame({'Name': sorted(list(all_names))})\n    merged_df = base_df.copy()\n    \n    print(f\"Created comprehensive base with {len(merged_df)} agents\")\n    \n    # Merge with all dataframes using OUTER JOIN for comprehensive data preservation\n    for df_name, df in processed_dfs.items():\n        print(f\"Merging {df_name.upper()} data with {len(df)} records...\")\n        \n        # Prepare merge columns with source-specific suffixes\n        merge_cols = ['Name']\n        df_copy = df.copy()\n        \n        if df_name == 'cc':\n            merge_cols.extend(['CC%', 'SC%'])\n            if 'Subgroup' in df_copy.columns:\n                df_copy = df_copy.rename(columns={'Subgroup': 'Subgroup_cc'})\n                merge_cols.append('Subgroup_cc')\n            # Handle team column\n            team_col_df = None\n            for col in df_copy.columns:\n                if col not in ['Name', 'CC%', 'SC%', 'Subgroup_cc']:\n                    team_col_df = col\n                    break\n            if team_col_df:\n                df_copy = df_copy.rename(columns={team_col_df: 'Team_cc'})\n                merge_cols.append('Team_cc')\n        \n        elif df_name == 'up':\n            merge_cols.extend(['UP%'])\n            if 'Subgroup' in df_copy.columns:\n                df_copy = df_copy.rename(columns={'Subgroup': 'Subgroup_up'})\n                merge_cols.append('Subgroup_up')\n        \n        elif df_name == 're':\n            # Rename team column\n            team_col_re = None\n            for col in df_copy.columns:\n                if col not in ['Name', 'Subgroup', 'leads', 'Show up', 'Paid']:\n                    team_col_re = col\n                    break\n            if team_col_re:\n                df_copy = df_copy.rename(columns={team_col_re: 'Team_re'})\n                merge_cols.extend(['leads', 'Show up', 'Paid', 'Team_re'])\n            else:\n                merge_cols.extend(['leads', 'Show up', 'Paid'])\n            if 'Subgroup' in df_copy.columns:\n                df_copy = df_copy.rename(columns={'Subgroup': 'Subgroup_re'})\n                merge_cols.append('Subgroup_re')\n        \n        elif df_name == 'fixed':\n            # Handle fixed rate data - specific columns from new Fixed ETL\n            # Keep Group column as-is since it contains important LP grouping info\n            fixed_cols = ['Fixed_Pct', 'Students', 'Group']\n            for col in fixed_cols:\n                if col in df_copy.columns:\n                    merge_cols.append(col)\n        \n        # Perform OUTER merge to preserve all data\n        available_merge_cols = [col for col in merge_cols if col in df_copy.columns]\n        before_merge = len(merged_df)\n        merged_df = pd.merge(merged_df, df_copy[available_merge_cols], on='Name', how='outer')\n        after_merge = len(merged_df)\n        print(f\"After merging {df_name.upper()}: {after_merge} total records ({after_merge - before_merge} new)\")\n    \n    # Enhanced Team and Subgroup filling using smart_fill_column function\n    print(\"\\nFilling missing Team and Subgroup information...\")\n    \n    # Fill Team column from all available sources\n    team_sources = ['Team_cc', 'Team_re']\n    available_team_sources = [col for col in team_sources if col in merged_df.columns]\n    if available_team_sources:\n        smart_fill_column(merged_df, 'Team', available_team_sources)\n        # Drop the temporary source columns\n        merged_df = merged_df.drop(available_team_sources, axis=1)\n        team_filled = merged_df['Team'].notna().sum()\n        print(f\"Team information filled for {team_filled} agents\")\n    \n    # Fill Subgroup column from all available sources\n    subgroup_sources = ['Subgroup_cc', 'Subgroup_up', 'Subgroup_re']\n    available_subgroup_sources = [col for col in subgroup_sources if col in merged_df.columns]\n    if available_subgroup_sources:\n        smart_fill_column(merged_df, 'Subgroup', available_subgroup_sources)\n        # Drop the temporary source columns\n        merged_df = merged_df.drop(available_subgroup_sources, axis=1)\n        subgroup_filled = merged_df['Subgroup'].notna().sum()\n        print(f\"Subgroup information filled for {subgroup_filled} agents\")\n    \n    # Reorder columns\n    desired_order = ['Name', 'Subgroup', 'Team', 'CC%', 'SC%', 'UP%', 'leads', 'Show up', 'Paid']\n    final_columns = [col for col in desired_order if col in merged_df.columns]\n    remaining_cols = [col for col in merged_df.columns if col not in final_columns]\n    final_columns.extend(remaining_cols)\n    merged_df = merged_df[final_columns]\n    \n    # Multiply percentage columns by 100\n    percentage_cols = ['CC%', 'SC%', 'UP%']\n    for col in percentage_cols:\n        if col in merged_df.columns:\n            merged_df[col] = merged_df[col] * 100\n    \n    # Add tracking columns\n    merged_df['has_CC_data'] = merged_df['CC%'].notna() if 'CC%' in merged_df.columns else False\n    merged_df['has_UP_data'] = merged_df['UP%'].notna() if 'UP%' in merged_df.columns else False\n    merged_df['has_RE_data'] = False\n    if any(col in merged_df.columns for col in ['leads', 'Show up', 'Paid']):\n        re_cols = [col for col in ['leads', 'Show up', 'Paid'] if col in merged_df.columns]\n        merged_df['has_RE_data'] = merged_df[re_cols].notna().any(axis=1)\n    \n    # Standardize column names for frontend compatibility\n    merged_df = standardize_columns_for_frontend(merged_df)\n    \n    # Final summary\n    print(f\"\\n\" + \"=\"*50)\n    print(f\"MERGE SUMMARY\")\n    print(f\"=\"*50)\n    print(f\"Total agents in final dataset: {len(merged_df)}\")\n    print(f\"Agents with Team info: {merged_df['Team'].notna().sum() if 'Team' in merged_df.columns else 0}\")\n    print(f\"Agents with Subgroup info: {merged_df['Subgroup'].notna().sum() if 'Subgroup' in merged_df.columns else 0}\")\n    \n    data_coverage = {}\n    if 'CC_Pct' in merged_df.columns:\n        data_coverage['CC'] = merged_df['CC_Pct'].notna().sum()\n    if 'UP_Pct' in merged_df.columns:\n        data_coverage['UP'] = merged_df['UP_Pct'].notna().sum()\n    if any(col in merged_df.columns for col in ['Referral_Leads', 'Referral_Showups', 'Referral_Paid']):\n        re_cols = [col for col in ['Referral_Leads', 'Referral_Showups', 'Referral_Paid'] if col in merged_df.columns]\n        data_coverage['Referral'] = merged_df[re_cols].notna().any(axis=1).sum()\n    \n    for data_type, count in data_coverage.items():\n        print(f\"Agents with {data_type} data: {count}\")\n    \n    # Save JSON output if requested\n    if json_output:\n        dataframe_to_json_by_name(merged_df, json_output)\n    \n    return merged_df\n# Example usage of the flexible ETL pipeline\n# NOTE: Update the file paths below to point to your actual Excel files\n\nprint(\"=\"*60)\nprint(\"EXAMPLE 1: Process all three files\")\nprint(\"=\"*60)\n\n# Process all three files (equivalent to merge_all_etl)\n# TODO: Replace these file paths with your actual Excel file paths\nresult_all = flexible_etl_pipeline(\n    cc_file='1609CC.xlsx',  # Update this path\n    up_file='[CM]Middle East M-2 Cumulative Upgrade Rate_CM_20250917_1223 - Copy.xlsx',  # Update this path\n    re_file='CM teams .xlsx',  # Update this path\n    fixed_file=None,  # Add your fixed rate file path here if available\n    json_output='result_all_data.json'  # JSON output file\n)\n\nprint(f\"\\nResult shape: {result_all.shape}\")\nprint(f\"Columns: {list(result_all.columns)}\")\nprint(\"\\nFirst 5 rows:\")\nprint(result_all.head())","size_bytes":26066},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./pages/**/*.{ts,tsx}\", \"./components/**/*.{ts,tsx}\", \"./app/**/*.{ts,tsx}\", \"./src/**/*.{ts,tsx}\"],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        'sans': ['Poppins', 'ui-sans-serif', 'system-ui'],\n        'mono': ['JetBrains Mono', 'ui-monospace', 'monospace'],\n      },\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        \n        // Glass morphism\n        glass: {\n          DEFAULT: \"hsl(var(--glass))\",\n          border: \"hsl(var(--glass-border))\",\n        },\n        \n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          hover: \"hsl(var(--primary-hover))\",\n          light: \"hsl(var(--primary-light))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n          hover: \"hsl(var(--secondary-hover))\",\n        },\n        \n        // Performance status colors\n        success: {\n          DEFAULT: \"hsl(var(--success))\",\n          foreground: \"hsl(var(--success-foreground))\",\n          light: \"hsl(var(--success-light))\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning))\",\n          foreground: \"hsl(var(--warning-foreground))\",\n          light: \"hsl(var(--warning-light))\",\n        },\n        danger: {\n          DEFAULT: \"hsl(var(--danger))\",\n          foreground: \"hsl(var(--danger-foreground))\",\n          light: \"hsl(var(--danger-light))\",\n        },\n        \n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":3730},"updated_flask_api.py":{"content":"from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport os\nimport tempfile\nfrom werkzeug.utils import secure_filename\nimport traceback\nimport sys\n\n# Import your ETL pipeline\nfrom script import flexible_etl_pipeline, dataframe_to_json_by_name\n\napp = Flask(__name__)\nCORS(app)  # Enable CORS for all domains and routes\n\n# Configuration\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = {'xlsx', 'xls', 'csv'}\nMAX_CONTENT_LENGTH = 200 * 1024 * 1024  # 200MB max file size (matches frontend)\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n\n# Create upload directory if it doesn't exist\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\ndef allowed_file(filename):\n    \"\"\"Check if file has allowed extension\"\"\"\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\n        'status': 'healthy',\n        'message': 'CMLens ETL Backend is running',\n        'version': '1.0.0'\n    })\n\n@app.route('/process-agent-data', methods=['POST'])\ndef process_agent_data():\n    \"\"\"\n    Upload files and process ETL pipeline to return agent performance data\n    \n    Expected form data with files (all optional, at least one required):\n    - classConsumption: Class Consumption report file\n    - fixed: Fixed report file  \n    - referral: Referral report file\n    - upgrade: Upgrade report file\n    \n    Returns:\n    {\n        \"success\": true,\n        \"agents\": {\n            \"agent_name_1\": {\n                \"agent_id\": \"agent_name_1\",\n                \"team\": \"Team Name\",\n                \"group\": \"Group Name\", \n                \"students\": 150,\n                \"fixed_pct\": 65.5,\n                \"cc_pct\": 12.3,\n                \"sc_pct\": 3.1,\n                \"up_pct\": 28.7,\n                \"referral\": {\n                    \"leads\": 15,\n                    \"showups\": 12, \n                    \"paid\": 8\n                }\n            }\n        },\n        \"metadata\": {\n            \"total_agents\": 25,\n            \"processed_files\": [\"classConsumption\", \"fixed\"],\n            \"processing_time\": 2.34\n        }\n    }\n    \"\"\"\n    import time\n    start_time = time.time()\n    \n    try:\n        uploaded_files = {}\n        \n        \n        # Handle file uploads - match frontend naming\n        file_mapping = {\n            'classConsumption': 'cc_file',\n            'fixed': 'fixed_file', \n            'referral': 're_file',\n            'upgrade': 'up_file'\n        }\n        \n        # Also check the mapped backend keys that the frontend actually sends\n        backend_keys = ['cc_file', 'fixed_file', 're_file', 'up_file']\n        \n        for frontend_key, backend_key in file_mapping.items():\n            if frontend_key in request.files:\n                file = request.files[frontend_key]\n                \n                if file and file.filename != '' and allowed_file(file.filename):\n                    filename = secure_filename(file.filename)\n                    # Add timestamp to avoid conflicts\n                    timestamp = str(int(time.time()))\n                    filename = f\"{timestamp}_{filename}\"\n                    \n                    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n                    file.save(file_path)\n                    uploaded_files[backend_key] = file_path\n        \n        # Also check for files sent with backend keys directly\n        for backend_key in backend_keys:\n            if backend_key in request.files:\n                file = request.files[backend_key]\n                \n                if file and file.filename != '' and allowed_file(file.filename):\n                    filename = secure_filename(file.filename)\n                    # Add timestamp to avoid conflicts\n                    timestamp = str(int(time.time()))\n                    filename = f\"{timestamp}_{filename}\"\n                    \n                    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n                    file.save(file_path)\n                    uploaded_files[backend_key] = file_path\n        \n        if not uploaded_files:\n            return jsonify({\n                'success': False,\n                'error': 'No valid files uploaded. Please upload at least one file (classConsumption, fixed, referral, or upgrade).'\n            }), 400\n        \n        # Process ETL with uploaded files\n        result_df = flexible_etl_pipeline(\n            cc_file=uploaded_files.get('cc_file'),\n            up_file=uploaded_files.get('up_file'),\n            re_file=uploaded_files.get('re_file'),\n            fixed_file=uploaded_files.get('fixed_file')  # Added fixed file parameter\n        )\n        \n        # Convert to the expected frontend format\n        agents_data = convert_dataframe_to_frontend_format(result_df)\n        \n        # Clean up uploaded files\n        for file_path in uploaded_files.values():\n            try:\n                os.remove(file_path)\n            except:\n                pass  # Ignore cleanup errors\n        \n        processing_time = time.time() - start_time\n        \n        response = {\n            'success': True,\n            'agents': agents_data,\n            'metadata': {\n                'total_agents': len(agents_data),\n                'processed_files': [k for k, v in file_mapping.items() if v in uploaded_files],\n                'processing_time': round(processing_time, 2),\n                'shape': list(result_df.shape) if result_df is not None else [0, 0],\n                'columns': list(result_df.columns) if result_df is not None else []\n            }\n        }\n        \n        return jsonify(response)\n        \n    except Exception as e:\n        error_trace = traceback.format_exc()\n        print(f\"Error in process_agent_data: {error_trace}\", file=sys.stderr)\n        \n        # Clean up files on error\n        if 'uploaded_files' in locals():\n            for file_path in uploaded_files.values():\n                try:\n                    os.remove(file_path)\n                except:\n                    pass\n        \n        return jsonify({\n            'success': False,\n            'error': str(e),\n            'trace': error_trace if app.debug else None\n        }), 500\n\ndef convert_dataframe_to_frontend_format(df):\n    \"\"\"\n    Convert your ETL pipeline dataframe to the expected frontend format\n    \n    Expected DataFrame columns (modify based on your actual ETL output):\n    - Name (agent identifier)\n    - Team \n    - Group/Subgroup\n    - Students (student count)\n    - Fixed_Pct (fixed percentage)\n    - CC_Pct (class consumption percentage) \n    - SC_Pct (super class consumption percentage)\n    - UP_Pct (upgrade percentage)\n    - Referral_Leads (optional)\n    - Referral_Showups (optional)\n    - Referral_Paid (optional)\n    \"\"\"\n    \n    if df is None or df.empty:\n        return {}\n    \n    agents = {}\n    \n    for _, row in df.iterrows():\n        # Extract agent identifier (adjust column name as needed)\n        agent_id = str(row.get('Name', row.get('Agent_ID', row.get('Agent', f\"agent_{_}\"))))\n        \n        # Build agent data structure\n        agent_data = {\n            \"agent_id\": agent_id,\n            \"team\": str(row.get('Team', row.get('Team_Name', 'Unknown Team'))),\n            \"group\": str(row.get('Group', row.get('Subgroup', row.get('Group_Name', 'Unknown Group')))),\n            \"students\": int(row.get('Students', row.get('Student_Count', 0))),\n            \"fixed_pct\": safe_float(row.get('Fixed_Pct', row.get('Fixed_Rate'))),\n            \"cc_pct\": safe_float(row.get('CC_Pct', row.get('Class_Consumption_Pct'))),\n            \"sc_pct\": safe_float(row.get('SC_Pct', row.get('Super_Class_Consumption_Pct'))),\n            \"up_pct\": safe_float(row.get('UP_Pct', row.get('Upgrade_Pct'))),\n            \"referral\": {\n                \"leads\": int(row.get('Referral_Leads', row.get('Leads', 0))),\n                \"showups\": int(row.get('Referral_Showups', row.get('Showups', 0))),\n                \"paid\": int(row.get('Referral_Paid', row.get('Paid', 0)))\n            }\n        }\n        \n        agents[agent_id] = agent_data\n    \n    return agents\n\ndef safe_float(value):\n    \"\"\"Safely convert value to float, return None if invalid\"\"\"\n    try:\n        if value is None or str(value).lower() in ['nan', 'null', '', 'none']:\n            return None\n        return float(value)\n    except (ValueError, TypeError):\n        return None\n\n@app.route('/test-format', methods=['GET'])\ndef test_format():\n    \"\"\"\n    Test endpoint to show expected response format\n    \"\"\"\n    sample_response = {\n        \"success\": True,\n        \"agents\": {\n            \"john_doe\": {\n                \"agent_id\": \"john_doe\",\n                \"team\": \"EGLP1 EGSS-Sarah\",\n                \"group\": \"EGLP01Â∞èÁªÑ\",\n                \"students\": 185,\n                \"fixed_pct\": 65.2,\n                \"cc_pct\": 12.5,\n                \"sc_pct\": 3.2,\n                \"up_pct\": 28.7,\n                \"referral\": {\n                    \"leads\": 18,\n                    \"showups\": 14,\n                    \"paid\": 8\n                }\n            },\n            \"jane_smith\": {\n                \"agent_id\": \"jane_smith\", \n                \"team\": \"EGLP2 EGSS-Ahmed\",\n                \"group\": \"EGLP02Â∞èÁªÑ\",\n                \"students\": 312,\n                \"fixed_pct\": None,  # Can be null\n                \"cc_pct\": 15.3,\n                \"sc_pct\": 5.1,\n                \"up_pct\": 31.4,\n                \"referral\": {\n                    \"leads\": 24,\n                    \"showups\": 19,\n                    \"paid\": 12\n                }\n            }\n        },\n        \"metadata\": {\n            \"total_agents\": 2,\n            \"processed_files\": [\"classConsumption\", \"fixed\"],\n            \"processing_time\": 1.23\n        }\n    }\n    \n    return jsonify(sample_response)\n\nif __name__ == '__main__':\n    print(\"Starting CMLens ETL Backend...\")\n    print(\"Available endpoints:\")\n    print(\"  GET  /health - Health check\")\n    print(\"  POST /process-agent-data - Upload files and get agent performance data\")\n    print(\"  GET  /test-format - View expected response format\")\n    print()\n    print(\"Expected file upload keys:\")\n    print(\"  - classConsumption: Class Consumption report\")\n    print(\"  - fixed: Fixed report\")  \n    print(\"  - referral: Referral report\")\n    print(\"  - upgrade: Upgrade report\")\n    print()\n    \n    # Run in debug mode for development  \n    app.run(debug=True, host='0.0.0.0', port=8080)","size_bytes":10524},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { fileURLToPath, URL } from \"node:url\";\nimport { componentTagger } from \"lovable-tagger\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true,\n  },\n  preview: {\n    host: \"0.0.0.0\",\n    port: 5000,\n  },\n  plugins: [react(), mode === \"development\" && componentTagger()].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(path.dirname(fileURLToPath(import.meta.url)), \"./src\"),\n    },\n  },\n}));\n","size_bytes":620},"web_backend.py":{"content":"from flask import Flask, request, jsonify, send_from_directory, send_file\nfrom flask_cors import CORS\nimport os\nimport tempfile\nfrom werkzeug.utils import secure_filename\nimport traceback\nimport sys\nimport pandas as pd\nimport json\nimport requests\nfrom datetime import datetime, timedelta\n\n# Import your ETL pipeline\nfrom script import flexible_etl_pipeline, dataframe_to_json_by_name\n\n# Configure Flask to serve static files from dist folder in production\nstatic_folder = 'dist' if os.path.exists('dist') else None\napp = Flask(__name__, static_folder=static_folder, static_url_path='')\n\n# CORS configuration for development and production\n# Railway will provide the actual URL, but we'll configure for common patterns\nallowed_origins = [\n    \"http://localhost:3000\",  # Local development\n    \"http://localhost:5000\",  # Vite dev server (port 5000)\n    \"http://localhost:5173\",  # Vite dev server\n    \"http://127.0.0.1:3000\",\n    \"http://127.0.0.1:5000\",\n    \"http://127.0.0.1:5173\",\n    \"https://lovable.dev\",  # Lovable production\n    \"https://*.lovable.dev\",  # Lovable subdomains\n    \"https://gptengineer.app\",  # GPT Engineer production\n    \"https://*.gptengineer.app\",  # GPT Engineer subdomains\n]\n\n# Add Railway domain if available\nrailway_url = os.environ.get('RAILWAY_STATIC_URL')\nif railway_url:\n    allowed_origins.append(f\"https://{railway_url}\")\n\n# Add Replit domain if available\nreplit_domain = os.environ.get('REPLIT_DEV_DOMAIN')\nif replit_domain:\n    allowed_origins.extend([\n        f\"https://{replit_domain}\",\n        f\"http://{replit_domain}\",\n        f\"https://{replit_domain}:5000\",\n        f\"http://{replit_domain}:5000\"\n    ])\n\n# For development, allow all origins\nif os.environ.get('FLASK_ENV') == 'development':\n    CORS(app, origins=\"*\", supports_credentials=True)\nelse:\n    CORS(app, origins=allowed_origins, supports_credentials=True)\n\n# Configuration\nUPLOAD_FOLDER = os.path.join(tempfile.gettempdir(), 'uploads')  # Use temp directory\nNOTES_FOLDER = os.path.join(tempfile.gettempdir(), 'notes')  # For storing notes\nALLOWED_EXTENSIONS = {'xlsx', 'xls'}\nMAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH\n\n# OpenRouter AI configuration\nOPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY')\nOPENROUTER_BASE_URL = \"https://openrouter.ai/api/v1\"\n\n# Create upload and notes directories if they don't exist\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(NOTES_FOLDER, exist_ok=True)\n\ndef allowed_file(filename):\n    \"\"\"Check if file has allowed extension\"\"\"\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\n        'status': 'healthy',\n        'message': 'ETL Backend is running',\n        'port': os.environ.get('PORT', 'unknown'),\n        'upload_dir': UPLOAD_FOLDER\n    })\n\n@app.route('/process-etl', methods=['POST'])\ndef process_etl():\n    \"\"\"\n    Process ETL pipeline and return agent data as JSON\n    \n    Expected request format:\n    {\n        \"files\": {\n            \"cc_file\": \"path/to/cc.xlsx\",  // optional\n            \"up_file\": \"path/to/up.xlsx\",  // optional  \n            \"re_file\": \"path/to/re.xlsx\"   // optional\n        }\n    }\n    \n    Returns:\n    {\n        \"success\": true,\n        \"data\": {\n            \"Person Name 1\": {...},\n            \"Person Name 2\": {...}\n        },\n        \"metadata\": {\n            \"total_records\": 123,\n            \"shape\": [123, 10],\n            \"columns\": [\"Name\", \"Subgroup\", ...]\n        }\n    }\n    \"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data or 'files' not in data:\n            return jsonify({\n                'success': False,\n                'error': 'Missing files configuration'\n            }), 400\n        \n        files = data['files']\n        \n        # Extract file paths\n        cc_file = files.get('cc_file')\n        up_file = files.get('up_file') \n        re_file = files.get('re_file')\n        \n        # Validate that at least one file is provided\n        if not any([cc_file, up_file, re_file]):\n            return jsonify({\n                'success': False,\n                'error': 'At least one file must be provided'\n            }), 400\n        \n        # Validate file paths exist\n        for file_type, file_path in [('cc_file', cc_file), ('up_file', up_file), ('re_file', re_file)]:\n            if file_path and not os.path.exists(file_path):\n                return jsonify({\n                    'success': False,\n                    'error': f'{file_type} not found: {file_path}'\n                }), 400\n        \n        # Run ETL pipeline\n        result_df = flexible_etl_pipeline(\n            cc_file=cc_file,\n            up_file=up_file,\n            re_file=re_file\n        )\n        \n        # Convert to JSON format with Name as key\n        agent_data = dataframe_to_json_by_name(result_df)\n        \n        # Prepare response\n        response = {\n            'success': True,\n            'data': agent_data,\n            'metadata': {\n                'total_records': len(agent_data),\n                'shape': list(result_df.shape),\n                'columns': list(result_df.columns)\n            }\n        }\n        \n        return jsonify(response)\n        \n    except Exception as e:\n        error_trace = traceback.format_exc()\n        print(f\"Error in process_etl: {error_trace}\", file=sys.stderr)\n        \n        return jsonify({\n            'success': False,\n            'error': str(e),\n            'trace': error_trace if app.debug else None\n        }), 500\n\n@app.route('/upload-files', methods=['POST'])\ndef upload_files():\n    \"\"\"\n    Upload Excel files for ETL processing\n    \n    Expected form data with files:\n    - cc_file (optional): CC Excel file\n    - up_file (optional): UP Excel file  \n    - re_file (optional): RE Excel file\n    \n    Returns file paths for use in /process-etl endpoint\n    \"\"\"\n    try:\n        uploaded_files = {}\n        \n        # Handle each file type\n        for file_type in ['cc_file', 'up_file', 're_file']:\n            if file_type in request.files:\n                file = request.files[file_type]\n                \n                if file and file.filename != '' and allowed_file(file.filename):\n                    filename = secure_filename(file.filename)\n                    # Add timestamp to avoid conflicts\n                    import time\n                    timestamp = str(int(time.time()))\n                    filename = f\"{timestamp}_{filename}\"\n                    \n                    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n                    file.save(file_path)\n                    uploaded_files[file_type] = file_path\n        \n        if not uploaded_files:\n            return jsonify({\n                'success': False,\n                'error': 'No valid files uploaded'\n            }), 400\n        \n        return jsonify({\n            'success': True,\n            'uploaded_files': uploaded_files,\n            'message': f'Successfully uploaded {len(uploaded_files)} file(s)'\n        })\n        \n    except Exception as e:\n        error_trace = traceback.format_exc()\n        print(f\"Error in upload_files: {error_trace}\", file=sys.stderr)\n        \n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 500\n\n@app.route('/process-agent-data', methods=['POST'])\ndef process_agent_data():\n    \"\"\"\n    Upload files and process ETL pipeline for agent data\n    \n    Expected form data with files:\n    - cc_file (optional): CC Excel file\n    - up_file (optional): UP Excel file  \n    - re_file (optional): RE Excel file\n    - fixed_file (optional): Fixed Rate Excel file\n    \n    Returns agent data in the format expected by frontend\n    \"\"\"\n    try:\n        print(f\"Received request: {request.method} to /process-agent-data\")\n        print(f\"Content-Type: {request.content_type}\")\n        print(f\"Request files: {list(request.files.keys())}\")\n        print(f\"Request form: {list(request.form.keys())}\")\n        \n        # Upload and process files\n        uploaded_files = {}\n        \n        for file_type in ['cc_file', 'up_file', 're_file', 'fixed_file']:\n            if file_type in request.files:\n                file = request.files[file_type]\n                print(f\"Processing {file_type}: {file.filename}\")\n                \n                if file and file.filename != '' and allowed_file(file.filename):\n                    filename = secure_filename(file.filename)\n                    import time\n                    timestamp = str(int(time.time()))\n                    filename = f\"{timestamp}_{filename}\"\n                    \n                    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n                    file.save(file_path)\n                    uploaded_files[file_type] = file_path\n                    print(f\"Saved {file_type} to: {file_path}\")\n                elif file and file.filename != '':\n                    print(f\"File {file.filename} not allowed (invalid extension)\")\n                else:\n                    print(f\"Empty file for {file_type}\")\n        \n        print(f\"Uploaded files: {uploaded_files}\")\n        \n        if not uploaded_files:\n            error_msg = 'No valid files uploaded'\n            if not request.files:\n                error_msg = 'No files in request. Expected multipart/form-data with file uploads.'\n            elif all(f.filename == '' for f in request.files.values()):\n                error_msg = 'All uploaded files are empty'\n            else:\n                invalid_files = [f\"{k}: {v.filename}\" for k, v in request.files.items() if not allowed_file(v.filename)]\n                error_msg = f'No valid Excel files found. Invalid files: {invalid_files}. Only .xlsx and .xls files are allowed.'\n            \n            print(f\"Error: {error_msg}\")\n            return jsonify({\n                'success': False,\n                'error': error_msg,\n                'debug': {\n                    'received_files': list(request.files.keys()),\n                    'allowed_extensions': list(ALLOWED_EXTENSIONS)\n                }\n            }), 400\n        \n        # Process ETL with uploaded files\n        result_df = flexible_etl_pipeline(\n            cc_file=uploaded_files.get('cc_file'),\n            up_file=uploaded_files.get('up_file'),\n            re_file=uploaded_files.get('re_file'),\n            fixed_file=uploaded_files.get('fixed_file')\n        )\n        \n        # Convert DataFrame to list of agent objects for frontend\n        agent_list = []\n        for idx, row in result_df.iterrows():\n            # Helper function to safely get scalar value from potentially Series data\n            def safe_get(value):\n                # Handle Series first to avoid boolean evaluation issues\n                if hasattr(value, 'iloc'):  # If it's a Series\n                    if len(value) == 0:\n                        return None\n                    first_val = value.iloc[0]\n                    return None if pd.isna(first_val) else first_val\n                else:\n                    # Handle scalar values\n                    return None if pd.isna(value) else value\n            \n            # Safe extraction of values\n            name_val = safe_get(row['Name'])\n            team_val = safe_get(row['Team'])\n            group_val = safe_get(row['Group'])\n            students_val = safe_get(row['Students'])\n            fixed_pct_val = safe_get(row['Fixed_Pct'])\n            cc_pct_val = safe_get(row['CC_Pct'])\n            sc_pct_val = safe_get(row['SC_Pct'])\n            up_pct_val = safe_get(row['UP_Pct'])\n            ref_leads_val = safe_get(row['Referral_Leads'])\n            ref_showups_val = safe_get(row['Referral_Showups'])\n            ref_paid_val = safe_get(row['Referral_Paid'])\n            \n            agent_data = {\n                'id': str(name_val) if name_val is not None else '',\n                'name': str(name_val) if name_val is not None else '',\n                'team': str(team_val) if team_val is not None else '',\n                'group': str(group_val) if group_val is not None else '',\n                'students': int(students_val) if students_val is not None else 0,\n                'fixedPct': float(fixed_pct_val) if fixed_pct_val is not None else None,\n                'ccPct': float(cc_pct_val) if cc_pct_val is not None else None,\n                'scPct': float(sc_pct_val) if sc_pct_val is not None else None,\n                'upPct': float(up_pct_val) if up_pct_val is not None else None,\n                'referralLeads': int(ref_leads_val) if ref_leads_val is not None else 0,\n                'referralShowups': int(ref_showups_val) if ref_showups_val is not None else 0,\n                'referralPaid': int(ref_paid_val) if ref_paid_val is not None else 0\n            }\n            agent_list.append(agent_data)\n        \n        # Clean up uploaded files after processing\n        for file_path in uploaded_files.values():\n            try:\n                if os.path.exists(file_path):\n                    os.remove(file_path)\n            except Exception as cleanup_error:\n                print(f\"Warning: Could not cleanup file {file_path}: {cleanup_error}\")\n        \n        response = {\n            'success': True,\n            'agents': agent_list,\n            'total_agents': len(agent_list),\n            'processedFiles': list(uploaded_files.keys())\n        }\n        \n        return jsonify(response)\n        \n    except Exception as e:\n        # Clean up uploaded files on error\n        if 'uploaded_files' in locals():\n            for file_path in uploaded_files.values():\n                try:\n                    if os.path.exists(file_path):\n                        os.remove(file_path)\n                except:\n                    pass\n        \n        error_trace = traceback.format_exc()\n        print(f\"Error in process_agent_data: {error_trace}\", file=sys.stderr)\n        \n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 500\n\n@app.route('/test-upload', methods=['POST'])\ndef test_upload():\n    \"\"\"Test endpoint to debug file upload issues\"\"\"\n    try:\n        result = {\n            'content_type': request.content_type,\n            'files': {},\n            'form': dict(request.form),\n            'method': request.method\n        }\n        \n        for key, file in request.files.items():\n            file_content = file.read()\n            result['files'][key] = {\n                'filename': file.filename,\n                'size': len(file_content),\n                'content_type': file.content_type\n            }\n            file.seek(0)  # Reset file pointer\n        \n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/test-format', methods=['GET'])\ndef test_format():\n    \"\"\"\n    Show expected response structure for agent data\n    \"\"\"\n    sample_agents = [\n        {\n            'id': 'agent_001',\n            'name': 'John Doe',\n            'team': 'Team Alpha',\n            'group': 'ME-EG-001',\n            'students': 25,\n            'fixedPct': 85.5,\n            'ccPct': 78.2,\n            'scPct': 92.1,\n            'upPct': 65.4,\n            'referralLeads': 12,\n            'referralShowups': 8,\n            'referralPaid': 5\n        },\n        {\n            'id': 'agent_002', \n            'name': 'Jane Smith',\n            'team': 'Team Beta',\n            'group': 'ME-EG-002',\n            'students': 18,\n            'fixedPct': None,  # Can be null\n            'ccPct': 82.7,\n            'scPct': None,     # Can be null\n            'upPct': 71.3,\n            'referralLeads': 0,\n            'referralShowups': 0,\n            'referralPaid': 0\n        }\n    ]\n    \n    return jsonify({\n        'success': True,\n        'agents': sample_agents,\n        'totalCount': len(sample_agents),\n        'processedFiles': ['cc_file', 'up_file'],\n        'note': 'This is the expected response format for /process-agent-data'\n    })\n\n# Serve React app for production deployment\n@app.route('/')\ndef serve_index():\n    \"\"\"Serve the React app index.html\"\"\"\n    if app.static_folder and os.path.exists(os.path.join(app.static_folder, 'index.html')):\n        return send_from_directory(app.static_folder, 'index.html')\n    else:\n        return jsonify({\"message\": \"Frontend not built. Run 'npm run build' first.\"}), 404\n\n@app.route('/<path:path>')\ndef serve_static_or_index(path):\n    \"\"\"Serve static files or React app for client-side routing\"\"\"\n    if app.static_folder:\n        # Try to serve static file first\n        static_file_path = os.path.join(app.static_folder, path)\n        if os.path.exists(static_file_path) and os.path.isfile(static_file_path):\n            return send_from_directory(app.static_folder, path)\n        \n        # For client-side routing, serve index.html\n        index_path = os.path.join(app.static_folder, 'index.html')\n        if os.path.exists(index_path):\n            return send_from_directory(app.static_folder, 'index.html')\n    \n    return jsonify({\"error\": \"File not found\"}), 404\n\n# AI Analysis Functions\ndef call_openrouter_ai(prompt, agent_data=None):\n    \"\"\"Call OpenRouter AI for coaching insights\"\"\"\n    if not OPENROUTER_API_KEY:\n        return {\"error\": \"OpenRouter API key not configured\", \"fallback\": True}\n    \n    try:\n        headers = {\n            \"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\",\n            \"Content-Type\": \"application/json\",\n            \"HTTP-Referer\": \"https://your-app.replit.dev\",\n            \"X-Title\": \"CMLens Dashboard\"\n        }\n        \n        # Format prompt with agent data if provided\n        formatted_prompt = prompt\n        if agent_data:\n            formatted_prompt += f\"\\n\\nAgent Performance Data:\\n{json.dumps(agent_data, indent=2)}\"\n        \n        data = {\n            \"model\": \"anthropic/claude-3-haiku\",\n            \"messages\": [\n                {\"role\": \"user\", \"content\": formatted_prompt}\n            ],\n            \"max_tokens\": 500,\n            \"temperature\": 0.7\n        }\n        \n        response = requests.post(f\"{OPENROUTER_BASE_URL}/chat/completions\", \n                               headers=headers, json=data, timeout=30)\n        \n        if response.status_code == 200:\n            result = response.json()\n            return {\n                \"success\": True,\n                \"analysis\": result['choices'][0]['message']['content'],\n                \"fallback\": False\n            }\n        else:\n            print(f\"OpenRouter API error: {response.status_code} - {response.text}\")\n            return {\"error\": f\"API Error: {response.status_code}\", \"fallback\": True}\n            \n    except Exception as e:\n        print(f\"OpenRouter AI error: {str(e)}\")\n        return {\"error\": str(e), \"fallback\": True}\n\ndef get_fallback_analysis(analysis_type, agent_data=None):\n    \"\"\"Provide rule-based analysis when AI is unavailable\"\"\"\n    if analysis_type == \"coaching\":\n        return generate_coaching_insights(agent_data)\n    elif analysis_type == \"meeting\":\n        return generate_meeting_insights(agent_data)\n    return \"Basic analysis: Review performance metrics and identify areas for improvement.\"\n\ndef generate_coaching_insights(agent_data):\n    \"\"\"Generate rule-based coaching insights\"\"\"\n    if not agent_data:\n        return \"No agent data available for analysis.\"\n    \n    insights = []\n    metrics = agent_data.get('metrics', {})\n    \n    # Analyze each metric\n    fixed_pct = metrics.get('fixedPct', 0) * 100 if metrics.get('fixedPct') else 0\n    cc_pct = metrics.get('ccPct', 0) * 100 if metrics.get('ccPct') else 0\n    sc_pct = metrics.get('scPct', 0) * 100 if metrics.get('scPct') else 0\n    up_pct = metrics.get('upPct', 0) * 100 if metrics.get('upPct') else 0\n    \n    if fixed_pct < 70:\n        insights.append(f\"‚Ä¢ Student retention (Fixed%: {fixed_pct:.1f}%) is below target (70%). Focus on improving class engagement and addressing student concerns early.\")\n    \n    if cc_pct < 60:\n        insights.append(f\"‚Ä¢ Class coverage (CC%: {cc_pct:.1f}%) needs improvement. Encourage students to attend at least 12 classes for better outcomes.\")\n    \n    if sc_pct < 30:\n        insights.append(f\"‚Ä¢ Success calls (SC%: {sc_pct:.1f}%) are underperforming. Review call scripts and timing for M1-M4 super class consumption.\")\n    \n    if up_pct < 15:\n        insights.append(f\"‚Ä¢ Upselling (UP%: {up_pct:.1f}%) is below expectations. Focus on identifying upgrade opportunities and improving sales techniques.\")\n    \n    if not insights:\n        insights.append(\"‚Ä¢ Performance is meeting targets. Consider advanced coaching for further optimization.\")\n    \n    return \"\\n\".join(insights)\n\ndef generate_meeting_insights(agent_data):\n    \"\"\"Generate rule-based meeting discussion points\"\"\"\n    if not agent_data:\n        return \"No agent data available for meeting discussion.\"\n    \n    discussion_points = []\n    metrics = agent_data.get('metrics', {})\n    \n    # Calculate overall score\n    score = calculate_agent_score(metrics)\n    \n    if score < 60:\n        discussion_points.append(\"‚Ä¢ Priority agent requiring immediate attention and action plan\")\n        discussion_points.append(\"‚Ä¢ Discuss specific challenges and barriers to performance\")\n        discussion_points.append(\"‚Ä¢ Set clear improvement targets with timeline\")\n    elif score < 80:\n        discussion_points.append(\"‚Ä¢ Agent showing potential but needs focused coaching\")\n        discussion_points.append(\"‚Ä¢ Identify 1-2 key areas for improvement\")\n    else:\n        discussion_points.append(\"‚Ä¢ Strong performer - discuss growth opportunities\")\n        discussion_points.append(\"‚Ä¢ Consider mentoring responsibilities for team\")\n    \n    return \"\\n\".join(discussion_points)\n\ndef calculate_agent_score(metrics):\n    \"\"\"Calculate weighted agent performance score\"\"\"\n    # Default weights based on business importance\n    weights = {'fixedPct': 0.3, 'ccPct': 0.25, 'scPct': 0.25, 'upPct': 0.2}\n    \n    score = 0\n    total_weight = 0\n    \n    for metric, weight in weights.items():\n        if metrics.get(metric) is not None:\n            # Convert to percentage and apply weight\n            value = metrics[metric] * 100 if metrics[metric] < 1 else metrics[metric]\n            score += value * weight\n            total_weight += weight\n    \n    return score / total_weight if total_weight > 0 else 0\n\ndef get_agent_category(score):\n    \"\"\"Categorize agent based on performance score\"\"\"\n    if score >= 85:\n        return \"Elite\"\n    elif score >= 75:\n        return \"Strong\"\n    elif score >= 65:\n        return \"Stable\"\n    elif score >= 50:\n        return \"Watch\"\n    else:\n        return \"Critical\"\n\n# Notes Management Functions\ndef save_notes(notes_type, agent_id, content, week=None):\n    \"\"\"Save coaching or meeting notes\"\"\"\n    try:\n        # Sanitize inputs to prevent path traversal\n        safe_notes_type = secure_filename(notes_type)\n        safe_agent_id = secure_filename(agent_id)\n        safe_week = secure_filename(str(week)) if week else None\n        \n        filename = f\"{safe_notes_type}_{safe_agent_id}\"\n        if safe_week:\n            filename += f\"_week_{safe_week}\"\n        filename += \".json\"\n        \n        filepath = os.path.join(NOTES_FOLDER, filename)\n        \n        notes_data = {\n            \"agent_id\": agent_id,\n            \"type\": notes_type,\n            \"content\": content,\n            \"week\": week,\n            \"updated_at\": datetime.now().isoformat()\n        }\n        \n        with open(filepath, 'w') as f:\n            json.dump(notes_data, f, indent=2)\n        \n        return {\"success\": True, \"message\": \"Notes saved successfully\"}\n    \n    except Exception as e:\n        return {\"success\": False, \"error\": str(e)}\n\ndef load_notes(notes_type, agent_id, week=None):\n    \"\"\"Load coaching or meeting notes\"\"\"\n    try:\n        # Sanitize inputs to prevent path traversal\n        safe_notes_type = secure_filename(notes_type)\n        safe_agent_id = secure_filename(agent_id)\n        safe_week = secure_filename(str(week)) if week else None\n        \n        filename = f\"{safe_notes_type}_{safe_agent_id}\"\n        if safe_week:\n            filename += f\"_week_{safe_week}\"\n        filename += \".json\"\n        \n        filepath = os.path.join(NOTES_FOLDER, filename)\n        \n        if os.path.exists(filepath):\n            with open(filepath, 'r') as f:\n                return json.load(f)\n        else:\n            return {\"content\": \"\", \"agent_id\": agent_id, \"type\": notes_type, \"week\": week}\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\n# API Endpoints for Targets and Meetings Features\n\n@app.route('/api/coaching-notes/<agent_id>', methods=['GET', 'POST'])\ndef handle_coaching_notes(agent_id):\n    \"\"\"Save or load coaching notes for an agent\"\"\"\n    if request.method == 'POST':\n        data = request.get_json()\n        content = data.get('content', '')\n        result = save_notes('coaching', agent_id, content)\n        return jsonify(result)\n    \n    else:  # GET\n        notes = load_notes('coaching', agent_id)\n        return jsonify(notes)\n\n@app.route('/api/meeting-notes/<agent_id>/<week>', methods=['GET', 'POST'])\ndef handle_meeting_notes(agent_id, week):\n    \"\"\"Save or load meeting notes for an agent for a specific week\"\"\"\n    if request.method == 'POST':\n        data = request.get_json()\n        content = data.get('content', '')\n        result = save_notes('meeting', agent_id, content, week)\n        return jsonify(result)\n    \n    else:  # GET\n        notes = load_notes('meeting', agent_id, week)\n        return jsonify(notes)\n\n@app.route('/api/ai-analysis', methods=['POST'])\ndef ai_analysis():\n    \"\"\"Generate AI-powered analysis for coaching or meetings\"\"\"\n    try:\n        data = request.get_json()\n        analysis_type = data.get('type', 'coaching')  # 'coaching' or 'meeting'\n        agent_data = data.get('agent_data')\n        custom_prompt = data.get('prompt', '')\n        \n        # Prepare prompt based on analysis type\n        if analysis_type == 'coaching':\n            base_prompt = \"\"\"As an expert performance coach, analyze this agent's performance data and provide specific, actionable coaching recommendations. Focus on:\n1. Strengths to leverage\n2. Areas needing improvement\n3. Specific action steps\n4. Coaching strategy recommendations\n\nProvide practical, implementable advice that a manager can use immediately.\"\"\"\n        \n        elif analysis_type == 'meeting':\n            base_prompt = \"\"\"As a team management consultant, analyze this agent's performance and generate specific discussion points for a weekly team meeting. Include:\n1. Key performance insights\n2. Questions to ask the agent\n3. Action items and next steps\n4. Timeline for improvement\n\nFocus on constructive dialogue and clear accountability measures.\"\"\"\n        \n        else:\n            base_prompt = custom_prompt or \"Analyze this agent's performance data and provide insights.\"\n        \n        # Try AI analysis first\n        ai_result = call_openrouter_ai(base_prompt, agent_data)\n        \n        if ai_result.get('fallback'):\n            # Use rule-based fallback\n            fallback_analysis = get_fallback_analysis(analysis_type, agent_data)\n            return jsonify({\n                \"success\": True,\n                \"analysis\": fallback_analysis,\n                \"source\": \"fallback\",\n                \"message\": \"AI unavailable, using rule-based analysis\"\n            })\n        \n        return jsonify({\n            \"success\": True,\n            \"analysis\": ai_result.get('analysis', ''),\n            \"source\": \"ai\"\n        })\n    \n    except Exception as e:\n        print(f\"AI analysis error: {str(e)}\")\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e)\n        }), 500\n\n@app.route('/api/agent-performance/<agent_id>', methods=['GET'])\ndef get_agent_performance(agent_id):\n    \"\"\"Get detailed performance analysis for a specific agent\"\"\"\n    try:\n        # This would integrate with your existing agent data\n        # For now, return a structured response for the frontend\n        \n        # You would typically fetch this from your existing agent data\n        # For demo, using sample data structure\n        sample_metrics = {\n            \"fixedPct\": 0.65,\n            \"ccPct\": 0.72,\n            \"scPct\": 0.28,\n            \"upPct\": 0.18,\n            \"students\": 45,\n            \"referralLeads\": 12,\n            \"referralShowups\": 8,\n            \"referralPaid\": 5\n        }\n        \n        score = calculate_agent_score(sample_metrics)\n        category = get_agent_category(score)\n        \n        return jsonify({\n            \"success\": True,\n            \"agent\": {\n                \"id\": agent_id,\n                \"name\": agent_id,\n                \"score\": round(score, 1),\n                \"category\": category,\n                \"metrics\": sample_metrics\n            }\n        })\n    \n    except Exception as e:\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e)\n        }), 500\n\n@app.route('/api/team-performance', methods=['GET'])\ndef get_team_performance():\n    \"\"\"Get team performance summary for meetings tab\"\"\"\n    try:\n        week = request.args.get('week', '1')\n        threshold = float(request.args.get('threshold', 60))\n        \n        # Enhanced team data with weaknesses analysis\n        agents_data = [\n            {\n                \"id\": \"EGLP-ahmedamrali\",\n                \"name\": \"Ahmed Amrali\", \n                \"team\": \"Team Alpha\",\n                \"score\": 45.2,\n                \"category\": \"Critical\",\n                \"metrics\": {\"fixedPct\": 0.45, \"ccPct\": 0.38, \"scPct\": 0.22, \"upPct\": 0.08},\n                \"weaknesses\": [\"Student retention below 70%\", \"Class coverage needs improvement\", \"Upselling opportunities missed\"]\n            },\n            {\n                \"id\": \"EGLP-ahmedsalah\",\n                \"name\": \"Ahmed Salah\",\n                \"team\": \"Team Alpha\", \n                \"score\": 58.7,\n                \"category\": \"Watch\",\n                \"metrics\": {\"fixedPct\": 0.62, \"ccPct\": 0.55, \"scPct\": 0.31, \"upPct\": 0.12},\n                \"weaknesses\": [\"Success calls below target\", \"Upselling rate needs improvement\"]\n            },\n            {\n                \"id\": \"EGLP-aliam\",\n                \"name\": \"Ali Mohamed\",\n                \"team\": \"Team Alpha\",\n                \"score\": 72.3,\n                \"category\": \"Stable\", \n                \"metrics\": {\"fixedPct\": 0.68, \"ccPct\": 0.75, \"scPct\": 0.35, \"upPct\": 0.18},\n                \"weaknesses\": []\n            },\n            {\n                \"id\": \"EGLP-amalYossef\",\n                \"name\": \"Amal Yossef\",\n                \"team\": \"Team Beta\",\n                \"score\": 38.1,\n                \"category\": \"Critical\",\n                \"metrics\": {\"fixedPct\": 0.35, \"ccPct\": 0.42, \"scPct\": 0.18, \"upPct\": 0.05},\n                \"weaknesses\": [\"Student retention critically low\", \"All metrics below target\", \"Requires immediate intervention\"]\n            },\n            {\n                \"id\": \"EGLP-amira\",\n                \"name\": \"Amira Hassan\",\n                \"team\": \"Team Beta\",\n                \"score\": 81.4,\n                \"category\": \"Strong\",\n                \"metrics\": {\"fixedPct\": 0.78, \"ccPct\": 0.82, \"scPct\": 0.42, \"upPct\": 0.22},\n                \"weaknesses\": []\n            }\n        ]\n        \n        # Calculate team statistics\n        total_agents = len(agents_data)\n        underperforming_agents = [agent for agent in agents_data if agent[\"score\"] < threshold]\n        underperforming_count = len(underperforming_agents)\n        average_score = sum(agent[\"score\"] for agent in agents_data) / total_agents if agents_data else 0\n        \n        sample_team_data = {\n            \"week\": week,\n            \"threshold\": threshold,\n            \"total_agents\": total_agents,\n            \"underperforming_count\": underperforming_count,\n            \"average_score\": round(average_score, 1),\n            \"agents\": agents_data\n        }\n        \n        return jsonify({\n            \"success\": True,\n            \"data\": sample_team_data\n        })\n    \n    except Exception as e:\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e)\n        }), 500\n\n@app.route('/api/teams-agents', methods=['GET'])\ndef get_teams_agents():\n    \"\"\"Get available teams and agents for frontend selectors\"\"\"\n    try:\n        # This should ideally come from your database/ETL data\n        # For now, providing structure that matches the actual agent data\n        teams_data = {\n            \"teams\": [\"Team Alpha\", \"Team Beta\", \"Team Gamma\", \"Team Delta\"],\n            \"agents_by_team\": {\n                \"Team Alpha\": [\n                    {\"id\": \"EGLP-ahmedamrali\", \"name\": \"Ahmed Amrali\"},\n                    {\"id\": \"EGLP-ahmedsalah\", \"name\": \"Ahmed Salah\"}, \n                    {\"id\": \"EGLP-aliam\", \"name\": \"Ali Mohamed\"}\n                ],\n                \"Team Beta\": [\n                    {\"id\": \"EGLP-amalYossef\", \"name\": \"Amal Yossef\"},\n                    {\"id\": \"EGLP-amira\", \"name\": \"Amira Hassan\"}\n                ],\n                \"Team Gamma\": [\n                    {\"id\": \"EGLP-mohamed\", \"name\": \"Mohamed Hassan\"},\n                    {\"id\": \"EGLP-hassan\", \"name\": \"Hassan Ali\"},\n                    {\"id\": \"EGLP-fatma\", \"name\": \"Fatma Ahmed\"}\n                ],\n                \"Team Delta\": [\n                    {\"id\": \"EGLP-ahmed\", \"name\": \"Ahmed Mahmoud\"},\n                    {\"id\": \"EGLP-nour\", \"name\": \"Nour Ibrahim\"},\n                    {\"id\": \"EGLP-omar\", \"name\": \"Omar Khaled\"}\n                ]\n            }\n        }\n        \n        return jsonify({\n            \"success\": True,\n            \"data\": teams_data\n        })\n    \n    except Exception as e:\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e)\n        }), 500\n\nif __name__ == '__main__':\n    print(\"Starting ETL Web Backend...\")\n    print(\"Available endpoints:\")\n    print(\"  GET  /health - Health check\")\n    print(\"  GET  /test-format - Show expected response format\")\n    print(\"  POST /test-upload - Debug file upload issues\")\n    print(\"  POST /process-agent-data - Upload files and process ETL (main endpoint)\")\n    print(\"  POST /upload-files - Upload Excel files only\")\n    print(\"  POST /process-etl - Process ETL with file paths\")\n    print()\n    print(\"Frontend should call: POST /process-agent-data\")\n    print(\"If having issues, try: POST /test-upload first\")\n    print()\n    \n    # Get port from environment (Railway sets this dynamically)\n    port = int(os.environ.get('PORT', 5000))\n    \n    # Check if running in production (Railway)\n    is_production = os.environ.get('RAILWAY_ENVIRONMENT') or os.environ.get('RAILWAY_PROJECT_ID')\n    \n    if is_production:\n        print(f\"üöÄ Starting production server on port {port}\")\n        app.run(host='0.0.0.0', port=port, debug=False)\n    else:\n        print(f\"üîß Starting development server on 0.0.0.0:{port}\")\n        # Use 0.0.0.0 in development for deployment health checks to work\n        app.run(debug=True, host='0.0.0.0', port=port)","size_bytes":35215},"src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"src/App.tsx":{"content":"import React from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { SidebarProvider, SidebarInset, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { ReportIssueFooter } from \"@/components/ReportIssueFooter\";\nimport Login from \"./pages/Login\";\nimport UploadTargets from \"./pages/UploadTargets\";\nimport AgentsPerformance from \"./pages/AgentsPerformance\";\nimport TeamAnalytics from \"./pages/TeamAnalytics\";\nimport Analytics from \"./pages/Analytics\";\nimport Meetings from \"./pages/Meetings\";\nimport Calls from \"./pages/Calls\";\nimport NotFound from \"./pages/NotFound\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogOut } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"@/hooks/use-toast\";\n\nconst queryClient = new QueryClient();\n\n// Protected Route Component\nconst ProtectedRoute = ({ children }: { children: React.ReactNode }) => {\n  const isAuthenticated = localStorage.getItem(\"cmlens_session\") === \"authenticated\";\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return <AppLayoutWrapper>{children}</AppLayoutWrapper>;\n};\n\n// Public Route Component (redirect if already logged in)\nconst PublicRoute = ({ children }: { children: React.ReactNode }) => {\n  const isAuthenticated = localStorage.getItem(\"cmlens_session\") === \"authenticated\";\n  return !isAuthenticated ? <>{children}</> : <Navigate to=\"/upload\" replace />;\n};\n\n// Layout wrapper that can use router hooks\nconst AppLayoutWrapper = ({ children }: { children: React.ReactNode }) => {\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"cmlens_session\");\n    localStorage.removeItem(\"cmlens_targets\");\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n    navigate(\"/login\");\n  };\n\n  return (\n    <SidebarProvider>\n      <div className=\"flex min-h-screen w-full\">\n        <AppSidebar />\n        <SidebarInset className=\"flex flex-col\">\n          <header className=\"flex h-16 shrink-0 items-center justify-between border-b border-border px-4\">\n            <div className=\"flex items-center space-x-2\">\n              <SidebarTrigger />\n              <h1 className=\"text-lg font-semibold text-foreground\">Dashboard</h1>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            {children}\n          </main>\n          <ReportIssueFooter />\n        </SidebarInset>\n      </div>\n    </SidebarProvider>\n  );\n};\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/login\" element={\n            <PublicRoute>\n              <Login />\n            </PublicRoute>\n          } />\n          <Route path=\"/upload\" element={\n            <ProtectedRoute>\n              <UploadTargets />\n            </ProtectedRoute>\n          } />\n          <Route path=\"/performance\" element={\n            <ProtectedRoute>\n              <AgentsPerformance />\n            </ProtectedRoute>\n          } />\n          <Route path=\"/targets\" element={\n            <ProtectedRoute>\n              <TeamAnalytics />\n            </ProtectedRoute>\n          } />\n          <Route path=\"/meetings\" element={\n            <ProtectedRoute>\n              <Meetings />\n            </ProtectedRoute>\n          } />\n          <Route path=\"/calls\" element={\n            <ProtectedRoute>\n              <Calls />\n            </ProtectedRoute>\n          } />\n          <Route path=\"/analytics\" element={\n            <ProtectedRoute>\n              <Analytics />\n            </ProtectedRoute>\n          } />\n          <Route path=\"/\" element={<Navigate to=\"/login\" replace />} />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":4617},"src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* CMLens Design System - Crystal Clear Dashboard */\n@layer base {\n  :root {\n    /* Core Brand Colors - Dark Theme */\n    --background: 225 15% 6%;\n    --foreground: 210 40% 98%;\n\n    /* Glass morphism surfaces */\n    --card: 225 15% 8%;\n    --card-foreground: 210 40% 98%;\n    --glass: 225 15% 10% / 0.8;\n    --glass-border: 195 100% 65% / 0.1;\n\n    --popover: 225 15% 8%;\n    --popover-foreground: 210 40% 98%;\n\n    /* Primary - Modern cyan-blue gradient */\n    --primary: 195 100% 65%;\n    --primary-foreground: 225 15% 6%;\n    --primary-hover: 195 100% 70%;\n    --primary-light: 195 80% 85%;\n\n    /* Secondary - Deep slate */\n    --secondary: 215 20% 12%;\n    --secondary-foreground: 210 40% 98%;\n    --secondary-hover: 215 20% 16%;\n\n    /* Performance Status Colors */\n    --success: 160 84% 55%;\n    --success-foreground: 355 25% 97%;\n    --success-light: 160 84% 85%;\n    \n    --warning: 45 93% 65%;\n    --warning-foreground: 20 14% 4%;\n    --warning-light: 45 93% 85%;\n    \n    --danger: 348 83% 65%;\n    --danger-foreground: 355 25% 97%;\n    --danger-light: 348 83% 85%;\n\n    /* Neutral tones */\n    --muted: 215 20% 15%;\n    --muted-foreground: 215 20% 65%;\n    \n    --accent: 215 20% 18%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 348 83% 65%;\n    --destructive-foreground: 355 25% 97%;\n\n    /* Borders and inputs */\n    --border: 215 20% 20%;\n    --input: 215 20% 15%;\n    --ring: 195 100% 65%;\n\n    /* Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(195 100% 75%));\n    --gradient-glass: linear-gradient(135deg, hsl(var(--glass)), hsl(var(--card)));\n    --gradient-hero: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(240 100% 70%) 100%);\n    \n    /* Shadows */\n    --shadow-glass: 0 8px 32px hsl(var(--primary) / 0.2);\n    --shadow-card: 0 4px 16px hsl(var(--primary) / 0.1);\n    --shadow-elevated: 0 12px 40px hsl(var(--primary) / 0.25);\n\n    --radius: 0.75rem;\n\n    --sidebar-background: 225 15% 7%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 195 100% 65%;\n    --sidebar-primary-foreground: 225 15% 6%;\n    --sidebar-accent: 215 20% 12%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 195 100% 65% / 0.2;\n    --sidebar-ring: 195 100% 65%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  /* Glass Card Components */\n  .glass-card {\n    @apply bg-glass/80 backdrop-blur-xl border border-glass-border rounded-2xl shadow-lg;\n  }\n  \n  .card-elevated {\n    @apply bg-card border border-border rounded-2xl shadow-xl;\n  }\n\n  /* Performance Status Pills */\n  .status-pill {\n    @apply inline-flex items-center justify-center px-3 py-1.5 rounded-full text-sm font-medium;\n  }\n  \n  .status-success {\n    @apply bg-success text-success-foreground;\n  }\n  \n  .status-warning {\n    @apply bg-warning text-warning-foreground;\n  }\n  \n  .status-danger {\n    @apply bg-danger text-danger-foreground;\n  }\n  \n  .status-neutral {\n    @apply bg-muted text-muted-foreground;\n  }\n\n  /* Upload Zone */\n  .upload-zone {\n    @apply border-2 border-dashed border-border bg-glass/40 rounded-2xl p-8 text-center \n           hover:border-primary/50 hover:bg-glass/60 transition-all duration-300 cursor-pointer;\n  }\n  \n  .upload-zone.drag-over {\n    @apply border-primary bg-primary-light/50;\n  }\n\n  /* Button Variants */\n  .btn-hero {\n    @apply bg-gradient-to-r from-primary to-primary-hover text-primary-foreground \n           shadow-xl hover:shadow-2xl transition-all duration-300 \n           hover:scale-[1.02] active:scale-[0.98];\n  }\n  \n  .btn-glass {\n    @apply glass-card hover:shadow-xl transition-all duration-300 \n           hover:scale-[1.02] active:scale-[0.98];\n  }\n}\n","size_bytes":5117},"src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":161},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/components/AppSidebar.tsx":{"content":"import { Upload, BarChart3, Target, Users, Calendar, Phone, TrendingUp } from \"lucide-react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport cmlensLogo from \"@/assets/cmlens-eye-logo.webp\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nconst items = [\n  { title: \"Upload & Targets\", url: \"/upload\", icon: Upload },\n  { title: \"Agents Performance\", url: \"/performance\", icon: BarChart3 },\n  { title: \"Team Analytics\", url: \"/targets\", icon: Target },\n  { title: \"Target Analytics\", url: \"/analytics\", icon: TrendingUp },\n  { title: \"Weekly Meetings\", url: \"/meetings\", icon: Calendar },\n  { title: \"Calls\", url: \"/calls\", icon: Phone },\n];\n\nexport function AppSidebar() {\n  const { state } = useSidebar();\n  const location = useLocation();\n  const currentPath = location.pathname;\n\n  const isActive = (path: string) => currentPath === path;\n  const isCollapsed = state === \"collapsed\";\n\n  return (\n    <Sidebar \n      className=\"border-r border-sidebar-border group w-16 hover:w-64 transition-all duration-300 ease-in-out overflow-hidden\"\n      collapsible=\"icon\"\n    >\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <img src={cmlensLogo} alt=\"CMLens Logo\" className=\"h-8 w-8 flex-shrink-0\" />\n          <h2 className=\"text-xl font-bold bg-gradient-to-r from-sidebar-primary to-primary bg-clip-text text-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n            CMLens\n          </h2>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-300\">Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={isActive(item.url)}>\n                    <NavLink \n                      to={item.url} \n                      className=\"flex items-center space-x-2 w-full\"\n                     >\n                       <item.icon className=\"h-4 w-4 flex-shrink-0\" />\n                       <span className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-300\">{item.title}</span>\n                     </NavLink>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":2719},"src/components/Header.tsx":{"content":"import { useNavigate, useLocation } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogOut, Upload, BarChart3 } from \"lucide-react\";\nimport cmlensLogo from \"@/assets/cmlens-eye-logo.webp\";\nimport { toast } from \"@/hooks/use-toast\";\n\nconst Header = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"cmlens_session\");\n    localStorage.removeItem(\"cmlens_targets\");\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n    navigate(\"/login\");\n  };\n\n  const isUploadPage = location.pathname === \"/upload\";\n  const isPerformancePage = location.pathname === \"/performance\";\n\n  return (\n    <header className=\"bg-glass/80 backdrop-blur-xl border-b border-glass-border px-4 py-3\">\n      <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center space-x-2\">\n            <img src={cmlensLogo} alt=\"CMLens Logo\" className=\"h-8 w-8\" />\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-primary-hover bg-clip-text text-transparent\">\n              CMLens\n            </h1>\n          </div>\n          \n          <nav className=\"hidden md:flex items-center space-x-1\">\n            <Button\n              variant={isUploadPage ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => navigate(\"/upload\")}\n              className={isUploadPage ? \"btn-hero\" : \"\"}\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Upload & Targets\n            </Button>\n            <Button\n              variant={isPerformancePage ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => navigate(\"/performance\")}\n              className={isPerformancePage ? \"btn-hero\" : \"\"}\n            >\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\n              Performance\n            </Button>\n          </nav>\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleLogout}\n          className=\"text-muted-foreground hover:text-foreground\"\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":2378},"src/components/ReportIssueFooter.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport function ReportIssueFooter() {\n  const handleReportIssue = () => {\n    const whatsappLink = `https://wa.me/201016695914`;\n    window.open(whatsappLink, '_blank');\n  };\n\n  return (\n    <footer className=\"bg-card/50 backdrop-blur-sm border-t border-border mt-auto\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            ¬© 2024 CMLens. All rights reserved.\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"text-muted-foreground hover:text-foreground\"\n            onClick={handleReportIssue}\n          >\n            <AlertCircle className=\"h-4 w-4 mr-2\" />\n            Report an Issue\n          </Button>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":941},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n","size_bytes":576},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","size_bytes":3935},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":169},"src/pages/AgentsPerformance.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, TrendingUp, Users, Target, BarChart3 } from \"lucide-react\";\nimport Header from \"@/components/Header\";\nimport AgentDetailModal from \"@/components/AgentDetailModal\";\n\n// Import AgentData type\nimport { AgentData } from \"@/services/api\";\n\n// Load processed data from localStorage\nconst getAgentsData = (): AgentData[] => {\n  const storedData = localStorage.getItem('cmlens_processed_data');\n  \n  if (storedData) {\n    try {\n      const parsed = JSON.parse(storedData);\n      if (parsed.agents) {\n        // Handle both array and object formats\n        if (Array.isArray(parsed.agents)) {\n          return parsed.agents;\n        } else if (typeof parsed.agents === 'object') {\n          // Convert object to array\n          return Object.values(parsed.agents).map((agent: any) => ({\n            id: agent.agent_id,\n            name: agent.agent_id,\n            team: agent.team,\n            group: agent.group,\n            students: agent.students,\n            ccPct: agent.cc_pct,\n            scPct: agent.sc_pct,\n            upPct: agent.up_pct,\n            fixedPct: agent.fixed_pct,\n            referralLeads: agent.referral?.leads || 0,\n            referralShowups: agent.referral?.showups || 0,\n            referralPaid: agent.referral?.paid || 0,\n          }));\n        }\n      }\n    } catch (error) {\n      console.error('Error parsing stored data:', error);\n    }\n  }\n  \n  return [];\n};\n\nconst AgentsPerformance = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [teamFilter, setTeamFilter] = useState(\"all\");\n  const [groupFilter, setGroupFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"students\");\n  \n  // Individual target filters\n  const [fixedFilter, setFixedFilter] = useState(\"all\");\n  const [ccFilter, setCcFilter] = useState(\"all\");\n  const [scFilter, setScFilter] = useState(\"all\");\n  const [upFilter, setUpFilter] = useState(\"all\");\n  const [targetsAchievedFilter, setTargetsAchievedFilter] = useState(\"all\");\n  const [selectedAgent, setSelectedAgent] = useState<AgentData | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const openAgentDetail = (agent: AgentData) => {\n    setSelectedAgent(agent);\n    setIsModalOpen(true);\n  };\n\n  const closeAgentDetail = () => {\n    setIsModalOpen(false);\n    setSelectedAgent(null);\n  };\n  \n  // Get agents data (from processed data or mock)\n  const agentsData = useMemo(() => getAgentsData(), []);\n\n  // Get targets from localStorage\n  const targets = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_targets\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n  }, []);\n\n  // Get weights from localStorage\n  const weights = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_weights\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 25,\n      superClassConsumption: 25,\n      upgradeRate: 25,\n      fixedRate: 25,\n    };\n  }, []);\n\n  // Helper function to get status vs target\n  const getStatus = (value: number | null, target: number) => {\n    if (value === null) return \"na\";\n    if (value >= target) return \"above\";\n    if (value >= target * 0.9) return \"warning\";\n    return \"below\";\n  };\n\n  // Function to count targets achieved by an agent\n  const countTargetsAchieved = (agent: AgentData) => {\n    let achieved = 0;\n    if (getStatus(agent.fixedPct, targets.fixedRate) === \"above\") achieved++;\n    if (getStatus(agent.ccPct, targets.classConsumption) === \"above\") achieved++;\n    if (getStatus(agent.scPct, targets.superClassConsumption) === \"above\") achieved++;\n    if (getStatus(agent.upPct, targets.upgradeRate) === \"above\") achieved++;\n    return achieved;\n  };\n\n  // Calculate weighted score for ranking (consistent with TeamAnalytics)\n  const calculateScore = (agent: AgentData) => {\n    let weightedScore = 0;\n    let totalAvailableWeight = 0;\n\n    if (agent.fixedPct !== null) {\n      weightedScore += ((agent.fixedPct / targets.fixedRate) * 100) * (weights.fixedRate / 100);\n      totalAvailableWeight += weights.fixedRate;\n    }\n    if (agent.ccPct !== null) {\n      weightedScore += ((agent.ccPct / targets.classConsumption) * 100) * (weights.classConsumption / 100);\n      totalAvailableWeight += weights.classConsumption;\n    }\n    if (agent.scPct !== null) {\n      weightedScore += ((agent.scPct / targets.superClassConsumption) * 100) * (weights.superClassConsumption / 100);\n      totalAvailableWeight += weights.superClassConsumption;\n    }\n    if (agent.upPct !== null) {\n      weightedScore += ((agent.upPct / targets.upgradeRate) * 100) * (weights.upgradeRate / 100);\n      totalAvailableWeight += weights.upgradeRate;\n    }\n    \n    // Normalize to available weight percentage\n    return totalAvailableWeight > 0 ? (weightedScore / (totalAvailableWeight / 100)) : 0;\n  };\n\n  // Function to get agent rank within filtered set\n  const getAgentRank = (agentId: string, filteredAgents: AgentData[]) => {\n    const agentsWithScores = filteredAgents.map(agent => ({\n      ...agent,\n      weightedScore: calculateScore(agent)\n    }));\n    \n    // Sort by weighted score (descending) then assign ranks\n    const sortedByScore = [...agentsWithScores].sort((a, b) => b.weightedScore - a.weightedScore);\n    \n    const rankIndex = sortedByScore.findIndex(a => a.id === agentId);\n    return rankIndex >= 0 ? rankIndex + 1 : 0;\n  };\n\n  // Filter and sort agents\n  const filteredAgents = useMemo(() => {\n    let filtered = agentsData.filter(agent => {\n      const matchesSearch = \n        agent.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        agent.team.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        agent.group.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesTeam = teamFilter === \"all\" || agent.team.includes(teamFilter);\n      const matchesGroup = groupFilter === \"all\" || agent.group.includes(groupFilter);\n      \n      let matchesStatus = true;\n      if (statusFilter !== \"all\") {\n        const fixedStatus = getStatus(agent.fixedPct, targets.fixedRate);\n        const ccStatus = getStatus(agent.ccPct, targets.classConsumption);\n        const scStatus = getStatus(agent.scPct, targets.superClassConsumption);\n        const upStatus = getStatus(agent.upPct, targets.upgradeRate);\n        \n        const hasAbove = [fixedStatus, ccStatus, scStatus, upStatus].includes(\"above\");\n        const hasBelow = [fixedStatus, ccStatus, scStatus, upStatus].includes(\"below\");\n        const hasWarning = [fixedStatus, ccStatus, scStatus, upStatus].includes(\"warning\");\n        \n        if (statusFilter === \"above\" && !hasAbove) matchesStatus = false;\n        if (statusFilter === \"below\" && !hasBelow) matchesStatus = false;\n        if (statusFilter === \"warning\" && !hasWarning) matchesStatus = false;\n      }\n\n      // Individual target filters\n      let matchesTargetFilters = true;\n      \n      // Fixed Rate filter\n      if (fixedFilter !== \"all\") {\n        const fixedStatus = getStatus(agent.fixedPct, targets.fixedRate);\n        if (fixedFilter !== fixedStatus) matchesTargetFilters = false;\n      }\n      \n      // Class Consumption filter\n      if (ccFilter !== \"all\") {\n        const ccStatus = getStatus(agent.ccPct, targets.classConsumption);\n        if (ccFilter !== ccStatus) matchesTargetFilters = false;\n      }\n      \n      // Super Class filter\n      if (scFilter !== \"all\") {\n        const scStatus = getStatus(agent.scPct, targets.superClassConsumption);\n        if (scFilter !== scStatus) matchesTargetFilters = false;\n      }\n      \n      // Upgrade Rate filter\n      if (upFilter !== \"all\") {\n        const upStatus = getStatus(agent.upPct, targets.upgradeRate);\n        if (upFilter !== upStatus) matchesTargetFilters = false;\n      }\n      \n      // Targets Achieved filter\n      if (targetsAchievedFilter !== \"all\") {\n        const achieved = countTargetsAchieved(agent);\n        if (targetsAchievedFilter === \"0\" && achieved !== 0) matchesTargetFilters = false;\n        if (targetsAchievedFilter === \"1\" && achieved !== 1) matchesTargetFilters = false;\n        if (targetsAchievedFilter === \"2\" && achieved !== 2) matchesTargetFilters = false;\n        if (targetsAchievedFilter === \"3\" && achieved !== 3) matchesTargetFilters = false;\n        if (targetsAchievedFilter === \"4\" && achieved !== 4) matchesTargetFilters = false;\n        if (targetsAchievedFilter === \"3+\" && achieved < 3) matchesTargetFilters = false;\n      }\n      \n      return matchesSearch && matchesTeam && matchesGroup && matchesStatus && matchesTargetFilters;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case \"students\":\n          return b.students - a.students;\n        case \"ccPct\":\n          return (b.ccPct || 0) - (a.ccPct || 0);\n        case \"scPct\":\n          return (b.scPct || 0) - (a.scPct || 0);\n        case \"fixedPct\":\n          return (b.fixedPct || 0) - (a.fixedPct || 0);\n        case \"upPct\":\n          return (b.upPct || 0) - (a.upPct || 0);\n        case \"targetsAchieved\":\n          return countTargetsAchieved(b) - countTargetsAchieved(a);\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [searchTerm, teamFilter, groupFilter, statusFilter, sortBy, targets, agentsData, fixedFilter, ccFilter, scFilter, upFilter, targetsAchievedFilter]);\n\n  // Calculate summary stats\n  const summaryStats = useMemo(() => {\n    const validCC = filteredAgents.filter(a => a.ccPct !== null);\n    const validSC = filteredAgents.filter(a => a.scPct !== null);\n    const validFixed = filteredAgents.filter(a => a.fixedPct !== null);\n    const validUP = filteredAgents.filter(a => a.upPct !== null);\n    \n    return {\n      avgCC: validCC.length ? validCC.reduce((sum, a) => sum + a.ccPct!, 0) / validCC.length : 0,\n      avgSC: validSC.length ? validSC.reduce((sum, a) => sum + a.scPct!, 0) / validSC.length : 0,\n      avgFixed: validFixed.length ? validFixed.reduce((sum, a) => sum + a.fixedPct!, 0) / validFixed.length : 0,\n      avgUP: validUP.length ? validUP.reduce((sum, a) => sum + a.upPct!, 0) / validUP.length : 0,\n    };\n  }, [filteredAgents]);\n\n  // Get unique teams and groups for filters (filter out empty strings)\n  const teams = Array.from(new Set(agentsData.map(a => a.team).filter(team => team && team.trim() !== \"\")));\n  const groups = Array.from(new Set(agentsData.map(a => a.group).filter(group => group && group.trim() !== \"\")));\n\n  const getStatusColor = (value: number | null, target: number) => {\n    const status = getStatus(value, target);\n    switch (status) {\n      case \"above\": return \"status-success\";\n      case \"warning\": return \"status-warning\";\n      case \"below\": return \"status-danger\";\n      default: return \"status-neutral\";\n    }\n  };\n\n  const formatPercent = (value: number | null) => {\n    return value !== null ? `${value.toFixed(1)}%` : \"N/A\";\n  };\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-primary-hover bg-clip-text text-transparent\">\n          Agents Performance\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Track and analyze agent performance metrics with real-time insights\n        </p>\n      </div>\n\n          {/* Filters */}\n          <Card className=\"glass-card p-6\">\n            <div className=\"space-y-4\">\n              {/* Primary Filters */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n                <div className=\"lg:col-span-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search agents...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 glass-card\"\n                    />\n                  </div>\n                </div>\n                \n                <Select value={teamFilter} onValueChange={setTeamFilter}>\n                  <SelectTrigger className=\"glass-card\">\n                    <SelectValue placeholder=\"Team\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Teams</SelectItem>\n                    {teams.map(team => (\n                      <SelectItem key={team} value={team}>{team}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={groupFilter} onValueChange={setGroupFilter}>\n                  <SelectTrigger className=\"glass-card\">\n                    <SelectValue placeholder=\"Group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Groups</SelectItem>\n                    {groups.map(group => (\n                      <SelectItem key={group} value={group}>{group}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"glass-card\">\n                    <SelectValue placeholder=\"Overall Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"above\">Above Target</SelectItem>\n                    <SelectItem value=\"warning\">On Target</SelectItem>\n                    <SelectItem value=\"below\">Below Target</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"glass-card\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"targetsAchieved\">Targets Achieved</SelectItem>\n                    <SelectItem value=\"students\">Students Count</SelectItem>\n                    <SelectItem value=\"fixedPct\">Fixed Rate %</SelectItem>\n                    <SelectItem value=\"ccPct\">Class Consumption %</SelectItem>\n                    <SelectItem value=\"scPct\">Super Class %</SelectItem>\n                    <SelectItem value=\"upPct\">Upgrade Rate %</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Target-Specific Filters */}\n              <div className=\"border-t pt-4\">\n                <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Target-Specific Filters</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                  <Select value={fixedFilter} onValueChange={setFixedFilter}>\n                    <SelectTrigger className=\"glass-card\">\n                      <SelectValue placeholder=\"Fixed Rate\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Fixed</SelectItem>\n                      <SelectItem value=\"above\">Above Target</SelectItem>\n                      <SelectItem value=\"warning\">Near Target</SelectItem>\n                      <SelectItem value=\"below\">Below Target</SelectItem>\n                      <SelectItem value=\"na\">No Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={ccFilter} onValueChange={setCcFilter}>\n                    <SelectTrigger className=\"glass-card\">\n                      <SelectValue placeholder=\"Class Consumption\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All CC</SelectItem>\n                      <SelectItem value=\"above\">Above Target</SelectItem>\n                      <SelectItem value=\"warning\">Near Target</SelectItem>\n                      <SelectItem value=\"below\">Below Target</SelectItem>\n                      <SelectItem value=\"na\">No Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={scFilter} onValueChange={setScFilter}>\n                    <SelectTrigger className=\"glass-card\">\n                      <SelectValue placeholder=\"Super Class\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All SC</SelectItem>\n                      <SelectItem value=\"above\">Above Target</SelectItem>\n                      <SelectItem value=\"warning\">Near Target</SelectItem>\n                      <SelectItem value=\"below\">Below Target</SelectItem>\n                      <SelectItem value=\"na\">No Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={upFilter} onValueChange={setUpFilter}>\n                    <SelectTrigger className=\"glass-card\">\n                      <SelectValue placeholder=\"Upgrade Rate\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All UP</SelectItem>\n                      <SelectItem value=\"above\">Above Target</SelectItem>\n                      <SelectItem value=\"warning\">Near Target</SelectItem>\n                      <SelectItem value=\"below\">Below Target</SelectItem>\n                      <SelectItem value=\"na\">No Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={targetsAchievedFilter} onValueChange={setTargetsAchievedFilter}>\n                    <SelectTrigger className=\"glass-card\">\n                      <SelectValue placeholder=\"Targets Achieved\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Counts</SelectItem>\n                      <SelectItem value=\"4\">4 Targets</SelectItem>\n                      <SelectItem value=\"3\">3 Targets</SelectItem>\n                      <SelectItem value=\"3+\">3+ Targets</SelectItem>\n                      <SelectItem value=\"2\">2 Targets</SelectItem>\n                      <SelectItem value=\"1\">1 Target</SelectItem>\n                      <SelectItem value=\"0\">0 Targets</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setSearchTerm(\"\");\n                      setTeamFilter(\"all\");\n                      setGroupFilter(\"all\");\n                      setStatusFilter(\"all\");\n                      setFixedFilter(\"all\");\n                      setCcFilter(\"all\");\n                      setScFilter(\"all\");\n                      setUpFilter(\"all\");\n                      setTargetsAchievedFilter(\"all\");\n                    }}\n                    className=\"glass-card\"\n                  >\n                    Clear All\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card className=\"glass-card p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <BarChart3 className=\"h-6 w-6 text-success\" />\n              </div>\n              <div className=\"text-2xl font-bold\">{summaryStats.avgCC.toFixed(1)}%</div>\n              <div className=\"text-sm text-muted-foreground\">Avg CC%</div>\n            </Card>\n\n            <Card className=\"glass-card p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <TrendingUp className=\"h-6 w-6 text-warning\" />\n              </div>\n              <div className=\"text-2xl font-bold\">{summaryStats.avgSC.toFixed(1)}%</div>\n              <div className=\"text-sm text-muted-foreground\">Avg SC%</div>\n            </Card>\n\n            <Card className=\"glass-card p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Target className=\"h-6 w-6 text-danger\" />\n              </div>\n              <div className=\"text-2xl font-bold\">{summaryStats.avgFixed.toFixed(1)}%</div>\n              <div className=\"text-sm text-muted-foreground\">Avg Fixed%</div>\n            </Card>\n\n            <Card className=\"glass-card p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Filter className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div className=\"text-2xl font-bold\">{summaryStats.avgUP.toFixed(1)}%</div>\n              <div className=\"text-sm text-muted-foreground\">Avg UP%</div>\n            </Card>\n          </div>\n\n          {/* Agents Grid */}\n          {filteredAgents.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredAgents.map((agent) => (\n                <div key={agent.id} className=\"bg-card/50 backdrop-blur-sm border border-border rounded-xl p-6 space-y-4 hover:bg-card/70 transition-all duration-300\">\n                  {/* Header */}\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <h3 \n                        className=\"text-xl font-bold text-foreground mb-1 cursor-pointer hover:text-primary transition-colors\"\n                        onClick={() => openAgentDetail(agent)}\n                        title=\"Click to view detailed performance breakdown\"\n                      >\n                        {agent.id}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {agent.team} ‚Ä¢ {agent.group}\n                      </p>\n                    </div>\n                    <div className=\"text-right space-y-1\">\n                      <div className=\"text-lg font-bold text-muted-foreground\">\n                        Rank #{getAgentRank(agent.id, filteredAgents)}\n                      </div>\n                      <div className=\"text-2xl font-bold text-primary\">\n                        {countTargetsAchieved(agent)}/4\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Targets\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Performance Metrics */}\n                  <div className=\"grid grid-cols-2 gap-3 mb-6\">\n                    <div className={`px-4 py-2 rounded-full text-sm font-semibold text-center ${\n                      getStatus(agent.fixedPct, targets.fixedRate) === 'above' ? 'bg-success text-success-foreground' :\n                      getStatus(agent.fixedPct, targets.fixedRate) === 'warning' ? 'bg-warning text-warning-foreground' :\n                      getStatus(agent.fixedPct, targets.fixedRate) === 'below' ? 'bg-destructive text-destructive-foreground' :\n                      'bg-muted text-muted-foreground'\n                    }`}>\n                      Fixed: {formatPercent(agent.fixedPct)}\n                    </div>\n                    <div className={`px-4 py-2 rounded-full text-sm font-semibold text-center ${\n                      getStatus(agent.ccPct, targets.classConsumption) === 'above' ? 'bg-success text-success-foreground' :\n                      getStatus(agent.ccPct, targets.classConsumption) === 'warning' ? 'bg-warning text-warning-foreground' :\n                      getStatus(agent.ccPct, targets.classConsumption) === 'below' ? 'bg-destructive text-destructive-foreground' :\n                      'bg-muted text-muted-foreground'\n                    }`}>\n                      CC: {formatPercent(agent.ccPct)}\n                    </div>\n                    <div className={`px-4 py-2 rounded-full text-sm font-semibold text-center ${\n                      getStatus(agent.scPct, targets.superClassConsumption) === 'above' ? 'bg-success text-success-foreground' :\n                      getStatus(agent.scPct, targets.superClassConsumption) === 'warning' ? 'bg-warning text-warning-foreground' :\n                      getStatus(agent.scPct, targets.superClassConsumption) === 'below' ? 'bg-destructive text-destructive-foreground' :\n                      'bg-muted text-muted-foreground'\n                    }`}>\n                      SC: {formatPercent(agent.scPct)}\n                    </div>\n                    <div className={`px-4 py-2 rounded-full text-sm font-semibold text-center ${\n                      getStatus(agent.upPct, targets.upgradeRate) === 'above' ? 'bg-success text-success-foreground' :\n                      getStatus(agent.upPct, targets.upgradeRate) === 'warning' ? 'bg-warning text-warning-foreground' :\n                      getStatus(agent.upPct, targets.upgradeRate) === 'below' ? 'bg-destructive text-destructive-foreground' :\n                      'bg-muted text-muted-foreground'\n                    }`}>\n                      UP: {formatPercent(agent.upPct)}\n                    </div>\n                  </div>\n\n                  {/* Referral Performance */}\n                  <div className=\"border-t border-border pt-4\">\n                    <div className=\"text-sm font-medium text-muted-foreground mb-3 text-center\">\n                      Referral Performance\n                    </div>\n                    <div className=\"flex justify-around text-center\">\n                      <div>\n                        <div className=\"text-2xl font-bold text-foreground\">{agent.referralLeads}</div>\n                        <div className=\"text-xs text-muted-foreground\">Leads</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-foreground\">{agent.referralShowups}</div>\n                        <div className=\"text-xs text-muted-foreground\">Showups</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-foreground\">{agent.referralPaid}</div>\n                        <div className=\"text-xs text-muted-foreground\">Paid</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"glass-card p-12 text-center\">\n              <div className=\"space-y-4\">\n                <Filter className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n                <h3 className=\"text-xl font-semibold\">No agents found</h3>\n                <p className=\"text-muted-foreground max-w-md mx-auto\">\n                  Try adjusting your filters or search terms to find agents\n                </p>\n                <Button \n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setTeamFilter(\"all\");\n                    setGroupFilter(\"all\");\n                    setStatusFilter(\"all\");\n                  }}\n                  variant=\"outline\"\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            </Card>\n          )}\n\n      {/* Agent Detail Modal */}\n      <AgentDetailModal \n        isOpen={isModalOpen}\n        onClose={closeAgentDetail}\n        agent={selectedAgent}\n      />\n    </div>\n  );\n};\n\nexport default AgentsPerformance;","size_bytes":27933},"src/pages/Index.tsx":{"content":"// Update this page (the content is just a fallback if you fail to update the page)\n\nconst Index = () => {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"mb-4 text-4xl font-bold\">Welcome to Your Blank App</h1>\n        <p className=\"text-xl text-muted-foreground\">Start building your amazing project here!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":469},"src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { toast } from \"@/hooks/use-toast\";\nimport heroImage from \"@/assets/dashboard-hero.jpg\";\nimport cmlensLogo from \"@/assets/cmlens-eye-logo.webp\";\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Simulate login process\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (username === \"admin\" && password === \"admin\") {\n      localStorage.setItem(\"cmlens_session\", \"authenticated\");\n      toast({\n        title: \"Welcome to CMLens\",\n        description: \"Successfully logged in\"\n      });\n      navigate(\"/upload\");\n    } else {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid credentials. Use admin/admin\",\n        variant: \"destructive\"\n      });\n    }\n    setIsLoading(false);\n  };\n  return <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid lg:grid-cols-2 gap-8 items-center\">\n        {/* Hero Section */}\n        <div className=\"hidden lg:block\">\n          <div className=\"glass-card p-8\">\n            <img src={heroImage} alt=\"CMLens Dashboard Preview\" className=\"w-full h-96 object-cover rounded-xl\" />\n            <div className=\"mt-6 space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <img src={cmlensLogo} alt=\"CMLens Logo\" className=\"h-12 w-12\" />\n                <h1 className=\"text-4xl font-bold bg-gradient-to-r from-primary to-primary-hover bg-clip-text text-transparent\">\n                  CMLens\n                </h1>\n              </div>\n              <p className=\"text-lg text-muted-foreground\">Clear, actionable views of agent performance‚Äîat a glance.</p>\n              <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                  <span>Upload your data‚Äîget instant performance clarity.</span>\n                </div>\n                \n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Login Form */}\n        <div className=\"w-full max-w-md mx-auto\">\n          <Card className=\"glass-card p-8\">\n            <div className=\"space-y-6\">\n              <div className=\"text-center space-y-2\">\n                <h2 className=\"text-3xl font-bold\">Welcome Back</h2>\n                <p className=\"text-muted-foreground\">\n                  Sign in to access your dashboard\n                </p>\n              </div>\n\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input id=\"username\" type=\"text\" placeholder=\"Enter username\" value={username} onChange={e => setUsername(e.target.value)} required className=\"glass-card\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input id=\"password\" type=\"password\" placeholder=\"Enter password\" value={password} onChange={e => setPassword(e.target.value)} required className=\"glass-card\" />\n                </div>\n\n                <Button type=\"submit\" className=\"w-full btn-hero\" disabled={isLoading}>\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n\n              <div className=\"text-center text-sm text-muted-foreground\">\n                Demo credentials: <strong>admin / admin</strong>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>;\n};\nexport default Login;","size_bytes":4167},"src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\"404 Error: User attempted to access non-existent route:\", location.pathname);\n  }, [location.pathname]);\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"mb-4 text-4xl font-bold\">404</h1>\n        <p className=\"mb-4 text-xl text-gray-600\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 underline hover:text-blue-700\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":721},"src/pages/UploadTargets.tsx":{"content":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Upload, X, CheckCircle } from \"lucide-react\";\n\ninterface UploadedFile {\n  name: string;\n  size: number;\n  type: string;\n  file: File;\n}\n\ninterface Targets {\n  classConsumption: number;\n  superClassConsumption: number;\n  upgradeRate: number;\n  fixedRate: number;\n}\n\ninterface Weights {\n  classConsumption: number;\n  superClassConsumption: number;\n  upgradeRate: number;\n  fixedRate: number;\n}\n\nconst UploadTargets = () => {\n  const navigate = useNavigate();\n  const [files, setFiles] = useState<Record<string, UploadedFile | null>>({\n    classConsumption: null,\n    fixed: null,\n    referral: null,\n    upgrade: null,\n  });\n  \n  const [targets, setTargets] = useState<Targets>(() => {\n    const saved = localStorage.getItem(\"cmlens_targets\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n  });\n\n  const [weights, setWeights] = useState<Weights>(() => {\n    const saved = localStorage.getItem(\"cmlens_weights\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 25,\n      superClassConsumption: 25,\n      upgradeRate: 25,\n      fixedRate: 25,\n    };\n  });\n\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const fileLabels = {\n    classConsumption: \"Class Consumption Report\",\n    fixed: \"Fixed Report\", \n    referral: \"Referral Report\",\n    upgrade: \"Upgrade Report\",\n  };\n\n  const handleFileUpload = (key: string, file: File) => {\n    if (!file.name.match(/\\.(xlsx|xls)$/i)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload XLSX or XLS files only\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 200 * 1024 * 1024) { // 200MB\n      toast({\n        title: \"File too large\",\n        description: \"File size must be under 200MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setFiles(prev => ({\n      ...prev,\n      [key]: {\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        file: file,\n      }\n    }));\n  };\n\n  const handleFileDrop = (key: string, e: React.DragEvent) => {\n    e.preventDefault();\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      handleFileUpload(key, file);\n    }\n  };\n\n  const removeFile = (key: string) => {\n    setFiles(prev => ({\n      ...prev,\n      [key]: null,\n    }));\n  };\n\n  const saveTargets = () => {\n    localStorage.setItem(\"cmlens_targets\", JSON.stringify(targets));\n    localStorage.setItem(\"cmlens_weights\", JSON.stringify(weights));\n    toast({\n      title: \"Configuration saved\",\n      description: \"Performance targets and weights have been saved successfully\",\n    });\n  };\n\n  const resetTargets = () => {\n    const defaultTargets = {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n    const defaultWeights = {\n      classConsumption: 25,\n      superClassConsumption: 25,\n      upgradeRate: 25,\n      fixedRate: 25,\n    };\n    setTargets(defaultTargets);\n    setWeights(defaultWeights);\n    localStorage.setItem(\"cmlens_targets\", JSON.stringify(defaultTargets));\n    localStorage.setItem(\"cmlens_weights\", JSON.stringify(defaultWeights));\n    toast({\n      title: \"Configuration reset\",\n      description: \"Performance targets and weights have been reset to defaults\",\n    });\n  };\n\n  const canProcess = Object.values(files).some(file => file !== null);\n\n  const processData = async () => {\n    setIsProcessing(true);\n    \n    try {\n      // Collect uploaded files from state\n      const filesToUpload: Record<string, File> = {};\n      \n      Object.entries(files).forEach(([key, fileInfo]) => {\n        if (fileInfo && fileInfo.file) {\n          filesToUpload[key] = fileInfo.file;\n        }\n      });\n\n      if (Object.keys(filesToUpload).length === 0) {\n        throw new Error('No files selected for processing');\n      }\n\n      // Import and use the API service\n      const { ApiService } = await import('@/services/api');\n      \n      const response = await ApiService.processAgentData(filesToUpload);\n      \n      if (response && response.agents) {\n        // Store processed data in localStorage for the performance page\n        localStorage.setItem('cmlens_processed_data', JSON.stringify(response));\n        \n        toast({\n          title: \"Data processed successfully\",\n          description: `Processed ${response.agents.length} agents successfully`,\n        });\n        \n        navigate(\"/performance\");\n      } else {\n        throw new Error('Processing failed - no agent data received');\n      }\n      \n    } catch (error) {\n      console.error('Processing error:', error);\n      toast({\n        title: \"Processing failed\",\n        description: error instanceof Error ? error.message : \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-primary-hover bg-clip-text text-transparent\">\n          Upload & Set Targets\n        </h1>\n        <p className=\"text-muted-foreground max-w-2xl\">\n          Upload at least one performance report and set target percentages for agent evaluation\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* File Upload Section */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-semibold\">Report Files</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Upload at least one report to process agent performance data\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {Object.entries(fileLabels).map(([key, label]) => (\n              <Card key={key} className=\"glass-card p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-medium\">{label}</h3>\n                    {files[key] && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(key)}\n                        className=\"h-6 w-6 p-0 text-danger hover:text-danger\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  {!files[key] ? (\n                    <div\n                      className=\"border border-dashed border-border bg-muted/20 rounded-lg p-4 text-center hover:border-primary/50 hover:bg-muted/30 transition-all duration-200 cursor-pointer\"\n                      onDrop={(e) => handleFileDrop(key, e)}\n                      onDragOver={(e) => e.preventDefault()}\n                      onClick={() => {\n                        const input = document.createElement('input');\n                        input.type = 'file';\n                        input.accept = '.xlsx,.xls';\n                        input.setAttribute('data-key', key);\n                        input.style.display = 'none';\n                        document.body.appendChild(input);\n                        input.onchange = (e) => {\n                          const file = (e.target as HTMLInputElement).files?.[0];\n                          if (file) handleFileUpload(key, file);\n                          document.body.removeChild(input);\n                        };\n                        input.click();\n                      }}\n                    >\n                      <Upload className=\"h-6 w-6 text-muted-foreground mx-auto mb-1\" />\n                        <p className=\"text-xs font-medium\">Drop or click</p>\n                        <p className=\"text-xs text-muted-foreground\">XLSX/XLS</p>\n                    </div>\n                  ) : (\n                    <div className=\"bg-success/10 border border-success/20 rounded-lg p-3\">\n                      <div className=\"flex items-start space-x-2\">\n                        <CheckCircle className=\"h-4 w-4 text-success mt-0.5 flex-shrink-0\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-xs font-medium text-success truncate\">\n                            {files[key]!.name}\n                          </p>\n                          <p className=\"text-xs text-success/80\">\n                            {formatFileSize(files[key]!.size)}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Targets Section */}\n        <div className=\"space-y-6\">\n          <Card className=\"glass-card p-6\">\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-xl font-semibold mb-2\">Performance Targets</h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Set target percentages for agent performance evaluation\n                </p>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Class Consumption</Label>\n                    <span className=\"text-sm font-medium text-primary\">{targets.classConsumption}%</span>\n                  </div>\n                  <Slider\n                    value={[targets.classConsumption]}\n                    onValueChange={(value) => setTargets(prev => ({\n                      ...prev,\n                      classConsumption: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Super Class Consumption</Label>\n                    <span className=\"text-sm font-medium text-primary\">{targets.superClassConsumption}%</span>\n                  </div>\n                  <Slider\n                    value={[targets.superClassConsumption]}\n                    onValueChange={(value) => setTargets(prev => ({\n                      ...prev,\n                      superClassConsumption: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Upgrade Rate</Label>\n                    <span className=\"text-sm font-medium text-primary\">{targets.upgradeRate}%</span>\n                  </div>\n                  <Slider\n                    value={[targets.upgradeRate]}\n                    onValueChange={(value) => setTargets(prev => ({\n                      ...prev,\n                      upgradeRate: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Fixed Rate</Label>\n                    <span className=\"text-sm font-medium text-primary\">{targets.fixedRate}%</span>\n                  </div>\n                  <Slider\n                    value={[targets.fixedRate]}\n                    onValueChange={(value) => setTargets(prev => ({\n                      ...prev,\n                      fixedRate: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Weights Section */}\n          <Card className=\"glass-card p-6\">\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-xl font-semibold mb-2\">Performance Weights</h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Set the importance (weight) of each metric in the overall score calculation. Total should equal 100%.\n                </p>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Class Consumption Weight</Label>\n                    <span className=\"text-sm font-medium text-primary\">{weights.classConsumption}%</span>\n                  </div>\n                  <Slider\n                    value={[weights.classConsumption]}\n                    onValueChange={(value) => setWeights(prev => ({\n                      ...prev,\n                      classConsumption: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Super Class Consumption Weight</Label>\n                    <span className=\"text-sm font-medium text-primary\">{weights.superClassConsumption}%</span>\n                  </div>\n                  <Slider\n                    value={[weights.superClassConsumption]}\n                    onValueChange={(value) => setWeights(prev => ({\n                      ...prev,\n                      superClassConsumption: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Upgrade Rate Weight</Label>\n                    <span className=\"text-sm font-medium text-primary\">{weights.upgradeRate}%</span>\n                  </div>\n                  <Slider\n                    value={[weights.upgradeRate]}\n                    onValueChange={(value) => setWeights(prev => ({\n                      ...prev,\n                      upgradeRate: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Fixed Rate Weight</Label>\n                    <span className=\"text-sm font-medium text-primary\">{weights.fixedRate}%</span>\n                  </div>\n                  <Slider\n                    value={[weights.fixedRate]}\n                    onValueChange={(value) => setWeights(prev => ({\n                      ...prev,\n                      fixedRate: value[0]\n                    }))}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"font-medium\">Total Weight:</span>\n                    <span className={`font-bold ${\n                      (weights.classConsumption + weights.superClassConsumption + weights.upgradeRate + weights.fixedRate) === 100 \n                        ? 'text-green-600' \n                        : 'text-orange-600'\n                    }`}>\n                      {weights.classConsumption + weights.superClassConsumption + weights.upgradeRate + weights.fixedRate}%\n                    </span>\n                  </div>\n                  {(weights.classConsumption + weights.superClassConsumption + weights.upgradeRate + weights.fixedRate) !== 100 && (\n                    <p className=\"text-xs text-orange-600 mt-1\">\n                      ‚ö†Ô∏è Weights should total 100% for accurate scoring\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button onClick={saveTargets} variant=\"outline\" className=\"flex-1\">\n                  Save Configuration\n                </Button>\n                <Button onClick={resetTargets} variant=\"ghost\" className=\"flex-1\">\n                  Reset All\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Process Button */}\n          <Button\n            onClick={processData}\n            disabled={!canProcess || isProcessing}\n            className=\"w-full btn-hero py-4 text-lg\"\n          >\n            {isProcessing ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                <span>Processing Data...</span>\n              </div>\n            ) : (\n              `Process Data (${Object.values(files).filter(f => f).length}/4 files)`\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadTargets;","size_bytes":18121},"src/services/api.ts":{"content":"// API service for CMLens backend integration\n\nconst API_BASE_URL = (() => {\n  const hostname = window.location.hostname;\n  const port = window.location.port;\n  const protocol = window.location.protocol;\n  \n  // In Replit development environment, backend runs on port 8080\n  // Check for both replit.dev and Replit environment characteristics\n  const isReplit = hostname.includes('replit.dev') || hostname.includes('janeway.replit.dev');\n  const isFrontendPort = port === '5000' || port === '';\n  \n  if (isReplit && isFrontendPort) {\n    // Use the same hostname but switch to port 8080 for backend\n    return `${protocol}//${hostname}:8080`;\n  }\n  \n  // In production deployment, frontend and backend are served from same origin\n  return window.location.origin;\n})();\n\nexport interface ProcessDataResponse {\n  agents: AgentData[];\n}\n\nexport interface AgentData {\n  id: string;\n  name: string;\n  team: string;\n  group: string;\n  students: number;\n  ccPct: number | null;\n  scPct: number | null;\n  upPct: number | null;\n  fixedPct: number | null;\n  referralLeads: number;\n  referralShowups: number;\n  referralPaid: number;\n}\n\nexport class ApiService {\n  static async healthCheck(): Promise<{ status: string; message: string }> {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    if (!response.ok) {\n      throw new Error('Backend is not available');\n    }\n    return response.json();\n  }\n\n  static async processAgentData(files: {\n    classConsumption?: File;\n    fixed?: File;\n    referral?: File;\n    upgrade?: File;\n  }): Promise<ProcessDataResponse> {\n    const formData = new FormData();\n    \n    // Add files to form data\nObject.entries(files).forEach(([key, file]) => {\n      if (file) {\n        const keyMap: Record<string, string> = {\n          classConsumption: 'cc_file',\n          upgrade: 'up_file',\n          referral: 're_file',\n          fixed: 'fixed_file',\n        };\n        const backendKey = keyMap[key] || key;\n        formData.append(backendKey, file);\n      }\n    });\n\n    const response = await fetch(`${API_BASE_URL}/process-agent-data`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    // Check if response is valid before parsing JSON\n    if (!response.ok) {\n      let errorMessage = 'Failed to process data';\n      try {\n        const result = await response.json();\n        errorMessage = result.error || errorMessage;\n      } catch (parseError) {\n        // If we can't parse the error response, use a generic message\n        errorMessage = `Server error (${response.status}): ${response.statusText}`;\n      }\n      throw new Error(errorMessage);\n    }\n\n    // Parse the successful response\n    try {\n      const result = await response.json();\n      return result;\n    } catch (parseError) {\n      throw new Error('Failed to parse server response - please try again');\n    }\n  }\n\n  static async getTestFormat(): Promise<ProcessDataResponse> {\n    const response = await fetch(`${API_BASE_URL}/test-format`);\n    if (!response.ok) {\n      throw new Error('Failed to get test format');\n    }\n    return response.json();\n  }\n}\n\n// Export the API_BASE_URL for direct use\nexport { API_BASE_URL };\n\nexport default ApiService;","size_bytes":3173},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn(\"border-b\", className)} {...props} />\n));\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n));\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n));\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n","size_bytes":1976},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)} {...props} />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props} />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className)}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n","size_bytes":4313},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive: \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div ref={ref} role=\"alert\" className={cn(alertVariants({ variant }), className)} {...props} />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h5 ref={ref} className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)} {...props} />\n  ),\n);\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"text-sm [&_p]:leading-relaxed\", className)} {...props} />\n  ),\n);\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n","size_bytes":1546},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\";\n\nconst AspectRatio = AspectRatioPrimitive.Root;\n\nexport { AspectRatio };\n","size_bytes":143},"src/components/ui/avatar.tsx":{"content":"import * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className)}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image ref={ref} className={cn(\"aspect-square h-full w-full\", className)} {...props} />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\"flex h-full w-full items-center justify-center rounded-full bg-muted\", className)}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1365},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n","size_bytes":1089},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode;\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />);\nBreadcrumb.displayName = \"Breadcrumb\";\n\nconst BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<\"ol\">>(\n  ({ className, ...props }, ref) => (\n    <ol\n      ref={ref}\n      className={cn(\n        \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nBreadcrumbList.displayName = \"BreadcrumbList\";\n\nconst BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<\"li\">>(\n  ({ className, ...props }, ref) => (\n    <li ref={ref} className={cn(\"inline-flex items-center gap-1.5\", className)} {...props} />\n  ),\n);\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean;\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return <Comp ref={ref} className={cn(\"transition-colors hover:text-foreground\", className)} {...props} />;\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\nconst BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<\"span\">>(\n  ({ className, ...props }, ref) => (\n    <span\n      ref={ref}\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"font-normal text-foreground\", className)}\n      {...props}\n    />\n  ),\n);\nBreadcrumbPage.displayName = \"BreadcrumbPage\";\n\nconst BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<\"li\">) => (\n  <li role=\"presentation\" aria-hidden=\"true\" className={cn(\"[&>svg]:size-3.5\", className)} {...props}>\n    {children ?? <ChevronRight />}\n  </li>\n);\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\nconst BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n);\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\";\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n};\n","size_bytes":2687},"src/components/ui/button.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1840},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell: \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(buttonVariants({ variant: \"ghost\" }), \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle: \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          if (orientation === \"left\") {\n            return <ChevronLeft className=\"h-4 w-4\" />;\n          }\n          return <ChevronRight className=\"h-4 w-4\" />;\n        },\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2627},"src/components/ui/card.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className)} {...props} />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n  ),\n);\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h3 ref={ref} className={cn(\"text-2xl font-semibold leading-none tracking-tight\", className)} {...props} />\n  ),\n);\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n  ),\n);\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />,\n);\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n  ),\n);\nCardFooter.displayName = \"CardFooter\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n","size_bytes":1785},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\";\nimport useEmblaCarousel, { type UseEmblaCarouselType } from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: \"horizontal\" | \"vertical\";\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>(\n  ({ orientation = \"horizontal\", opts, setApi, plugins, className, children, ...props }, ref) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins,\n    );\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return;\n      }\n\n      setCanScrollPrev(api.canScrollPrev());\n      setCanScrollNext(api.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext();\n    }, [api]);\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext],\n    );\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return;\n      }\n\n      setApi(api);\n    }, [api, setApi]);\n\n    React.useEffect(() => {\n      if (!api) {\n        return;\n      }\n\n      onSelect(api);\n      api.on(\"reInit\", onSelect);\n      api.on(\"select\", onSelect);\n\n      return () => {\n        api?.off(\"select\", onSelect);\n      };\n    }, [api, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\nCarousel.displayName = \"Carousel\";\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className)}\n          {...props}\n        />\n      </div>\n    );\n  },\n);\nCarouselContent.displayName = \"CarouselContent\";\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\"min-w-0 shrink-0 grow-0 basis-full\", orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\", className)}\n        {...props}\n      />\n    );\n  },\n);\nCarouselItem.displayName = \"CarouselItem\";\n\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          \"absolute h-8 w-8 rounded-full\",\n          orientation === \"horizontal\"\n            ? \"-left-12 top-1/2 -translate-y-1/2\"\n            : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n          className,\n        )}\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        {...props}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </Button>\n    );\n  },\n);\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        variant={variant}\n        size={size}\n        className={cn(\n          \"absolute h-8 w-8 rounded-full\",\n          orientation === \"horizontal\"\n            ? \"-right-12 top-1/2 -translate-y-1/2\"\n            : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n          className,\n        )}\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        {...props}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </Button>\n    );\n  },\n);\nCarouselNext.displayName = \"CarouselNext\";\n\nexport { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };\n","size_bytes":6249},"src/components/ui/chart.tsx":{"content":"import * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig;\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>[\"children\"];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = \"Chart\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: \"line\" | \"dot\" | \"dashed\";\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return <div className={cn(\"font-medium\", labelClassName)}>{labelFormatter(value, payload)}</div>;\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className,\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\",\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\", {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\": indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          })}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\",\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">{itemConfig?.label || item.name}</span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = \"ChartTooltip\";\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey }, ref) => {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex items-center justify-center gap-4\", verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\", className)}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\")}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\nChartLegendContent.displayName = \"ChartLegend\";\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload && typeof payload.payload === \"object\" && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === \"string\") {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };\n","size_bytes":9987},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };\n","size_bytes":1053},"src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\n\nconst Collapsible = CollapsiblePrimitive.Root;\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n","size_bytes":320},"src/components/ui/command.tsx":{"content":"import * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />);\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n","size_bytes":4821},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\";\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ContextMenu = ContextMenuPrimitive.Root;\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger;\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group;\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal;\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub;\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n));\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n));\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n));\nContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName;\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n));\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold text-foreground\", inset && \"pl-8\", className)}\n    {...props}\n  />\n));\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-border\", className)} {...props} />\n));\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;\n\nconst ContextMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nContextMenuShortcut.displayName = \"ContextMenuShortcut\";\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n};\n","size_bytes":7191},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-accent data-[state=open]:text-muted-foreground hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n","size_bytes":3761},"src/components/ui/drawer.tsx":{"content":"import * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Drawer = ({ shouldScaleBackground = true, ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n);\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = DrawerPrimitive.Trigger;\n\nconst DrawerPortal = DrawerPrimitive.Portal;\n\nconst DrawerClose = DrawerPrimitive.Close;\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay ref={ref} className={cn(\"fixed inset-0 z-50 bg-black/80\", className)} {...props} />\n));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n));\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)} {...props} />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};\n","size_bytes":2941},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent focus:bg-accent\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)} {...props} />;\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n","size_bytes":7260},"src/components/ui/form.tsx":{"content":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const id = React.useId();\n\n    return (\n      <FormItemContext.Provider value={{ id }}>\n        <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n      </FormItemContext.Provider>\n    );\n  },\n);\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return <Label ref={ref} className={cn(error && \"text-destructive\", className)} htmlFor={formItemId} {...props} />;\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(\n  ({ ...props }, ref) => {\n    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n    return (\n      <Slot\n        ref={ref}\n        id={formItemId}\n        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n        aria-invalid={!!error}\n        {...props}\n      />\n    );\n  },\n);\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => {\n    const { formDescriptionId } = useFormField();\n\n    return <p ref={ref} id={formDescriptionId} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />;\n  },\n);\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, children, ...props }, ref) => {\n    const { error, formMessageId } = useFormField();\n    const body = error ? String(error?.message) : children;\n\n    if (!body) {\n      return null;\n    }\n\n    return (\n      <p ref={ref} id={formMessageId} className={cn(\"text-sm font-medium text-destructive\", className)} {...props}>\n        {body}\n      </p>\n    );\n  },\n);\nFormMessage.displayName = \"FormMessage\";\n\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };\n","size_bytes":4014},"src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst HoverCard = HoverCardPrimitive.Root;\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger;\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName;\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n","size_bytes":1193},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\";\nimport { OTPInput, OTPInputContext } from \"input-otp\";\nimport { Dot } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst InputOTP = React.forwardRef<React.ElementRef<typeof OTPInput>, React.ComponentPropsWithoutRef<typeof OTPInput>>(\n  ({ className, containerClassName, ...props }, ref) => (\n    <OTPInput\n      ref={ref}\n      containerClassName={cn(\"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName)}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  ),\n);\nInputOTP.displayName = \"InputOTP\";\n\nconst InputOTPGroup = React.forwardRef<React.ElementRef<\"div\">, React.ComponentPropsWithoutRef<\"div\">>(\n  ({ className, ...props }, ref) => <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />,\n);\nInputOTPGroup.displayName = \"InputOTPGroup\";\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext);\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink h-4 w-px bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  );\n});\nInputOTPSlot.displayName = \"InputOTPSlot\";\n\nconst InputOTPSeparator = React.forwardRef<React.ElementRef<\"div\">, React.ComponentPropsWithoutRef<\"div\">>(\n  ({ ...props }, ref) => (\n    <div ref={ref} role=\"separator\" {...props}>\n      <Dot />\n    </div>\n  ),\n);\nInputOTPSeparator.displayName = \"InputOTPSeparator\";\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n","size_bytes":2166},"src/components/ui/input.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":799},"src/components/ui/label.tsx":{"content":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst labelVariants = cva(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\");\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n","size_bytes":696},"src/components/ui/menubar.tsx":{"content":"import * as React from \"react\";\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst MenubarMenu = MenubarPrimitive.Menu;\n\nconst MenubarGroup = MenubarPrimitive.Group;\n\nconst MenubarPortal = MenubarPrimitive.Portal;\n\nconst MenubarSub = MenubarPrimitive.Sub;\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup;\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\", className)}\n    {...props}\n  />\n));\nMenubar.displayName = MenubarPrimitive.Root.displayName;\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n));\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(({ className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props }, ref) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </MenubarPrimitive.Portal>\n));\nMenubarContent.displayName = MenubarPrimitive.Content.displayName;\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nMenubarItem.displayName = MenubarPrimitive.Item.displayName;\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n));\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n));\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props}\n  />\n));\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName;\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n));\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;\n\nconst MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nMenubarShortcut.displayname = \"MenubarShortcut\";\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n};\n","size_bytes":7863},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className)}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className)}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","size_bytes":5030},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\";\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n);\nPagination.displayName = \"Pagination\";\n\nconst PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\n  ({ className, ...props }, ref) => (\n    <ul ref={ref} className={cn(\"flex flex-row items-center gap-1\", className)} {...props} />\n  ),\n);\nPaginationContent.displayName = \"PaginationContent\";\n\nconst PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n));\nPaginationItem.displayName = \"PaginationItem\";\n\ntype PaginationLinkProps = {\n  isActive?: boolean;\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">;\n\nconst PaginationLink = ({ className, isActive, size = \"icon\", ...props }: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className,\n    )}\n    {...props}\n  />\n);\nPaginationLink.displayName = \"PaginationLink\";\n\nconst PaginationPrevious = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to previous page\" size=\"default\" className={cn(\"gap-1 pl-2.5\", className)} {...props}>\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n);\nPaginationPrevious.displayName = \"PaginationPrevious\";\n\nconst PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to next page\" size=\"default\" className={cn(\"gap-1 pr-2.5\", className)} {...props}>\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n);\nPaginationNext.displayName = \"PaginationNext\";\n\nconst PaginationEllipsis = ({ className, ...props }: React.ComponentProps<\"span\">) => (\n  <span aria-hidden className={cn(\"flex h-9 w-9 items-center justify-center\", className)} {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n);\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n};\n","size_bytes":2683},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent };\n","size_bytes":1239},"src/components/ui/progress.tsx":{"content":"import * as React from \"react\";\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\", className)}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n));\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\nexport { Progress };\n","size_bytes":765},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return <RadioGroupPrimitive.Root className={cn(\"grid gap-2\", className)} {...props} ref={ref} />;\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n});\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\n\nexport { RadioGroup, RadioGroupItem };\n","size_bytes":1447},"src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\", className)}\n    {...props}\n  />\n);\n\nconst ResizablePanel = ResizablePrimitive.Panel;\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean;\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className,\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n);\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n","size_bytes":1696},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root ref={ref} className={cn(\"relative overflow-hidden\", className)} {...props}>\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">{children}</ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" && \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" && \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n","size_bytes":1608},"src/components/ui/select.tsx":{"content":"import * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n","size_bytes":5575},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(({ className, orientation = \"horizontal\", decorative = true, ...props }, ref) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\"shrink-0 bg-border\", orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\", className)}\n    {...props}\n  />\n));\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n","size_bytes":698},"src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Sheet = SheetPrimitive.Root;\n\nconst SheetTrigger = SheetPrimitive.Trigger;\n\nconst SheetClose = SheetPrimitive.Close;\n\nconst SheetPortal = SheetPrimitive.Portal;\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  },\n);\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(\n  ({ side = \"right\", className, children, ...props }, ref) => (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>\n        {children}\n        <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-secondary hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  ),\n);\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)} {...props} />\n);\nSheetHeader.displayName = \"SheetHeader\";\n\nconst SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nSheetFooter.displayName = \"SheetFooter\";\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold text-foreground\", className)} {...props} />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetOverlay,\n  SheetPortal,\n  SheetTitle,\n  SheetTrigger,\n};\n","size_bytes":4197},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {\n  const isMobile = useIsMobile();\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    },\n    [setOpenProp, open],\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContext>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className)}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n});\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }, ref) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"group peer hidden text-sidebar-foreground md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n        )}\n      />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn(\"h-7 w-7\", className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\">>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex\",\n          \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n          \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n          \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n          \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n          \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<\"main\">>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"header\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"footer\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Separator\n        ref={ref}\n        data-sidebar=\"separator\"\n        className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"div\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-label\"\n        className={cn(\n          \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-action\"\n        className={cn(\n          \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          // Increases the hit area of the button on mobile.\n          \"after:absolute after:-inset-2 after:md:hidden\",\n          \"group-data-[collapsible=icon]:hidden\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} data-sidebar=\"group-content\" className={cn(\"w-full text-sm\", className)} {...props} />\n  ),\n);\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({ className, ...props }, ref) => (\n  <ul ref={ref} data-sidebar=\"menu\" className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)} {...props} />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\n  <li ref={ref} data-sidebar=\"menu-item\" className={cn(\"group/menu-item relative\", className)} {...props} />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\n    </Tooltip>\n  );\n});\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ ...props }, ref) => (\n  <li ref={ref} {...props} />\n));\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":22837},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn(\"animate-pulse rounded-md bg-muted\", className)} {...props} />;\n}\n\nexport { Skeleton };\n","size_bytes":234},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\";\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex w-full touch-none select-none items-center\", className)}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n));\nSlider.displayName = SliderPrimitive.Root.displayName;\n\nexport { Slider };\n","size_bytes":1065},"src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, toast } from \"sonner\";\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton: \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton: \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster, toast };\n","size_bytes":877},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n","size_bytes":1147},"src/components/ui/table.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props} />\n    </div>\n  ),\n);\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />,\n);\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props} />\n  ),\n);\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot ref={ref} className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)} {...props} />\n  ),\n);\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn(\"border-b transition-colors data-[state=selected]:bg-muted hover:bg-muted/50\", className)}\n      {...props}\n    />\n  ),\n);\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td ref={ref} className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)} {...props} />\n  ),\n);\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props} />\n  ),\n);\nTableCaption.displayName = \"TableCaption\";\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };\n","size_bytes":2694},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n","size_bytes":1897},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","size_bytes":751},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors group-[.destructive]:border-muted/40 hover:bg-secondary group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 group-[.destructive]:focus:ring-destructive disabled:pointer-events-none disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 hover:text-foreground group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title ref={ref} className={cn(\"text-sm font-semibold\", className)} {...props} />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n","size_bytes":4798},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\";\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && <ToastDescription>{description}</ToastDescription>}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n","size_bytes":730},"src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { toggleVariants } from \"@/components/ui/toggle\";\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: \"default\",\n  variant: \"default\",\n});\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root ref={ref} className={cn(\"flex items-center justify-center gap-1\", className)} {...props}>\n    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n));\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext);\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n});\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;\n\nexport { ToggleGroup, ToggleGroupItem };\n","size_bytes":1714},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","size_bytes":1416},"src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n","size_bytes":1155},"src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"replit.md":{"content":"# CMLens - Agent Performance Analytics Platform\n\n## Overview\n\nCMLens is a comprehensive enterprise-grade analytics platform designed to analyze agent performance across multiple KPIs. The application transforms raw performance data (Excel/CSV reports) into actionable business intelligence through automated scoring algorithms, data visualization, and AI-powered insights. The platform serves team leaders and managers who need crystal-clear views of agent performance for data-driven decision making, performance optimization, and individual coaching.\n\nThe system consists of a modern React frontend built with Vite and TypeScript, complemented by a Flask-based Python backend for data processing and ETL operations. The platform supports multiple report types including class consumption, fixed rates, referrals, and upgrade metrics, providing weighted scoring with intelligent re-normalization.\n\n## Current Status (September 21, 2025)\n\nThe project has been successfully imported and configured for the Replit environment:\n- Frontend React application running on port 5000 with Vite dev server (Frontend workflow)\n- Backend Flask API running on port 8080 for data processing (Backend workflow)\n- All dependencies installed and properly configured (Node.js, Python, React, Flask, etc.)\n- API service configured for Replit environment with automatic domain detection\n- Both frontend and backend running as managed workflows for consistent availability\n- File upload and ETL processing functionality fully operational\n- Deployment configuration set up for production use (autoscale)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and optimized builds\n- **UI System**: Radix UI primitives with shadcn/ui components for consistent, accessible interface\n- **Styling**: Tailwind CSS with custom design system featuring glass morphism effects and performance-based color coding\n- **Routing**: React Router DOM for client-side navigation with protected and public routes\n- **State Management**: Local state with React hooks, localStorage for session persistence and processed data caching\n- **Data Fetching**: React Query (@tanstack/react-query) for server state management and caching\n\n### Backend Architecture\n- **Framework**: Flask with CORS support for API endpoints\n- **Data Processing**: Pandas-based ETL pipeline with PyArrow optimization for Excel/CSV file processing\n- **File Handling**: Secure file upload with validation, temporary storage, and automatic cleanup\n- **Data Transformation**: Sophisticated column standardization and KPI calculation engine with weighted scoring algorithms\n\n### Authentication & Session Management\n- **Strategy**: Simple session-based authentication with localStorage persistence\n- **Implementation**: Protected routes with automatic redirection, session validation on app initialization\n- **Credentials**: Demo authentication (admin/admin) for development and testing\n\n### Data Flow & Processing\n- **Upload Pipeline**: Multi-file upload supporting class consumption, fixed, referral, and upgrade reports\n- **ETL Process**: Flexible column mapping, data standardization, missing value handling, and automated scoring\n- **Storage Strategy**: Client-side caching of processed data and user preferences in localStorage\n- **Performance Calculation**: Weighted KPI scoring with configurable targets and automatic re-normalization\n\n### Component Architecture\n- **Design System**: Comprehensive UI component library with consistent theming and accessibility\n- **Layout Strategy**: Responsive design with glass morphism effects, collapsible sidebar navigation\n- **Data Visualization**: Performance cards, progress indicators, and filterable agent tables\n- **Form Handling**: File upload with drag-and-drop, target configuration with sliders, real-time validation\n\n## External Dependencies\n\n### Core Frontend Libraries\n- **React Ecosystem**: react, react-dom, react-router-dom for core application functionality\n- **UI Components**: @radix-ui component primitives for accessible, unstyled UI building blocks\n- **Styling**: tailwindcss for utility-first styling, class-variance-authority for component variants\n- **Icons**: lucide-react for consistent iconography throughout the application\n- **Development**: vite, typescript, eslint for build tooling and code quality\n\n### Backend Dependencies\n- **Web Framework**: flask for HTTP server, flask-cors for cross-origin resource sharing\n- **Data Processing**: pandas for data manipulation, numpy for numerical operations\n- **File Processing**: openpyxl for Excel file reading and writing\n- **Production**: gunicorn as WSGI server for production deployment\n\n### Development & Build Tools\n- **Build System**: Vite with TypeScript compilation and hot module replacement\n- **Code Quality**: ESLint with TypeScript rules, React hooks linting\n- **Package Management**: npm with lock file for dependency consistency\n- **Deployment**: Railway-ready configuration with runtime specifications\n\n### Browser APIs & Standards\n- **File API**: For drag-and-drop file upload and client-side file handling\n- **Local Storage**: For session persistence and processed data caching\n- **Fetch API**: For HTTP requests to backend services and file uploads","size_bytes":5360},"attached_assets/TARGETS_MEETINGS_FEATURES_1758486581467.md":{"content":"# Targets and Meetings Features - Implementation Guide\n\n## üéØ **TARGETS TAB - Individual Agent Coaching**\n\n**Main Purpose**: Deep-dive analysis tool for managers to coach individual agents with data-driven insights and action plans.\n\n**Core Workflow**:\n1. **Agent Selection**: Manager selects team from dropdown, then agent from filtered list\n2. **Performance Dashboard**: Shows agent's overall score, category (Elite/Strong/Stable/Watch/Critical), total leads, calls, and issues\n3. **Metric Analysis**: Displays 4 key performance indicators with color-coded visual cards:\n   - **Fixed%**: Student retention rate (Target: >70%)\n   - **CC%**: Class coverage rate - students reaching 12+ classes (Target: >60%)  \n   - **SC%**: Success calls - super class consumption M1-M4 (Target: >30%)\n   - **UP%**: Upselling rate - M-2 cumulative upgrade rate (Target: >15%)\n4. **Visual Score Breakdown**: Pie chart showing weighted contribution of each metric to overall score\n5. **Smart Recommendations**: Auto-generated improvement suggestions based on weak performance areas with specific action items\n6. **Coaching Notes**: Persistent text area to save observations, action plans, and follow-up tasks per agent\n7. **Team Comparison**: Statistical table comparing agent performance vs team averages\n\n**Key Benefits**: Eliminates guesswork in coaching, provides data-driven action plans, tracks coaching history\n\n---\n\n## ü§ù **MEETINGS TAB - Weekly Team Performance Analysis**\n\n**Main Purpose**: Weekly meeting preparation tool that identifies priority agents and generates discussion points.\n\n**Core Workflow**:\n1. **Week Selection**: Choose which week to analyze (typically last 4 weeks available)\n2. **Performance Configuration**: Set underperformance threshold via slider (default 60%)\n3. **Team Overview**: Dashboard showing total agents, underperforming count, average team score\n4. **Priority Agent Identification**: Automatic sorting by performance score (lowest first)\n5. **Agent Analysis Cards**: Expandable sections for each agent containing:\n   - Performance metric breakdown with visual indicators\n   - Weakness identification (metrics below threshold)\n   - Meeting notes text area (saves per agent per week)\n   - Discussion points and action items\n6. **Team Performance Summary**: Table showing each team's average score and underperforming agent count\n7. **Visual Analytics**: Bar chart of all agents with performance threshold line\n8. **Report Export**: Generate downloadable meeting summary with all analysis\n\n**Key Benefits**: Streamlines meeting preparation, ensures no agent is overlooked, provides structured discussion framework\n\n---\n\n## ü§ñ **OPENROUTER API INTEGRATION** (AI Enhancement)\n\n**Purpose**: Adds AI-powered coaching insights and discussion points to both features.\n\n**API Configuration**:\n- **Service**: OpenRouter.ai (AI model aggregation platform)\n- **Model**: `anthropic/claude-3-haiku` (cost-effective, high-quality)\n- **Required Secret**: `OPENROUTER_API_KEY`\n- **Base URL**: `https://openrouter.ai/api/v1`\n\n**How to Get API Key**:\n1. Go to https://openrouter.ai\n2. Sign up for account\n3. Navigate to API Keys section\n4. Generate new API key\n5. Add to your environment as `OPENROUTER_API_KEY`\n\n**AI Features**:\n\n**For Targets Tab**:\n- **Agent Performance Analysis**: AI reviews agent metrics and generates personalized coaching recommendations\n- **Weakness Assessment**: AI identifies root causes behind poor performance areas\n- **Action Plan Generation**: AI suggests specific, actionable improvement steps\n- **Coaching Strategy**: AI recommends management approach based on performance level\n\n**For Meetings Tab**:\n- **Discussion Points**: AI generates specific talking points for each underperforming agent\n- **Meeting Questions**: AI suggests constructive questions to ask during 1:1s\n- **Team Insights**: AI analyzes team-wide patterns and suggests management strategies\n- **Follow-up Recommendations**: AI proposes next steps and timelines for improvement\n\n**Fallback System**: If API unavailable, system automatically uses rule-based analysis instead\n\n**Cost Estimation**:\n- Small team (50 agents): ~$10-20/month\n- Medium team (200 agents): ~$40-80/month\n- Large team (500 agents): ~$100-200/month\n\n**Security**: API key stored as environment variable, never exposed in frontend\n\n---\n\n## üìä **DATA REQUIREMENTS**\n\n**Input Data**: Uses same agent data from your existing dashboard\n- Agent names, teams, performance metrics (CC%, SC%, UP%, Fixed%)\n- No additional data upload needed\n\n**New Database Tables Needed**:\n- `coaching_notes`: Store coaching observations per agent\n- `meeting_notes`: Store meeting discussion points per agent per week\n\n**Backend Endpoints Required**:\n- Save/load coaching notes\n- Save/load meeting notes  \n- Generate meeting reports\n- Optional: AI analysis endpoints\n\n**Important Notes**:\n- All percentage values should be stored as decimals (0.0-1.0) and displayed as percentages\n- Features work offline without AI if OpenRouter API not configured\n- Notes are persistent and searchable by agent/team/date\n- Export functionality generates professional meeting reports\n\nThis gives managers powerful tools to transform raw performance data into actionable coaching insights and structured meeting agendas.","size_bytes":5268},"src/pages/Meetings.tsx":{"content":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { \n  Calendar, \n  Users, \n  TrendingDown, \n  ChevronDown, \n  ChevronRight, \n  Download, \n  Sparkles,\n  AlertTriangle,\n  CheckCircle,\n  FileText\n} from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from 'recharts';\nimport { API_BASE_URL } from '@/services/api';\n\ninterface AgentData {\n  id: string;\n  name: string;\n  team: string;\n  group: string;\n  students: number;\n  ccPct: number | null;\n  scPct: number | null;\n  upPct: number | null;\n  fixedPct: number | null;\n  referralLeads: number;\n  referralShowups: number;\n  referralPaid: number;\n}\n\ninterface TeamAgent {\n  id: string;\n  name: string;\n  team: string;\n  score: number;\n  category: string;\n  metrics: {\n    fixedPct: number;\n    ccPct: number;\n    scPct: number;\n    upPct: number;\n  };\n  weaknesses: string[];\n}\n\ninterface TeamData {\n  week: string;\n  threshold: number;\n  total_agents: number;\n  underperforming_count: number;\n  average_score: number;\n  agents: TeamAgent[];\n}\n\ninterface MeetingNotes {\n  content: string;\n  agent_id: string;\n  week: string;\n  updated_at?: string;\n}\n\n// Get real data from localStorage (same as TeamAnalytics)\nconst getAgentsData = (): AgentData[] => {\n  const storedData = localStorage.getItem('cmlens_processed_data');\n  \n  if (storedData) {\n    try {\n      const parsed = JSON.parse(storedData);\n      if (parsed.agents) {\n        // Handle both array and object formats\n        if (Array.isArray(parsed.agents)) {\n          return parsed.agents;\n        } else if (typeof parsed.agents === 'object') {\n          // Convert object to array\n          return Object.values(parsed.agents).map((agent: any) => ({\n            id: agent.agent_id || agent.id,\n            name: agent.agent_id || agent.name,\n            team: agent.team,\n            group: agent.group,\n            students: agent.students,\n            ccPct: agent.cc_pct || agent.ccPct,\n            scPct: agent.sc_pct || agent.scPct,\n            upPct: agent.up_pct || agent.upPct,\n            fixedPct: agent.fixed_pct || agent.fixedPct,\n            referralLeads: agent.referral?.leads || agent.referralLeads || 0,\n            referralShowups: agent.referral?.showups || agent.referralShowups || 0,\n            referralPaid: agent.referral?.paid || agent.referralPaid || 0,\n          }));\n        }\n      }\n    } catch (error) {\n      console.error('Error parsing stored data:', error);\n    }\n  }\n  \n  return [];\n};\n\nconst Meetings: React.FC = () => {\n  const [selectedWeek, setSelectedWeek] = useState<string>('1');\n  const [threshold, setThreshold] = useState<number>(60);\n  const [expandedAgents, setExpandedAgents] = useState<Set<string>>(new Set());\n  const [meetingNotes, setMeetingNotes] = useState<Record<string, string>>({});\n  const [isLoadingAI, setIsLoadingAI] = useState<string>('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedTeam, setSelectedTeam] = useState<string>('all');\n\n  // Get real agents data from localStorage\n  const agentsData = useMemo(() => getAgentsData(), []);\n\n  // Get targets from localStorage\n  const targets = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_targets\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n  }, []);\n\n  // Get weights from localStorage\n  const weights = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_weights\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 25,\n      superClassConsumption: 25,\n      upgradeRate: 25,\n      fixedRate: 25,\n    };\n  }, []);\n\n  // Calculate agent score based on targets and weights\n  const calculateScore = (agent: AgentData) => {\n    let weightedScore = 0;\n    let totalAvailableWeight = 0;\n\n    if (agent.fixedPct !== null) {\n      weightedScore += ((agent.fixedPct / targets.fixedRate) * 100) * (weights.fixedRate / 100);\n      totalAvailableWeight += weights.fixedRate;\n    }\n    if (agent.ccPct !== null) {\n      weightedScore += ((agent.ccPct / targets.classConsumption) * 100) * (weights.classConsumption / 100);\n      totalAvailableWeight += weights.classConsumption;\n    }\n    if (agent.scPct !== null) {\n      weightedScore += ((agent.scPct / targets.superClassConsumption) * 100) * (weights.superClassConsumption / 100);\n      totalAvailableWeight += weights.superClassConsumption;\n    }\n    if (agent.upPct !== null) {\n      weightedScore += ((agent.upPct / targets.upgradeRate) * 100) * (weights.upgradeRate / 100);\n      totalAvailableWeight += weights.upgradeRate;\n    }\n    \n    // Normalize to available weight percentage\n    return totalAvailableWeight > 0 ? (weightedScore / (totalAvailableWeight / 100)) : 0;\n  };\n\n  // Get agent status based on score\n  const getAgentStatus = (score: number) => {\n    if (score >= 100) return \"Elite\";\n    if (score >= 80) return \"Strong\";\n    if (score >= 60) return \"Stable\";\n    if (score >= 40) return \"Watch\";\n    return \"Critical\";\n  };\n\n  // Generate weaknesses based on metrics vs targets\n  const generateWeaknesses = (agent: AgentData): string[] => {\n    const weaknesses = [];\n    \n    if (agent.fixedPct !== null && agent.fixedPct < targets.fixedRate) {\n      weaknesses.push(`Fixed rate below target (${agent.fixedPct}% vs ${targets.fixedRate}%)`);\n    }\n    \n    if (agent.ccPct !== null && agent.ccPct < targets.classConsumption) {\n      weaknesses.push(`Class consumption below target (${agent.ccPct}% vs ${targets.classConsumption}%)`);\n    }\n    \n    if (agent.scPct !== null && agent.scPct < targets.superClassConsumption) {\n      weaknesses.push(`Super class below target (${agent.scPct}% vs ${targets.superClassConsumption}%)`);\n    }\n    \n    if (agent.upPct !== null && agent.upPct < targets.upgradeRate) {\n      weaknesses.push(`Upgrade rate below target (${agent.upPct}% vs ${targets.upgradeRate}%)`);\n    }\n    \n    return weaknesses;\n  };\n\n  // Get teams list for filter\n  const teams = useMemo(() => {\n    const uniqueTeams = [...new Set(agentsData.map(agent => agent.team).filter(Boolean))];\n    return uniqueTeams.sort();\n  }, [agentsData]);\n\n  // Filter by status function\n  const filterByStatus = (status: string) => {\n    setStatusFilter(status);\n  };\n\n  // Transform AgentData to TeamAgent format with real calculation\n  const processedTeamData = useMemo(() => {\n    let filteredAgents = agentsData;\n\n    // Apply team filter\n    if (selectedTeam !== 'all') {\n      filteredAgents = filteredAgents.filter(agent => agent.team === selectedTeam);\n    }\n\n    // Apply status filter first, then threshold\n    if (statusFilter !== 'all') {\n      filteredAgents = filteredAgents.filter(agent => {\n        const score = calculateScore(agent);\n        const status = getAgentStatus(score);\n        return status === statusFilter;\n      });\n    }\n\n    const underperformingAgents = filteredAgents\n      .filter(agent => calculateScore(agent) < threshold)\n      .map(agent => {\n        const score = calculateScore(agent);\n        const category = getAgentStatus(score);\n        const weaknesses = generateWeaknesses(agent);\n        \n        return {\n          id: agent.id,\n          name: agent.name,\n          team: agent.team,\n          score: Math.round(score * 10) / 10, // Round to 1 decimal\n          category,\n          metrics: {\n            fixedPct: (agent.fixedPct || 0) / 100, // Convert to decimal for display\n            ccPct: (agent.ccPct || 0) / 100,\n            scPct: (agent.scPct || 0) / 100,\n            upPct: (agent.upPct || 0) / 100,\n          },\n          weaknesses\n        };\n      });\n\n    const totalScore = filteredAgents.reduce((sum, agent) => sum + calculateScore(agent), 0);\n    const averageScore = filteredAgents.length > 0 ? totalScore / filteredAgents.length : 0;\n\n    return {\n      week: selectedWeek,\n      threshold,\n      total_agents: filteredAgents.length,\n      underperforming_count: underperformingAgents.length,\n      average_score: Math.round(averageScore * 10) / 10,\n      agents: underperformingAgents\n    };\n  }, [agentsData, targets, threshold, selectedWeek, statusFilter, selectedTeam]);\n\n  // Available weeks for selection\n  const weeks = [\n    { value: '1', label: 'Week 1 (Current)' },\n    { value: '2', label: 'Week 2' },\n    { value: '3', label: 'Week 3' },\n    { value: '4', label: 'Week 4' }\n  ];\n\n  // Load meeting notes for specific agent (localStorage based)\n  const loadMeetingNotes = async (agentId: string): Promise<string> => {\n    try {\n      // For now, return empty string - could implement localStorage-based notes storage\n      return localStorage.getItem(`meeting_notes_${agentId}_${selectedWeek}`) || '';\n    } catch (error) {\n      console.error('Error loading meeting notes:', error);\n      return '';\n    }\n  };\n\n  // Save meeting notes (localStorage based)\n  const saveMeetingNotes = async (agentId: string, content: string) => {\n    try {\n      localStorage.setItem(`meeting_notes_${agentId}_${selectedWeek}`, content);\n      setMeetingNotes(prev => ({ ...prev, [agentId]: content }));\n      toast({\n        title: \"Success\",\n        description: \"Meeting notes saved successfully\"\n      });\n    } catch (error) {\n      console.error('Error saving meeting notes:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save meeting notes\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Generate AI meeting insights using the real backend API\n  const generateMeetingInsights = async (agent: TeamAgent) => {\n    setIsLoadingAI(agent.id);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/ai-analysis`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 'meeting',\n          agent_data: agent\n        })\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        setMeetingNotes(prev => ({\n          ...prev,\n          [agent.id]: result.analysis\n        }));\n        \n        // Also save to localStorage\n        localStorage.setItem(`meeting_notes_${agent.id}_${selectedWeek}`, result.analysis);\n        \n        toast({\n          title: \"AI Insights Generated\",\n          description: \"Meeting preparation notes are ready\",\n          variant: \"default\"\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate insights\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error generating AI insights:', error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to generate insights\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoadingAI('');\n    }\n  };\n\n  // Load all meeting notes on component mount and when selection changes\n  useEffect(() => {\n    processedTeamData.agents.forEach(agent => {\n      loadMeetingNotes(agent.id).then(notes => {\n        setMeetingNotes(prev => ({ ...prev, [agent.id]: notes }));\n      });\n    });\n  }, [processedTeamData.agents, selectedWeek]);\n\n  const toggleAgentExpansion = (agentId: string) => {\n    setExpandedAgents(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(agentId)) {\n        newSet.delete(agentId);\n      } else {\n        newSet.add(agentId);\n      }\n      return newSet;\n    });\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'Elite': return 'bg-emerald-100 text-emerald-800 border-emerald-200';\n      case 'Strong': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'Stable': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Watch': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'Critical': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    return getCategoryColor(status);\n  };\n\n  // Show data availability status\n  const dataStatus = useMemo(() => {\n    if (agentsData.length === 0) {\n      return { hasData: false, message: \"No performance data available. Please upload files first.\" };\n    }\n    return { hasData: true, message: `Analyzing ${agentsData.length} agents with ${threshold}% threshold.` };\n  }, [agentsData, threshold]);\n\n  if (!dataStatus.hasData) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Weekly Meetings</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Threshold-based team performance analysis for meeting preparation\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardContent className=\"flex items-center justify-center p-12\">\n            <div className=\"text-center space-y-4\">\n              <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n              <div>\n                <h3 className=\"text-lg font-semibold\">No Data Available</h3>\n                <p className=\"text-muted-foreground\">{dataStatus.message}</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Go to Upload & Targets to process your performance files.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Weekly Meetings</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {dataStatus.message}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Calendar className=\"h-5 w-5 text-blue-500\" />\n          <span className=\"text-sm font-medium\">Meeting Prep</span>\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Week Selection</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Select value={selectedWeek} onValueChange={setSelectedWeek}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {weeks.map(week => (\n                  <SelectItem key={week.value} value={week.value}>\n                    {week.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Filter by Team</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Select value={selectedTeam} onValueChange={setSelectedTeam}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"All teams\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Teams</SelectItem>\n                {teams.map(team => (\n                  <SelectItem key={team} value={team}>\n                    {team}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Filter by Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Select value={statusFilter} onValueChange={filterByStatus}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"All statuses\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"Critical\">Critical</SelectItem>\n                <SelectItem value=\"Watch\">Watch</SelectItem>\n                <SelectItem value=\"Stable\">Stable</SelectItem>\n                <SelectItem value=\"Strong\">Strong</SelectItem>\n                <SelectItem value=\"Elite\">Elite</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Performance Threshold</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Minimum Score</span>\n                <span className=\"font-medium\">{threshold}%</span>\n              </div>\n              <Slider\n                value={[threshold]}\n                onValueChange={([value]) => setThreshold(value)}\n                max={100}\n                min={0}\n                step={5}\n                className=\"w-full\"\n              />\n              <div className=\"text-xs text-muted-foreground\">\n                Showing agents below {threshold}% performance\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Agents</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{processedTeamData.total_agents}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Underperforming</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {processedTeamData.underperforming_count}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Below {threshold}% threshold\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n            <BarChart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{processedTeamData.average_score}%</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Meeting Focus</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {Math.round((processedTeamData.underperforming_count / processedTeamData.total_agents) * 100)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Need attention\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Underperforming Agents */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Agents Needing Attention (Below {threshold}%)</CardTitle>\n          <CardDescription>\n            Focus agents for this week's meeting based on performance threshold\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {processedTeamData.agents.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-green-700\">All Agents Above Threshold!</h3>\n              <p className=\"text-muted-foreground\">No agents need immediate attention this week.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {processedTeamData.agents.map(agent => (\n                <Collapsible\n                  key={agent.id}\n                  open={expandedAgents.has(agent.id)}\n                  onOpenChange={() => toggleAgentExpansion(agent.id)}\n                >\n                  <CollapsibleTrigger asChild>\n                    <div className=\"flex items-center justify-between p-4 rounded-lg border hover:bg-muted/50 cursor-pointer\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          {expandedAgents.has(agent.id) ? (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronRight className=\"h-4 w-4\" />\n                          )}\n                          <span className=\"font-medium\">{agent.name}</span>\n                        </div>\n                        <Badge className={getCategoryColor(agent.category)} variant=\"secondary\">\n                          {agent.category}\n                        </Badge>\n                        <span className=\"text-sm text-muted-foreground\">{agent.team}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"text-lg font-bold text-orange-600\">{agent.score}%</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            generateMeetingInsights(agent);\n                          }}\n                          disabled={isLoadingAI === agent.id}\n                        >\n                          {isLoadingAI === agent.id ? (\n                            \"Generating...\"\n                          ) : (\n                            <>\n                              <Sparkles className=\"h-4 w-4 mr-2\" />\n                              AI Insights\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </CollapsibleTrigger>\n\n                  <CollapsibleContent>\n                    <div className=\"px-4 pb-4\">\n                      <div className=\"grid gap-4 md:grid-cols-2\">\n                        {/* Performance Metrics */}\n                        <div>\n                          <h4 className=\"font-medium mb-2\">Performance Metrics</h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between\">\n                              <span>Fixed Rate:</span>\n                              <span className={agent.metrics.fixedPct < targets.fixedRate / 100 ? 'text-red-600' : 'text-green-600'}>\n                                {Math.round(agent.metrics.fixedPct * 100)}%\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Class Consumption:</span>\n                              <span className={agent.metrics.ccPct < targets.classConsumption / 100 ? 'text-red-600' : 'text-green-600'}>\n                                {Math.round(agent.metrics.ccPct * 100)}%\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Super Class:</span>\n                              <span className={agent.metrics.scPct < targets.superClassConsumption / 100 ? 'text-red-600' : 'text-green-600'}>\n                                {Math.round(agent.metrics.scPct * 100)}%\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Upgrade Rate:</span>\n                              <span className={agent.metrics.upPct < targets.upgradeRate / 100 ? 'text-red-600' : 'text-green-600'}>\n                                {Math.round(agent.metrics.upPct * 100)}%\n                              </span>\n                            </div>\n                          </div>\n\n                          {agent.weaknesses.length > 0 && (\n                            <div className=\"mt-4\">\n                              <h4 className=\"font-medium mb-2 text-red-600\">Areas of Concern</h4>\n                              <ul className=\"text-sm space-y-1\">\n                                {agent.weaknesses.map((weakness, index) => (\n                                  <li key={index} className=\"flex items-start\">\n                                    <AlertTriangle className=\"h-3 w-3 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n                                    {weakness}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Meeting Notes */}\n                        <div>\n                          <h4 className=\"font-medium mb-2\">Meeting Notes</h4>\n                          <Textarea\n                            placeholder=\"Add meeting discussion points, action items, or follow-up notes...\"\n                            value={meetingNotes[agent.id] || ''}\n                            onChange={(e) => setMeetingNotes(prev => ({ ...prev, [agent.id]: e.target.value }))}\n                            className=\"min-h-[120px]\"\n                          />\n                          <Button\n                            onClick={() => saveMeetingNotes(agent.id, meetingNotes[agent.id] || '')}\n                            size=\"sm\"\n                            className=\"mt-2\"\n                          >\n                            <FileText className=\"h-4 w-4 mr-2\" />\n                            Save Notes\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CollapsibleContent>\n                </Collapsible>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Meetings;","size_bytes":27013},"src/pages/Targets.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Target, TrendingUp, Users, Phone, AlertTriangle, CheckCircle, Sparkles } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { API_BASE_URL } from '@/services/api';\n\ninterface AgentMetrics {\n  fixedPct: number;\n  ccPct: number;\n  scPct: number;\n  upPct: number;\n  students: number;\n  referralLeads: number;\n  referralShowups: number;\n  referralPaid: number;\n}\n\ninterface Agent {\n  id: string;\n  name: string;\n  team: string;\n  group: string;\n  score: number;\n  category: string;\n  metrics: AgentMetrics;\n}\n\ninterface CoachingNotes {\n  content: string;\n  agent_id: string;\n  type: string;\n  updated_at?: string;\n}\n\nconst Targets: React.FC = () => {\n  const [selectedTeam, setSelectedTeam] = useState<string>('');\n  const [selectedAgent, setSelectedAgent] = useState<string>('');\n  const [agentData, setAgentData] = useState<Agent | null>(null);\n  const [coachingNotes, setCoachingNotes] = useState<string>('');\n  const [aiAnalysis, setAiAnalysis] = useState<string>('');\n  const [isLoadingAgent, setIsLoadingAgent] = useState(false);\n  const [isLoadingAI, setIsLoadingAI] = useState(false);\n  const [aiSource, setAiSource] = useState<'ai' | 'fallback'>('ai');\n\n  // Teams and agents data from backend\n  const [teams, setTeams] = useState<string[]>([]);\n  const [agentsByTeam, setAgentsByTeam] = useState<Record<string, Array<{id: string, name: string}>>>({});\n\n  // Load agent performance data\n  const loadAgentData = async (agentId: string) => {\n    setIsLoadingAgent(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/agent-performance/${agentId}`);\n      const result = await response.json();\n      \n      if (result.success) {\n        setAgentData(result.agent);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load agent data\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error loading agent data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load agent data\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoadingAgent(false);\n    }\n  };\n\n  // Load coaching notes\n  const loadCoachingNotes = async (agentId: string) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/coaching-notes/${agentId}`);\n      const notes: CoachingNotes = await response.json();\n      setCoachingNotes(notes.content || '');\n    } catch (error) {\n      console.error('Error loading coaching notes:', error);\n    }\n  };\n\n  // Save coaching notes\n  const saveCoachingNotes = async () => {\n    if (!selectedAgent) return;\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/coaching-notes/${selectedAgent}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ content: coachingNotes })\n      });\n\n      const result = await response.json();\n      if (result.success) {\n        toast({\n          title: \"Success\",\n          description: \"Coaching notes saved successfully\"\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to save coaching notes\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error saving coaching notes:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save coaching notes\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Generate AI analysis\n  const generateAIAnalysis = async () => {\n    if (!agentData) return;\n\n    setIsLoadingAI(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/ai-analysis`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 'coaching',\n          agent_data: agentData\n        })\n      });\n\n      const result = await response.json();\n      if (result.success) {\n        setAiAnalysis(result.analysis);\n        setAiSource(result.source || 'ai');\n        if (result.source === 'fallback') {\n          toast({\n            title: \"Analysis Generated\",\n            description: result.message || \"Using rule-based analysis\",\n            variant: \"default\"\n          });\n        }\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate analysis\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error generating AI analysis:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate analysis\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoadingAI(false);\n    }\n  };\n\n  // Load teams and agents data\n  const loadTeamsAndAgents = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/teams-agents`);\n      const result = await response.json();\n      \n      if (result.success) {\n        setTeams(result.data.teams);\n        setAgentsByTeam(result.data.agents_by_team);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load teams and agents\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error loading teams and agents:', error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to load teams and agents\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Load teams and agents on component mount\n  useEffect(() => {\n    loadTeamsAndAgents();\n  }, []);\n\n  // Handle agent selection\n  useEffect(() => {\n    if (selectedAgent) {\n      loadAgentData(selectedAgent);\n      loadCoachingNotes(selectedAgent);\n      setAiAnalysis(''); // Clear previous analysis\n    }\n  }, [selectedAgent]);\n\n  // Get category color\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'Elite': return 'bg-green-500';\n      case 'Strong': return 'bg-blue-500';\n      case 'Stable': return 'bg-yellow-500';\n      case 'Watch': return 'bg-orange-500';\n      case 'Critical': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  // Get metric color\n  const getMetricColor = (value: number, target: number) => {\n    if (value >= target) return 'text-green-600';\n    if (value >= target * 0.8) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  // Prepare chart data\n  const chartData = agentData ? [\n    { name: 'Fixed%', value: agentData.metrics.fixedPct * 100, target: 70 },\n    { name: 'CC%', value: agentData.metrics.ccPct * 100, target: 60 },\n    { name: 'SC%', value: agentData.metrics.scPct * 100, target: 30 },\n    { name: 'UP%', value: agentData.metrics.upPct * 100, target: 15 }\n  ] : [];\n\n  const pieData = agentData ? [\n    { name: 'Fixed%', value: agentData.metrics.fixedPct * 30, fill: '#8884d8' },\n    { name: 'CC%', value: agentData.metrics.ccPct * 25, fill: '#82ca9d' },\n    { name: 'SC%', value: agentData.metrics.scPct * 25, fill: '#ffc658' },\n    { name: 'UP%', value: agentData.metrics.upPct * 20, fill: '#ff7300' }\n  ] : [];\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Target className=\"h-6 w-6 text-blue-600\" />\n        <h1 className=\"text-2xl font-bold\">Individual Agent Coaching</h1>\n      </div>\n\n      {/* Agent Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Agent Selection</CardTitle>\n          <CardDescription>Select team and agent for detailed coaching analysis</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Team</label>\n              <Select value={selectedTeam} onValueChange={(value) => {\n                setSelectedTeam(value);\n                setSelectedAgent('');\n                setAgentData(null);\n              }}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select team\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {teams.map(team => (\n                    <SelectItem key={team} value={team}>{team}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Agent</label>\n              <Select \n                value={selectedAgent} \n                onValueChange={setSelectedAgent}\n                disabled={!selectedTeam}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select agent\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {selectedTeam && agentsByTeam[selectedTeam]?.map(agent => (\n                    <SelectItem key={agent.id} value={agent.id}>{agent.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Dashboard */}\n      {agentData && (\n        <>\n          {/* Overall Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Performance Dashboard\n                <Badge className={getCategoryColor(agentData.category)}>\n                  {agentData.category}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600\">{agentData.score}%</div>\n                  <div className=\"text-sm text-gray-600\">Overall Score</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold flex items-center justify-center\">\n                    <Users className=\"h-5 w-5 mr-1\" />\n                    {agentData.metrics.students}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Students</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold flex items-center justify-center\">\n                    <Phone className=\"h-5 w-5 mr-1\" />\n                    {agentData.metrics.referralLeads}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Referral Leads</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold flex items-center justify-center\">\n                    <CheckCircle className=\"h-5 w-5 mr-1\" />\n                    {agentData.metrics.referralPaid}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Referral Paid</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Metric Analysis */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Fixed%</CardTitle>\n                <CardDescription>Student Retention Rate</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className={`text-3xl font-bold ${getMetricColor(agentData.metrics.fixedPct * 100, 70)}`}>\n                  {(agentData.metrics.fixedPct * 100).toFixed(1)}%\n                </div>\n                <Progress value={agentData.metrics.fixedPct * 100} className=\"mt-2\" />\n                <div className=\"text-sm text-gray-600 mt-1\">Target: 70%</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">CC%</CardTitle>\n                <CardDescription>Class Coverage Rate</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className={`text-3xl font-bold ${getMetricColor(agentData.metrics.ccPct * 100, 60)}`}>\n                  {(agentData.metrics.ccPct * 100).toFixed(1)}%\n                </div>\n                <Progress value={agentData.metrics.ccPct * 100} className=\"mt-2\" />\n                <div className=\"text-sm text-gray-600 mt-1\">Target: 60%</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">SC%</CardTitle>\n                <CardDescription>Success Calls Rate</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className={`text-3xl font-bold ${getMetricColor(agentData.metrics.scPct * 100, 30)}`}>\n                  {(agentData.metrics.scPct * 100).toFixed(1)}%\n                </div>\n                <Progress value={agentData.metrics.scPct * 100} className=\"mt-2\" />\n                <div className=\"text-sm text-gray-600 mt-1\">Target: 30%</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">UP%</CardTitle>\n                <CardDescription>Upselling Rate</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className={`text-3xl font-bold ${getMetricColor(agentData.metrics.upPct * 100, 15)}`}>\n                  {(agentData.metrics.upPct * 100).toFixed(1)}%\n                </div>\n                <Progress value={agentData.metrics.upPct * 100} className=\"mt-2\" />\n                <div className=\"text-sm text-gray-600 mt-1\">Target: 15%</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Visual Analytics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Performance Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Breakdown</CardTitle>\n                <CardDescription>Weighted contribution to overall score</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, value }) => `${name}: ${value.toFixed(1)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Metrics vs Targets */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Metrics vs Targets</CardTitle>\n                <CardDescription>Performance against target benchmarks</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"value\" fill=\"#8884d8\" name=\"Actual\" />\n                    <Bar dataKey=\"target\" fill=\"#82ca9d\" name=\"Target\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Sparkles className=\"h-5 w-5 text-purple-600\" />\n                  Smart Coaching Recommendations\n                </div>\n                <Button \n                  onClick={generateAIAnalysis} \n                  disabled={isLoadingAI}\n                  size=\"sm\"\n                >\n                  {isLoadingAI ? 'Analyzing...' : 'Generate AI Insights'}\n                </Button>\n              </CardTitle>\n              <CardDescription>\n                AI-powered coaching insights and action plans\n                {aiSource === 'fallback' && (\n                  <Badge variant=\"outline\" className=\"ml-2\">Rule-based</Badge>\n                )}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {aiAnalysis ? (\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <pre className=\"whitespace-pre-wrap text-sm\">{aiAnalysis}</pre>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  Click \"Generate AI Insights\" to get personalized coaching recommendations\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Coaching Notes */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Coaching Notes</CardTitle>\n              <CardDescription>Persistent coaching observations and action plans</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"Add coaching notes, observations, action plans, and follow-up tasks...\"\n                value={coachingNotes}\n                onChange={(e) => setCoachingNotes(e.target.value)}\n                rows={6}\n              />\n              <Button onClick={saveCoachingNotes}>Save Notes</Button>\n            </CardContent>\n          </Card>\n        </>\n      )}\n\n      {/* Empty State */}\n      {!selectedAgent && (\n        <Card>\n          <CardContent className=\"py-12\">\n            <div className=\"text-center text-gray-500\">\n              <Target className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">Select an Agent to Begin Coaching</h3>\n              <p>Choose a team and agent above to view detailed performance analysis and coaching tools.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default Targets;","size_bytes":19243},"src/pages/TeamAnalytics.tsx":{"content":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Target, TrendingUp, Users, BarChart3, AlertTriangle, CheckCircle, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport AgentDetailModal from \"@/components/AgentDetailModal\";\n\ninterface AgentData {\n  id: string;\n  name: string;\n  team: string;\n  group: string;\n  students: number;\n  ccPct: number | null;\n  scPct: number | null;\n  upPct: number | null;\n  fixedPct: number | null;\n  referralLeads: number;\n  referralShowups: number;\n  referralPaid: number;\n}\n\ninterface TeamStats {\n  teamName: string;\n  totalAgents: number;\n  averageScore: number;\n  aboveTarget: number;\n  belowTarget: number;\n  agents: AgentData[];\n}\n\n// Get real data from localStorage (same as AgentsPerformance page)\nconst getAgentsData = (): AgentData[] => {\n  const storedData = localStorage.getItem('cmlens_processed_data');\n  \n  if (storedData) {\n    try {\n      const parsed = JSON.parse(storedData);\n      if (parsed.agents) {\n        // Handle both array and object formats\n        if (Array.isArray(parsed.agents)) {\n          return parsed.agents;\n        } else if (typeof parsed.agents === 'object') {\n          // Convert object to array\n          return Object.values(parsed.agents).map((agent: any) => ({\n            id: agent.agent_id || agent.id,\n            name: agent.agent_id || agent.name,\n            team: agent.team,\n            group: agent.group,\n            students: agent.students,\n            ccPct: agent.cc_pct || agent.ccPct,\n            scPct: agent.sc_pct || agent.scPct,\n            upPct: agent.up_pct || agent.upPct,\n            fixedPct: agent.fixed_pct || agent.fixedPct,\n            referralLeads: agent.referral?.leads || agent.referralLeads || 0,\n            referralShowups: agent.referral?.showups || agent.referralShowups || 0,\n            referralPaid: agent.referral?.paid || agent.referralPaid || 0,\n          }));\n        }\n      }\n    } catch (error) {\n      console.error('Error parsing stored data:', error);\n    }\n  }\n  \n  return [];\n};\n\nconst TeamAnalytics: React.FC = () => {\n  const [selectedTeam, setSelectedTeam] = useState<string>('all');\n  const [selectedAgent, setSelectedAgent] = useState<AgentData | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [expandedTeams, setExpandedTeams] = useState<Set<string>>(new Set());\n  \n  // Individual target filters (consistent with AgentsPerformance)\n  const [fixedFilter, setFixedFilter] = useState(\"all\");\n  const [ccFilter, setCcFilter] = useState(\"all\");\n  const [scFilter, setScFilter] = useState(\"all\");\n  const [upFilter, setUpFilter] = useState(\"all\");\n  const [targetsAchievedFilter, setTargetsAchievedFilter] = useState(\"all\");\n\n  const openAgentDetail = (agent: AgentData) => {\n    setSelectedAgent(agent);\n    setIsModalOpen(true);\n  };\n\n  const closeAgentDetail = () => {\n    setIsModalOpen(false);\n    setSelectedAgent(null);\n  };\n\n  const toggleTeamExpansion = (teamName: string) => {\n    const newExpanded = new Set(expandedTeams);\n    if (newExpanded.has(teamName)) {\n      newExpanded.delete(teamName);\n    } else {\n      newExpanded.add(teamName);\n    }\n    setExpandedTeams(newExpanded);\n  };\n\n  const filterByStatus = (status: string) => {\n    setStatusFilter(status);\n  };\n\n  // Get real agents data from localStorage\n  const agentsData = useMemo(() => getAgentsData(), []);\n\n  // Get targets from localStorage\n  const targets = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_targets\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n  }, []);\n\n  // Get weights from localStorage\n  const weights = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_weights\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 25,\n      superClassConsumption: 25,\n      upgradeRate: 25,\n      fixedRate: 25,\n    };\n  }, []);\n\n  // Calculate agent score based on targets and weights\n  const calculateScore = (agent: AgentData) => {\n    let weightedScore = 0;\n    let totalAvailableWeight = 0;\n\n    if (agent.fixedPct !== null) {\n      weightedScore += ((agent.fixedPct / targets.fixedRate) * 100) * (weights.fixedRate / 100);\n      totalAvailableWeight += weights.fixedRate;\n    }\n    if (agent.ccPct !== null) {\n      weightedScore += ((agent.ccPct / targets.classConsumption) * 100) * (weights.classConsumption / 100);\n      totalAvailableWeight += weights.classConsumption;\n    }\n    if (agent.scPct !== null) {\n      weightedScore += ((agent.scPct / targets.superClassConsumption) * 100) * (weights.superClassConsumption / 100);\n      totalAvailableWeight += weights.superClassConsumption;\n    }\n    if (agent.upPct !== null) {\n      weightedScore += ((agent.upPct / targets.upgradeRate) * 100) * (weights.upgradeRate / 100);\n      totalAvailableWeight += weights.upgradeRate;\n    }\n    \n    // Normalize to available weight percentage\n    return totalAvailableWeight > 0 ? (weightedScore / (totalAvailableWeight / 100)) : 0;\n  };\n\n  // Get agent status based on score\n  const getAgentStatus = (score: number) => {\n    if (score >= 100) return \"Elite\";\n    if (score >= 80) return \"Strong\";\n    if (score >= 60) return \"Stable\";\n    if (score >= 40) return \"Watch\";\n    return \"Critical\";\n  };\n\n  // Function to get agent rank within their team\n  const getAgentRank = (agentId: string, teamAgents: AgentData[]) => {\n    const agentsWithScores = teamAgents.map(agent => ({\n      ...agent,\n      weightedScore: calculateScore(agent)\n    }));\n    \n    // Sort by weighted score (descending) then assign ranks\n    const sortedByScore = [...agentsWithScores].sort((a, b) => b.weightedScore - a.weightedScore);\n    \n    const rankIndex = sortedByScore.findIndex(a => a.id === agentId || a.name === agentId);\n    return rankIndex >= 0 ? rankIndex + 1 : 0;\n  };\n\n  // Helper function to get target status (consistent with AgentsPerformance)\n  const getStatus = (value: number | null, target: number) => {\n    if (value === null) return \"na\";\n    if (value >= target) return \"above\";\n    if (value >= target * 0.9) return \"warning\";\n    return \"below\";\n  };\n\n  // Function to count targets achieved by an agent (consistent with AgentsPerformance)\n  const countTargetsAchieved = (agent: AgentData) => {\n    let achieved = 0;\n    if (getStatus(agent.fixedPct, targets.fixedRate) === \"above\") achieved++;\n    if (getStatus(agent.ccPct, targets.classConsumption) === \"above\") achieved++;\n    if (getStatus(agent.scPct, targets.superClassConsumption) === \"above\") achieved++;\n    if (getStatus(agent.upPct, targets.upgradeRate) === \"above\") achieved++;\n    return achieved;\n  };\n\n  // Helper function to check if agent matches target filters\n  const matchesTargetFilters = (agent: AgentData) => {\n    // Fixed Rate filter\n    if (fixedFilter !== \"all\") {\n      const fixedStatus = getStatus(agent.fixedPct, targets.fixedRate);\n      if (fixedFilter !== fixedStatus) return false;\n    }\n    \n    // Class Consumption filter\n    if (ccFilter !== \"all\") {\n      const ccStatus = getStatus(agent.ccPct, targets.classConsumption);\n      if (ccFilter !== ccStatus) return false;\n    }\n    \n    // Super Class filter\n    if (scFilter !== \"all\") {\n      const scStatus = getStatus(agent.scPct, targets.superClassConsumption);\n      if (scFilter !== scStatus) return false;\n    }\n    \n    // Upgrade Rate filter\n    if (upFilter !== \"all\") {\n      const upStatus = getStatus(agent.upPct, targets.upgradeRate);\n      if (upFilter !== upStatus) return false;\n    }\n    \n    // Targets Achieved filter\n    if (targetsAchievedFilter !== \"all\") {\n      const achieved = countTargetsAchieved(agent);\n      if (targetsAchievedFilter === \"0\" && achieved !== 0) return false;\n      if (targetsAchievedFilter === \"1\" && achieved !== 1) return false;\n      if (targetsAchievedFilter === \"2\" && achieved !== 2) return false;\n      if (targetsAchievedFilter === \"3\" && achieved !== 3) return false;\n      if (targetsAchievedFilter === \"4\" && achieved !== 4) return false;\n      if (targetsAchievedFilter === \"3+\" && achieved < 3) return false;\n    }\n    \n    return true;\n  };\n\n  // Group agents by team with performance stats\n  const teamStats = useMemo(() => {\n    const teams: Record<string, TeamStats> = {};\n    \n    agentsData.forEach(agent => {\n      const score = calculateScore(agent);\n      const teamName = agent.team || 'Unassigned';\n      \n      if (!teams[teamName]) {\n        teams[teamName] = {\n          teamName,\n          totalAgents: 0,\n          averageScore: 0,\n          aboveTarget: 0,\n          belowTarget: 0,\n          agents: []\n        };\n      }\n      \n      teams[teamName].agents.push({ ...agent });\n      teams[teamName].totalAgents++;\n      \n      if (score >= 60) {\n        teams[teamName].aboveTarget++;\n      } else {\n        teams[teamName].belowTarget++;\n      }\n    });\n    \n    // Calculate average scores\n    Object.values(teams).forEach(team => {\n      const totalScore = team.agents.reduce((sum, agent) => sum + calculateScore(agent), 0);\n      team.averageScore = totalScore / team.totalAgents;\n    });\n    \n    return Object.values(teams);\n  }, [agentsData, targets]);\n\n  // Get teams list for filter\n  const teams = useMemo(() => {\n    const uniqueTeams = [...new Set(agentsData.map(agent => agent.team).filter(Boolean))];\n    return uniqueTeams.sort();\n  }, [agentsData]);\n\n  // Filter team stats based on selection, status, and individual target filters\n  const filteredTeamStats = useMemo(() => {\n    let filtered = selectedTeam === 'all' ? teamStats : teamStats.filter(team => team.teamName === selectedTeam);\n    \n    // Apply all filters to agents within teams and recompute team aggregates\n    filtered = filtered.map(team => {\n      // First, filter the agents\n      const filteredAgents = team.agents.filter(agent => {\n        // Status filter (existing)\n        if (statusFilter !== 'all') {\n          const score = calculateScore(agent);\n          const status = getAgentStatus(score);\n          if (status !== statusFilter) return false;\n        }\n        \n        // Individual target filters (new)\n        if (!matchesTargetFilters(agent)) return false;\n        \n        return true;\n      });\n\n      // If no agents match the filters, return null to be filtered out later\n      if (filteredAgents.length === 0) {\n        return null;\n      }\n\n      // Recompute team aggregates based on filtered agents\n      let aboveTargetCount = 0;\n      let belowTargetCount = 0;\n      let totalScore = 0;\n\n      filteredAgents.forEach(agent => {\n        const score = calculateScore(agent);\n        totalScore += score;\n        \n        if (score >= 60) {\n          aboveTargetCount++;\n        } else {\n          belowTargetCount++;\n        }\n      });\n\n      const averageScore = filteredAgents.length > 0 ? totalScore / filteredAgents.length : 0;\n\n      return {\n        ...team,\n        agents: filteredAgents,\n        totalAgents: filteredAgents.length,\n        averageScore: averageScore,\n        aboveTarget: aboveTargetCount,\n        belowTarget: belowTargetCount\n      };\n    }).filter(Boolean); // Remove null entries (teams with no matching agents)\n    \n    return filtered as TeamStats[];\n  }, [teamStats, selectedTeam, statusFilter, fixedFilter, ccFilter, scFilter, upFilter, targetsAchievedFilter, targets]);\n\n  // Get all agents with status information for status distribution\n  const agentsWithStatus = useMemo(() => {\n    return agentsData.map(agent => {\n      const score = calculateScore(agent);\n      const status = getAgentStatus(score);\n      return { ...agent, score, status };\n    });\n  }, [agentsData, targets]);\n\n  // Count agents by status (only from filtered teams)\n  const statusCounts = useMemo(() => {\n    const counts = { Elite: 0, Strong: 0, Stable: 0, Watch: 0, Critical: 0 };\n    \n    // Get agents from filtered teams only\n    const filteredAgents = filteredTeamStats.flatMap(team => team.agents);\n    \n    filteredAgents.forEach(agent => {\n      const score = calculateScore(agent);\n      const status = getAgentStatus(score);\n      counts[status as keyof typeof counts]++;\n    });\n    \n    return counts;\n  }, [filteredTeamStats, targets]);\n\n  // Prepare chart data for team comparison\n  const chartData = useMemo(() => {\n    return filteredTeamStats.map(team => ({\n      name: team.teamName,\n      score: Math.round(team.averageScore),\n      agents: team.totalAgents,\n      aboveTarget: team.aboveTarget,\n      belowTarget: team.belowTarget\n    }));\n  }, [filteredTeamStats]);\n\n  // Show data availability status\n  const dataStatus = useMemo(() => {\n    if (agentsData.length === 0) {\n      return { hasData: false, message: \"No performance data available. Please upload files first.\" };\n    }\n    return { hasData: true, message: `Showing analytics for ${agentsData.length} agents across ${teams.length} teams.` };\n  }, [agentsData, teams]);\n\n  // Get status color\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Elite': return 'bg-emerald-100 text-emerald-800 border-emerald-200';\n      case 'Strong': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'Stable': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Watch': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'Critical': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\n  if (!dataStatus.hasData) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Team Analytics</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Comprehensive team performance analysis and insights\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardContent className=\"flex items-center justify-center p-12\">\n            <div className=\"text-center space-y-4\">\n              <BarChart3 className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n              <div>\n                <h3 className=\"text-lg font-semibold\">No Data Available</h3>\n                <p className=\"text-muted-foreground\">{dataStatus.message}</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Go to Upload & Targets to process your performance files.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Team Analytics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {dataStatus.message}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <BarChart3 className=\"h-5 w-5 text-blue-500\" />\n          <span className=\"text-sm font-medium\">Real-time Analytics</span>\n        </div>\n      </div>\n\n      {/* Enhanced Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Analytics Filters</CardTitle>\n          <CardDescription>Filter and analyze team performance data</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Primary Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Select value={selectedTeam} onValueChange={setSelectedTeam}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Team\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Teams</SelectItem>\n                  {teams.map(team => (\n                    <SelectItem key={team} value={team}>{team}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Performance Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"Elite\">Elite</SelectItem>\n                  <SelectItem value=\"Strong\">Strong</SelectItem>\n                  <SelectItem value=\"Stable\">Stable</SelectItem>\n                  <SelectItem value=\"Watch\">Watch</SelectItem>\n                  <SelectItem value=\"Critical\">Critical</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={targetsAchievedFilter} onValueChange={setTargetsAchievedFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Targets Achieved\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Counts</SelectItem>\n                  <SelectItem value=\"4\">4 Targets</SelectItem>\n                  <SelectItem value=\"3\">3 Targets</SelectItem>\n                  <SelectItem value=\"3+\">3+ Targets</SelectItem>\n                  <SelectItem value=\"2\">2 Targets</SelectItem>\n                  <SelectItem value=\"1\">1 Target</SelectItem>\n                  <SelectItem value=\"0\">0 Targets</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSelectedTeam(\"all\");\n                  setStatusFilter(\"all\");\n                  setFixedFilter(\"all\");\n                  setCcFilter(\"all\");\n                  setScFilter(\"all\");\n                  setUpFilter(\"all\");\n                  setTargetsAchievedFilter(\"all\");\n                }}\n              >\n                Clear All\n              </Button>\n            </div>\n\n            {/* Target-Specific Filters */}\n            <div className=\"border-t pt-4\">\n              <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Individual Target Filters</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <Select value={fixedFilter} onValueChange={setFixedFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Fixed Rate\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Fixed</SelectItem>\n                    <SelectItem value=\"above\">Above Target</SelectItem>\n                    <SelectItem value=\"warning\">Near Target</SelectItem>\n                    <SelectItem value=\"below\">Below Target</SelectItem>\n                    <SelectItem value=\"na\">No Data</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={ccFilter} onValueChange={setCcFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Class Consumption\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All CC</SelectItem>\n                    <SelectItem value=\"above\">Above Target</SelectItem>\n                    <SelectItem value=\"warning\">Near Target</SelectItem>\n                    <SelectItem value=\"below\">Below Target</SelectItem>\n                    <SelectItem value=\"na\">No Data</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={scFilter} onValueChange={setScFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Super Class\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All SC</SelectItem>\n                    <SelectItem value=\"above\">Above Target</SelectItem>\n                    <SelectItem value=\"warning\">Near Target</SelectItem>\n                    <SelectItem value=\"below\">Below Target</SelectItem>\n                    <SelectItem value=\"na\">No Data</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={upFilter} onValueChange={setUpFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Upgrade Rate\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All UP</SelectItem>\n                    <SelectItem value=\"above\">Above Target</SelectItem>\n                    <SelectItem value=\"warning\">Near Target</SelectItem>\n                    <SelectItem value=\"below\">Below Target</SelectItem>\n                    <SelectItem value=\"na\">No Data</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Team Performance Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {filteredTeamStats.map(team => (\n          <Card key={team.teamName}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">{team.teamName}</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{Math.round(team.averageScore)}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Average Score\n              </p>\n              <div className=\"flex justify-between mt-2 text-xs\">\n                <span className=\"text-green-600\">Above Target: {team.aboveTarget}</span>\n                <span className=\"text-red-600\">Below Target: {team.belowTarget}</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Team Performance Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Team Performance Comparison</CardTitle>\n          <CardDescription>\n            Average team scores and agent distribution\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"score\" fill=\"#8884d8\" name=\"Average Score %\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Agent Performance Distribution */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Agent Performance Distribution</CardTitle>\n          <CardDescription>\n            Breakdown of agent performance by status across selected teams\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <h4 className=\"text-sm font-medium mb-4\">Performance vs Target</h4>\n              <ResponsiveContainer width=\"100%\" height={200}>\n                <PieChart>\n                  <Pie\n                    data={[\n                      { name: 'Above Target', value: filteredTeamStats.reduce((sum, team) => sum + team.aboveTarget, 0) },\n                      { name: 'Below Target', value: filteredTeamStats.reduce((sum, team) => sum + team.belowTarget, 0) }\n                    ]}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {[\n                      { name: 'Above Target', value: filteredTeamStats.reduce((sum, team) => sum + team.aboveTarget, 0) },\n                      { name: 'Below Target', value: filteredTeamStats.reduce((sum, team) => sum + team.belowTarget, 0) }\n                    ].map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={index === 0 ? '#00C49F' : '#FF8042'} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-medium mb-4\">Agent Status Distribution</h4>\n              <div className=\"space-y-2\">\n                {['Elite', 'Strong', 'Stable', 'Watch', 'Critical'].map(status => {\n                  const count = statusCounts[status as keyof typeof statusCounts];\n                  const isActive = statusFilter === status;\n                  \n                  return (\n                    <div key={status} className=\"flex items-center justify-between\">\n                      <Badge \n                        className={`${getStatusColor(status)} cursor-pointer hover:opacity-80 transition-opacity ${\n                          isActive ? 'ring-2 ring-primary' : ''\n                        }`} \n                        variant=\"secondary\"\n                        onClick={() => statusFilter === status ? filterByStatus('all') : filterByStatus(status)}\n                        title={`Click to ${statusFilter === status ? 'clear filter' : 'filter by ' + status + ' agents'}`}\n                      >\n                        {status}\n                      </Badge>\n                      <span \n                        className=\"text-sm font-medium cursor-pointer hover:text-primary\"\n                        onClick={() => statusFilter === status ? filterByStatus('all') : filterByStatus(status)}\n                      >\n                        {count} agents\n                      </span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Team Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Team Details</CardTitle>\n          <CardDescription>\n            Detailed breakdown of agents in each team\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {filteredTeamStats.map(team => (\n              <div key={team.teamName} className=\"border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold\">{team.teamName}</h3>\n                  <Badge variant=\"outline\">\n                    {team.totalAgents} agents\n                  </Badge>\n                </div>\n                \n                <div className=\"grid gap-2 md:grid-cols-2 lg:grid-cols-3\">\n                  {(expandedTeams.has(team.teamName) ? team.agents : team.agents.slice(0, 6)).map(agent => {\n                    const score = calculateScore(agent);\n                    const status = getAgentStatus(score);\n                    \n                    return (\n                      <div key={agent.id} className=\"flex items-center justify-between p-2 bg-muted rounded hover:bg-muted/80 transition-colors\">\n                        <div>\n                          <p \n                            className=\"text-sm font-medium cursor-pointer hover:text-primary transition-colors\"\n                            onClick={() => openAgentDetail(agent)}\n                            title=\"Click to view detailed performance breakdown\"\n                          >\n                            {agent.name}\n                          </p>\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-xs text-muted-foreground\">Rank #{getAgentRank(agent.id, team.agents)}</p>\n                            <p className=\"text-xs text-muted-foreground\">‚Ä¢ {Math.round(score)}% score</p>\n                          </div>\n                        </div>\n                        <Badge className={getStatusColor(status)} variant=\"secondary\">\n                          {status}\n                        </Badge>\n                      </div>\n                    );\n                  })}\n                </div>\n                \n                {team.agents.length > 6 && !expandedTeams.has(team.teamName) && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-sm text-muted-foreground mt-2 hover:text-primary p-0 h-auto\"\n                    onClick={() => toggleTeamExpansion(team.teamName)}\n                  >\n                    <ChevronDown className=\"h-3 w-3 mr-1\" />\n                    And {team.agents.length - 6} more agents...\n                  </Button>\n                )}\n                \n                {expandedTeams.has(team.teamName) && team.agents.length > 6 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-sm text-muted-foreground mt-2 hover:text-primary p-0 h-auto\"\n                    onClick={() => toggleTeamExpansion(team.teamName)}\n                  >\n                    <ChevronUp className=\"h-3 w-3 mr-1\" />\n                    Show less...\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Agent Detail Modal */}\n      <AgentDetailModal \n        isOpen={isModalOpen}\n        onClose={closeAgentDetail}\n        agent={selectedAgent}\n      />\n    </div>\n  );\n};\n\nexport default TeamAnalytics;","size_bytes":30126},"src/pages/Calls.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ExternalLink, Phone } from 'lucide-react';\n\nconst Calls = () => {\n  const handleOpenMegaview = () => {\n    window.open('https://app.megaview.com', '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <div className=\"h-full w-full p-6\">\n      <div className=\"max-w-2xl mx-auto mt-20\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <Phone className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n            <CardTitle className=\"text-2xl\">Call Management</CardTitle>\n            <CardDescription>\n              Access Megaview to manage calls, review recordings, and track call performance\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <Button \n              onClick={handleOpenMegaview}\n              size=\"lg\"\n              className=\"w-full max-w-xs\"\n            >\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              Open Megaview\n            </Button>\n            <p className=\"text-sm text-muted-foreground mt-4\">\n              Opens in a new tab with full authentication\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Calls;","size_bytes":1382},"PROJECT_DOCUMENTATION.md":{"content":"# CMLens - Agent Performance Analytics Platform\n## Complete Project Documentation for AI Assistance\n\n---\n\n## üéØ PROJECT OVERVIEW\n\n### Core Objective\nCMLens is a comprehensive enterprise-grade analytics platform designed to analyze agent performance across multiple KPIs. The application transforms raw performance data (Excel/CSV reports) into actionable business intelligence through automated scoring algorithms, data visualization, and AI-powered insights.\n\n### Target Users\n- Team leaders and managers\n- Performance coaches\n- Business analysts\n- Executive stakeholders\n\n### Business Value\n- Data-driven decision making\n- Performance optimization\n- Individual coaching insights\n- Team performance tracking\n- Automated scoring and ranking\n\n---\n\n## üèóÔ∏è TECHNICAL ARCHITECTURE\n\n### Frontend Stack\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI System**: Radix UI primitives with shadcn/ui components\n- **Styling**: Tailwind CSS with custom design system\n- **Routing**: React Router DOM with protected routes\n- **State Management**: Local state with React hooks, localStorage persistence\n- **Data Fetching**: React Query (@tanstack/react-query)\n- **Icons**: Lucide React\n- **Charts**: Recharts for data visualization\n\n### Backend Stack\n- **Framework**: Flask (Python) with CORS support\n- **Data Processing**: Pandas-based ETL pipeline with PyArrow optimization\n- **File Handling**: Secure upload with validation and cleanup\n- **Production Server**: Gunicorn WSGI server\n\n### Development Environment\n- **Platform**: Replit with NixOS\n- **Frontend Server**: Port 5000 (Vite dev server)\n- **Backend Server**: Port 8080 (Flask API)\n- **Package Management**: npm (frontend), pip (backend)\n\n---\n\n## üìä DATA PROCESSING & ETL\n\n### Input Data Sources\n1. **Class Consumption Report** (CC%) - Agent engagement metrics\n2. **Fixed Rate Report** (Fixed%) - Fixed rate performance\n3. **Referral Report** - Referral generation metrics  \n4. **Upgrade Report** (UP%) - Customer upgrade success rates\n\n### Data Processing Pipeline\n1. **File Upload**: Multi-file drag-and-drop interface\n2. **Validation**: File format and content validation\n3. **Column Mapping**: Automatic standardization of column names\n4. **Data Merging**: Intelligent joining across multiple data sources\n5. **Score Calculation**: Weighted KPI scoring algorithm\n6. **Normalization**: Re-normalization for missing data scenarios\n\n### Scoring Algorithm\n- **Weighted System**: Configurable target thresholds\n- **Performance Calculation**: Percentage-based scoring per KPI\n- **Overall Score**: Weighted average across all KPIs\n- **Status Classification**: Elite, Strong, Stable, Watch, Critical\n\n### Status Definitions\n- **Elite**: >90% overall performance\n- **Strong**: 80-90% overall performance  \n- **Stable**: 70-80% overall performance\n- **Watch**: 60-70% overall performance\n- **Critical**: <60% overall performance\n\n---\n\n## üñ•Ô∏è USER INTERFACE & FEATURES\n\n### Navigation Structure\n1. **Dashboard** - High-level overview and file upload\n2. **Agents Performance** - Individual agent metrics and filtering\n3. **Team Analytics** - Team-level insights and comparisons\n4. **Meetings** - Meeting scheduler and tracking\n5. **Calls** - Megaview integration for call management\n\n### Core Features\n\n#### Dashboard Page\n- File upload interface (drag-and-drop)\n- Processing status indicators\n- Quick overview metrics\n- Target configuration sliders\n\n#### Agents Performance Page\n- **Data Table**: Sortable agent performance table\n- **Filtering Options**: \n  - By performance status (Elite, Strong, etc.)\n  - By targets achieved (ranking filter)\n  - Search functionality\n- **Interactive Elements**:\n  - Clickable agent names open detailed performance cards\n  - Clickable status badges filter the view\n- **Export Options**: Data export capabilities\n\n#### Team Analytics Page\n- **Overview Metrics**: Team summary statistics\n- **Performance Visualizations**: \n  - Performance vs Target pie charts\n  - Agent Status Distribution\n- **Team Details**: \n  - Expandable team sections\n  - Individual agent cards within teams\n  - Clickable agent names for detailed views\n- **Interactive Filtering**: Status-based filtering\n\n#### Agent Detail Modal\n- **Performance Breakdown**: Individual KPI scores\n- **Ranking Explanation**: Why agent has their current status\n- **Target Achievement**: Visual indicators for each target\n- **Training Records**: Direct link to CM dashboard\n- **Historical Context**: Performance trends\n\n#### Meetings Page\n- **Meeting Scheduler**: Calendar integration\n- **Agent Assignment**: Link meetings to specific agents\n- **Performance Context**: Pre-meeting agent insights\n\n#### Calls Page\n- **Megaview Integration**: Direct link to external call management\n- **Authentication Handling**: Proper new-tab opening\n- **Call Performance**: Integration with agent metrics\n\n---\n\n## üîó INTEGRATIONS\n\n### External Tools\n1. **Megaview** (https://app.megaview.com)\n   - Call management and recording platform\n   - Opens in new tab with authentication\n   - Integrated via redirect (not iframe)\n\n2. **CM Dashboard** (https://cm-dashboard.replit.app)\n   - Training records and coaching materials\n   - Context-aware agent linking\n   - Accessible from agent detail cards\n\n### Data Storage\n- **Client-side**: localStorage for session persistence\n- **Temporary**: Server-side file uploads with automatic cleanup\n- **Processing**: In-memory data transformation\n\n---\n\n## üé® DESIGN SYSTEM\n\n### Visual Design\n- **Theme**: Glass morphism effects with modern UI\n- **Color Coding**: Performance-based color schemes\n- **Typography**: Clean, readable font hierarchy\n- **Spacing**: Consistent spacing system\n- **Responsive**: Mobile-first responsive design\n\n### Component Library\n- **Cards**: Information containers with glass effects\n- **Buttons**: Primary, secondary, ghost variants\n- **Badges**: Status indicators with color coding\n- **Tables**: Sortable, filterable data tables\n- **Modals**: Overlay dialogs for detailed views\n- **Forms**: File upload, configuration forms\n\n---\n\n## üîß DEVELOPMENT SETUP\n\n### File Structure\n```\n/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/           # shadcn/ui components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AgentDetailModal.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AppSidebar.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ pages/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AgentsPerformance.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TeamAnalytics.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Meetings.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Calls.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ lib/              # Utility functions\n‚îÇ   ‚îî‚îÄ‚îÄ App.tsx\n‚îú‚îÄ‚îÄ web_backend.py        # Flask backend\n‚îú‚îÄ‚îÄ script.py            # ETL processing logic\n‚îú‚îÄ‚îÄ package.json\n‚îî‚îÄ‚îÄ replit.md            # Project state tracking\n```\n\n### Key Dependencies\n**Frontend:**\n- react, react-dom, react-router-dom\n- @radix-ui/* (UI primitives)\n- @tanstack/react-query\n- tailwindcss, lucide-react\n- vite, typescript\n\n**Backend:**\n- flask, flask-cors\n- pandas, numpy, openpyxl\n- gunicorn (production)\n\n---\n\n## üöÄ DEPLOYMENT & WORKFLOWS\n\n### Development Workflows\n1. **Frontend Workflow**: `npm run dev` (Port 5000)\n2. **Backend Workflow**: `PORT=8080 python web_backend.py` (Port 8080)\n\n### Production Configuration\n- **Deployment Target**: Autoscale (stateless)\n- **Build Command**: `npm run build`\n- **Run Command**: Production-ready server configuration\n- **Environment**: Replit deployment infrastructure\n\n---\n\n## üìà PERFORMANCE METRICS\n\n### Key Performance Indicators (KPIs)\n1. **CC%** - Class Consumption Rate\n2. **Fixed%** - Fixed Rate Performance\n3. **UP%** - Upgrade Success Rate\n4. **SC%** - Service Completion Rate\n5. **Referrals** - Referral Generation Count\n\n### Calculation Methods\n- **Individual Scores**: Percentage against target thresholds\n- **Weighted Average**: Configurable weights per KPI\n- **Team Averages**: Aggregated team performance\n- **Status Assignment**: Threshold-based classification\n\n---\n\n## üîê AUTHENTICATION & SECURITY\n\n### Current Implementation\n- **Demo Authentication**: admin/admin credentials\n- **Session Management**: localStorage-based persistence\n- **Route Protection**: Automatic redirection for unauthenticated users\n- **File Security**: Temporary upload storage with cleanup\n\n### Security Considerations\n- **File Validation**: Input sanitization and format checking\n- **CORS Configuration**: Proper cross-origin handling\n- **External Links**: Secure new-tab opening with noopener\n- **Data Privacy**: No persistent server-side storage\n\n---\n\n## üß™ TESTING & QUALITY\n\n### Data Testing\n- **File Format Validation**: Excel/CSV format checking\n- **Column Mapping**: Flexible header recognition\n- **Data Integrity**: Missing value handling\n- **Score Calculation**: Weighted algorithm validation\n\n### User Experience Testing\n- **Interactive Elements**: Clickable components throughout app\n- **Filtering Systems**: Status and ranking filters\n- **Navigation Flow**: Seamless between pages\n- **Modal Interactions**: Agent detail overlays\n\n---\n\n## üîÑ DATA FLOW\n\n### Upload Process\n1. User drags/drops files on Dashboard\n2. Files sent to Flask backend via multipart form\n3. Backend processes files with Pandas\n4. Standardized data returned to frontend\n5. Frontend stores processed data in localStorage\n6. User navigates to view analytics\n\n### Interactive Navigation\n1. User clicks agent name anywhere in app\n2. AgentDetailModal opens with full context\n3. User can access training records\n4. Modal closes, user returns to previous view\n5. Filter states persist across navigation\n\n### Status Filtering\n1. User clicks status badge (e.g., \"Critical\")\n2. Frontend filters data by selected status\n3. All views update to show filtered subset\n4. Charts and metrics recalculate\n5. Clear filter returns to full dataset\n\n---\n\n## üéØ USER STORIES & USE CASES\n\n### Team Manager Use Cases\n1. **Weekly Performance Review**: Upload latest reports, identify underperforming agents\n2. **Coaching Preparation**: Click agent names to see detailed breakdowns\n3. **Team Comparison**: Use Team Analytics to compare team performance\n4. **Training Assignment**: Use training record links to assign coaching\n\n### Individual Agent Analysis\n1. **Performance Deep-dive**: Click agent name for detailed modal\n2. **Target Achievement**: See which of 4 targets were met/missed\n3. **Historical Context**: Understand ranking and status assignment\n4. **Action Items**: Access training records for improvement\n\n### Executive Reporting\n1. **High-level Overview**: Dashboard metrics and team summaries\n2. **Drill-down Analysis**: Click through to detailed agent views\n3. **Status Distribution**: Understand agent performance spread\n4. **Trend Analysis**: Track performance changes over time\n\n---\n\n## üõ†Ô∏è MAINTENANCE & TROUBLESHOOTING\n\n### Common Issues\n1. **File Upload Errors**: Check file format and column headers\n2. **Missing Data**: ETL pipeline handles missing values gracefully\n3. **Score Calculation**: Verify target thresholds and weights\n4. **External Links**: Ensure Megaview/CM Dashboard accessibility\n\n### Development Guidelines\n- **Code Organization**: Maintain clean component structure\n- **State Management**: Use localStorage for persistence\n- **Error Handling**: Graceful degradation for missing data\n- **Performance**: Optimize for large datasets (100+ agents)\n\n---\n\n## üìã FUTURE ENHANCEMENTS\n\n### Potential Features\n1. **Advanced Analytics**: Trend analysis and forecasting\n2. **Real-time Updates**: Live data refresh capabilities\n3. **Enhanced Integrations**: Deeper API connections\n4. **Mobile App**: Native mobile application\n5. **Advanced Filtering**: Date ranges, custom criteria\n6. **Automated Reporting**: Scheduled report generation\n\n### Technical Improvements\n1. **Database Integration**: Persistent data storage\n2. **API Authentication**: Secure API access tokens\n3. **Performance Optimization**: Large dataset handling\n4. **Advanced Charts**: More visualization options\n5. **Export Features**: PDF/Excel report generation\n\n---\n\n## üìû SUPPORT INFORMATION\n\n### For AI Assistants Working on This Project\n- **Primary Files**: Focus on src/pages/* and web_backend.py\n- **Data Structure**: localStorage format follows ETL pipeline output\n- **Component Patterns**: Follow existing shadcn/ui patterns\n- **State Management**: Use React hooks with localStorage sync\n- **API Endpoints**: Single `/process-agent-data` endpoint for ETL\n- **Error Handling**: Check logs via refresh_all_logs tool\n\n### Key Context for Future Development\n- **Interactive Design**: Everything should be clickable and connected\n- **Performance Focus**: App designed for 100+ agent datasets\n- **User Experience**: Managers need quick insights and drill-down capability\n- **External Integration**: Megaview and CM Dashboard are external dependencies\n- **Data Privacy**: No sensitive data stored server-side permanently\n\nThis documentation provides complete context for any AI assistant to understand and work effectively with the CMLens project.","size_bytes":13003},"src/components/AgentDetailModal.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Target, Users, TrendingUp, TrendingDown, CheckCircle, AlertTriangle, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AgentData {\n  id: string;\n  name: string;\n  team: string;\n  group: string;\n  students: number;\n  ccPct: number | null;\n  scPct: number | null;\n  upPct: number | null;\n  fixedPct: number | null;\n  referralLeads: number;\n  referralShowups: number;\n  referralPaid: number;\n}\n\ninterface AgentDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  agent: AgentData | null;\n}\n\nconst AgentDetailModal: React.FC<AgentDetailModalProps> = ({ isOpen, onClose, agent }) => {\n  if (!agent) return null;\n\n  // Get targets from localStorage\n  const targets = React.useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_targets\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n  }, []);\n\n  // Helper function to get status vs target\n  const getStatus = (value: number | null, target: number) => {\n    if (value === null) return \"na\";\n    if (value >= target) return \"above\";\n    if (value >= target * 0.9) return \"warning\";\n    return \"below\";\n  };\n\n  // Function to count targets achieved\n  const countTargetsAchieved = (agent: AgentData) => {\n    let achieved = 0;\n    if (getStatus(agent.fixedPct, targets.fixedRate) === \"above\") achieved++;\n    if (getStatus(agent.ccPct, targets.classConsumption) === \"above\") achieved++;\n    if (getStatus(agent.scPct, targets.superClassConsumption) === \"above\") achieved++;\n    if (getStatus(agent.upPct, targets.upgradeRate) === \"above\") achieved++;\n    return achieved;\n  };\n\n  // Calculate overall score (weighted average)\n  const calculateOverallScore = (agent: AgentData) => {\n    const scores = [];\n    if (agent.fixedPct !== null) scores.push((agent.fixedPct / targets.fixedRate) * 100);\n    if (agent.ccPct !== null) scores.push((agent.ccPct / targets.classConsumption) * 100);\n    if (agent.scPct !== null) scores.push((agent.scPct / targets.superClassConsumption) * 100);\n    if (agent.upPct !== null) scores.push((agent.upPct / targets.upgradeRate) * 100);\n    \n    return scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;\n  };\n\n  const formatPercent = (value: number | null) => {\n    return value !== null ? `${value.toFixed(1)}%` : \"N/A\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"above\": return \"text-green-600 bg-green-100\";\n      case \"warning\": return \"text-yellow-600 bg-yellow-100\";\n      case \"below\": return \"text-red-600 bg-red-100\";\n      default: return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"above\": return <CheckCircle className=\"h-4 w-4\" />;\n      case \"warning\": return <AlertTriangle className=\"h-4 w-4\" />;\n      case \"below\": return <TrendingDown className=\"h-4 w-4\" />;\n      default: return <Target className=\"h-4 w-4\" />;\n    }\n  };\n\n  const metrics = [\n    {\n      label: \"Fixed Rate\",\n      value: agent.fixedPct,\n      target: targets.fixedRate,\n      icon: <Target className=\"h-4 w-4\" />\n    },\n    {\n      label: \"Class Consumption\",\n      value: agent.ccPct,\n      target: targets.classConsumption,\n      icon: <TrendingUp className=\"h-4 w-4\" />\n    },\n    {\n      label: \"Super Class\",\n      value: agent.scPct,\n      target: targets.superClassConsumption,\n      icon: <Users className=\"h-4 w-4\" />\n    },\n    {\n      label: \"Upgrade Rate\",\n      value: agent.upPct,\n      target: targets.upgradeRate,\n      icon: <TrendingUp className=\"h-4 w-4\" />\n    }\n  ];\n\n  const targetsAchieved = countTargetsAchieved(agent);\n  const overallScore = calculateOverallScore(agent);\n\n  const openTrainingRecord = () => {\n    window.open(`https://cm-dashboard.replit.app/?agent=${encodeURIComponent(agent.id)}`, '_blank');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span className=\"text-2xl font-bold\">{agent.id}</span>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"px-3 py-1\">\n                {targetsAchieved}/4 Targets Achieved\n              </Badge>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={openTrainingRecord}\n                className=\"flex items-center gap-2\"\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n                Training Record\n              </Button>\n            </div>\n          </DialogTitle>\n          <DialogDescription>\n            {agent.team} ‚Ä¢ {agent.group} ‚Ä¢ {agent.students} Students\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Overall Performance Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Overview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">\n                    {overallScore.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {targetsAchieved}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Targets Achieved</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {agent.students}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Students</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Metrics Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Target Achievement Breakdown</CardTitle>\n              <CardDescription>\n                Detailed analysis of performance vs targets with explanations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {metrics.map((metric) => {\n                  const status = getStatus(metric.value, metric.target);\n                  const progress = metric.value !== null ? Math.min((metric.value / metric.target) * 100, 100) : 0;\n                  \n                  return (\n                    <div key={metric.label} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {metric.icon}\n                          <span className=\"font-medium\">{metric.label}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={`${getStatusColor(status)} border-0`}>\n                            {getStatusIcon(status)}\n                            {status === \"above\" ? \"Above Target\" : \n                             status === \"warning\" ? \"Near Target\" : \n                             status === \"below\" ? \"Below Target\" : \"No Data\"}\n                          </Badge>\n                          <span className=\"font-bold\">\n                            {formatPercent(metric.value)} / {metric.target}%\n                          </span>\n                        </div>\n                      </div>\n                      <Progress value={progress} className=\"h-2\" />\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>Current: {formatPercent(metric.value)}</span>\n                        <span>Target: {metric.target}%</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Referral Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Referral Performance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {agent.referralLeads}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Leads Generated</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {agent.referralShowups}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Showups</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {agent.referralPaid}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Paid Conversions</div>\n                </div>\n              </div>\n              \n              {agent.referralLeads > 0 && (\n                <>\n                  <Separator className=\"my-4\" />\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Showup Rate:</span>\n                      <span className=\"font-medium ml-2\">\n                        {((agent.referralShowups / agent.referralLeads) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Conversion Rate:</span>\n                      <span className=\"font-medium ml-2\">\n                        {agent.referralShowups > 0 \n                          ? ((agent.referralPaid / agent.referralShowups) * 100).toFixed(1)\n                          : '0.0'}%\n                      </span>\n                    </div>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Ranking Explanation */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Ranking Explanation</CardTitle>\n              <CardDescription>\n                Why this agent has this ranking and what needs improvement\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\">Rank by Targets: {targetsAchieved}/4</Badge>\n                  <Badge variant=\"outline\">Overall Score: {overallScore.toFixed(1)}%</Badge>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-green-600\">Strengths:</h4>\n                  <ul className=\"space-y-1 text-sm\">\n                    {metrics.filter(m => getStatus(m.value, m.target) === \"above\").map(m => (\n                      <li key={m.label} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                        {m.label}: {formatPercent(m.value)} (Target: {m.target}%)\n                      </li>\n                    ))}\n                    {metrics.filter(m => getStatus(m.value, m.target) === \"above\").length === 0 && (\n                      <li className=\"text-muted-foreground\">No targets currently exceeded</li>\n                    )}\n                  </ul>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-red-600\">Areas for Improvement:</h4>\n                  <ul className=\"space-y-1 text-sm\">\n                    {metrics.filter(m => getStatus(m.value, m.target) === \"below\").map(m => (\n                      <li key={m.label} className=\"flex items-center gap-2\">\n                        <TrendingDown className=\"h-3 w-3 text-red-600\" />\n                        {m.label}: {formatPercent(m.value)} (Need: {m.target}% - Gap: {m.value !== null ? (m.target - m.value).toFixed(1) : m.target}%)\n                      </li>\n                    ))}\n                    {metrics.filter(m => getStatus(m.value, m.target) === \"below\").length === 0 && (\n                      <li className=\"text-muted-foreground\">All available targets are being met!</li>\n                    )}\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AgentDetailModal;","size_bytes":13349},"src/pages/Analytics.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { TrendingUp, TrendingDown, Target, Users, Award, AlertTriangle, BarChart3 } from 'lucide-react';\nimport AgentDetailModal from \"@/components/AgentDetailModal\";\n\ninterface AgentData {\n  id: string;\n  name: string;\n  team: string;\n  group: string;\n  students: number;\n  ccPct: number | null;\n  scPct: number | null;\n  upPct: number | null;\n  fixedPct: number | null;\n  referralLeads: number;\n  referralShowups: number;\n  referralPaid: number;\n}\n\nconst Analytics: React.FC = () => {\n  const [selectedTeam, setSelectedTeam] = useState<string>('all');\n  const [activeTab, setActiveTab] = useState('fixed');\n  const [selectedAgent, setSelectedAgent] = useState<AgentData | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const openAgentDetail = (agent: AgentData) => {\n    setSelectedAgent(agent);\n    setIsModalOpen(true);\n  };\n\n  const closeAgentDetail = () => {\n    setIsModalOpen(false);\n    setSelectedAgent(null);\n  };\n\n  // Get agents data from localStorage\n  const getAgentsData = (): AgentData[] => {\n    const storedData = localStorage.getItem('cmlens_processed_data');\n    \n    if (storedData) {\n      try {\n        const parsed = JSON.parse(storedData);\n        if (parsed.agents) {\n          // Handle both array and object formats\n          if (Array.isArray(parsed.agents)) {\n            return parsed.agents;\n          } else if (typeof parsed.agents === 'object') {\n            // Convert object to array\n            return Object.values(parsed.agents).map((agent: any) => ({\n              id: agent.agent_id || agent.id,\n              name: agent.agent_id || agent.name,\n              team: agent.team,\n              group: agent.group,\n              students: agent.students,\n              ccPct: agent.cc_pct || agent.ccPct,\n              scPct: agent.sc_pct || agent.scPct,\n              upPct: agent.up_pct || agent.upPct,\n              fixedPct: agent.fixed_pct || agent.fixedPct,\n              referralLeads: agent.referral?.leads || agent.referralLeads || 0,\n              referralShowups: agent.referral?.showups || agent.referralShowups || 0,\n              referralPaid: agent.referral?.paid || agent.referralPaid || 0,\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing stored data:', error);\n      }\n    }\n    \n    return [];\n  };\n\n  // Get agents data\n  const agentsData = useMemo(() => getAgentsData(), []);\n\n  // Get targets from localStorage\n  const targets = useMemo(() => {\n    const saved = localStorage.getItem(\"cmlens_targets\");\n    return saved ? JSON.parse(saved) : {\n      classConsumption: 80,\n      superClassConsumption: 15,\n      upgradeRate: 25,\n      fixedRate: 60,\n    };\n  }, []);\n\n  // Get unique teams\n  const teams = useMemo(() => {\n    const uniqueTeams = [...new Set(agentsData.map(agent => agent.team).filter(Boolean))];\n    return uniqueTeams.sort();\n  }, [agentsData]);\n\n  // Filter agents by team\n  const filteredAgents = useMemo(() => {\n    return selectedTeam === 'all' \n      ? agentsData \n      : agentsData.filter(agent => agent.team === selectedTeam);\n  }, [agentsData, selectedTeam]);\n\n  // Helper function to get status vs target\n  const getStatus = (value: number | null, target: number) => {\n    if (value === null) return \"na\";\n    if (value >= target) return \"above\";\n    if (value >= target * 0.9) return \"warning\";\n    return \"below\";\n  };\n\n  // Helper function to get status color\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"above\": return \"text-green-600 bg-green-100\";\n      case \"warning\": return \"text-yellow-600 bg-yellow-100\";\n      case \"below\": return \"text-red-600 bg-red-100\";\n      default: return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  // Helper function to get status icon\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"above\": return <TrendingUp className=\"h-4 w-4\" />;\n      case \"warning\": return <AlertTriangle className=\"h-4 w-4\" />;\n      case \"below\": return <TrendingDown className=\"h-4 w-4\" />;\n      default: return <Target className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Generate metric-specific analytics\n  const generateMetricAnalytics = (metricKey: keyof AgentData, metricName: string, target: number, unit: string = '%') => {\n    const validAgents = filteredAgents.filter(agent => agent[metricKey] !== null);\n    const values = validAgents.map(agent => agent[metricKey] as number);\n    \n    if (values.length === 0) {\n      return {\n        summary: {\n          total: 0,\n          average: 0,\n          aboveTarget: 0,\n          nearTarget: 0,\n          belowTarget: 0,\n          noData: filteredAgents.length\n        },\n        distribution: [],\n        topPerformers: [],\n        bottomPerformers: [],\n        teamComparison: []\n      };\n    }\n\n    const average = values.reduce((a, b) => a + b, 0) / values.length;\n    const aboveTarget = values.filter(v => v >= target).length;\n    const nearTarget = values.filter(v => v >= target * 0.9 && v < target).length;\n    const belowTarget = values.filter(v => v < target * 0.9).length;\n    const noData = filteredAgents.length - validAgents.length;\n\n    // Distribution data for charts\n    const distributionRanges = [\n      { range: `0-${Math.floor(target * 0.5)}${unit}`, count: 0, color: '#ef4444' },\n      { range: `${Math.floor(target * 0.5)}-${Math.floor(target * 0.9)}${unit}`, count: 0, color: '#f97316' },\n      { range: `${Math.floor(target * 0.9)}-${target}${unit}`, count: 0, color: '#eab308' },\n      { range: `${target}${unit}+`, count: 0, color: '#22c55e' }\n    ];\n\n    values.forEach(value => {\n      if (value < target * 0.5) distributionRanges[0].count++;\n      else if (value < target * 0.9) distributionRanges[1].count++;\n      else if (value < target) distributionRanges[2].count++;\n      else distributionRanges[3].count++;\n    });\n\n    // Top and bottom performers\n    const agentsWithValues = validAgents\n      .map(agent => ({\n        ...agent,\n        value: agent[metricKey] as number,\n        status: getStatus(agent[metricKey] as number, target)\n      }))\n      .sort((a, b) => b.value - a.value);\n\n    const topPerformers = agentsWithValues.slice(0, 5);\n    const bottomPerformers = agentsWithValues.slice(-5).reverse();\n\n    // Team comparison (if multiple teams)\n    const teamComparison = teams.map(team => {\n      const teamAgents = validAgents.filter(agent => agent.team === team);\n      const teamValues = teamAgents.map(agent => agent[metricKey] as number);\n      const teamAverage = teamValues.length > 0 ? teamValues.reduce((a, b) => a + b, 0) / teamValues.length : 0;\n      const teamAboveTarget = teamValues.filter(v => v >= target).length;\n      \n      return {\n        team,\n        average: teamAverage,\n        aboveTarget: teamAboveTarget,\n        total: teamAgents.length,\n        aboveTargetPct: teamAgents.length > 0 ? (teamAboveTarget / teamAgents.length) * 100 : 0\n      };\n    }).filter(team => team.total > 0).sort((a, b) => b.average - a.average);\n\n    return {\n      summary: {\n        total: validAgents.length,\n        average,\n        aboveTarget,\n        nearTarget,\n        belowTarget,\n        noData\n      },\n      distribution: distributionRanges,\n      topPerformers,\n      bottomPerformers,\n      teamComparison\n    };\n  };\n\n  // Generate analytics for each metric\n  const fixedAnalytics = generateMetricAnalytics('fixedPct', 'Fixed Rate', targets.fixedRate);\n  const ccAnalytics = generateMetricAnalytics('ccPct', 'Class Consumption', targets.classConsumption);\n  const scAnalytics = generateMetricAnalytics('scPct', 'Super Class', targets.superClassConsumption);\n  const upAnalytics = generateMetricAnalytics('upPct', 'Upgrade Rate', targets.upgradeRate);\n\n  // Render metric tab content\n  const renderMetricTab = (analytics: any, metricName: string, target: number, unit: string = '%') => (\n    <div className=\"space-y-6\">\n      {/* Summary Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Agents</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.summary.total}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.summary.noData > 0 && `${analytics.summary.noData} missing data`}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average {metricName}</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.summary.average.toFixed(1)}{unit}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Target: {target}{unit}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Above Target</CardTitle>\n            <Award className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{analytics.summary.aboveTarget}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.summary.total > 0 ? Math.round((analytics.summary.aboveTarget / analytics.summary.total) * 100) : 0}% of agents\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Below Target</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{analytics.summary.belowTarget}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.summary.total > 0 ? Math.round((analytics.summary.belowTarget / analytics.summary.total) * 100) : 0}% of agents\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Distribution Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>{metricName} Distribution</CardTitle>\n          <CardDescription>Performance distribution across different ranges</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={analytics.distribution}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"range\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"count\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Performance Status Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Status</CardTitle>\n          <CardDescription>Breakdown by target achievement status</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={[\n                    { name: 'Above Target', value: analytics.summary.aboveTarget, color: '#22c55e' },\n                    { name: 'Near Target', value: analytics.summary.nearTarget, color: '#eab308' },\n                    { name: 'Below Target', value: analytics.summary.belowTarget, color: '#ef4444' },\n                    { name: 'No Data', value: analytics.summary.noData, color: '#6b7280' }\n                  ]}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                >\n                  {[\n                    { name: 'Above Target', value: analytics.summary.aboveTarget, color: '#22c55e' },\n                    { name: 'Near Target', value: analytics.summary.nearTarget, color: '#eab308' },\n                    { name: 'Below Target', value: analytics.summary.belowTarget, color: '#ef4444' },\n                    { name: 'No Data', value: analytics.summary.noData, color: '#6b7280' }\n                  ].map((entry, index: number) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n                  Above Target\n                </span>\n                <span className=\"font-medium\">{analytics.summary.aboveTarget}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded\"></div>\n                  Near Target\n                </span>\n                <span className=\"font-medium\">{analytics.summary.nearTarget}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded\"></div>\n                  Below Target\n                </span>\n                <span className=\"font-medium\">{analytics.summary.belowTarget}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-gray-500 rounded\"></div>\n                  No Data\n                </span>\n                <span className=\"font-medium\">{analytics.summary.noData}</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Top and Bottom Performers */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Performers</CardTitle>\n            <CardDescription>Highest {metricName.toLowerCase()} achievers</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {analytics.topPerformers.map((agent: any, index: number) => (\n                <div \n                  key={agent.id} \n                  className=\"flex items-center justify-between p-2 rounded-lg border cursor-pointer hover:bg-gray-50 transition-colors\"\n                  onClick={() => openAgentDetail(agent)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Badge variant=\"outline\" className=\"w-8 h-8 flex items-center justify-center\">\n                      {index + 1}\n                    </Badge>\n                    <div>\n                      <p className=\"font-medium\">{agent.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{agent.team}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-lg\">{agent.value.toFixed(1)}{unit}</p>\n                    <Badge className={getStatusColor(agent.status)}>\n                      {getStatusIcon(agent.status)}\n                      {agent.status.charAt(0).toUpperCase() + agent.status.slice(1)}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Bottom Performers</CardTitle>\n            <CardDescription>Agents needing improvement in {metricName.toLowerCase()}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {analytics.bottomPerformers.map((agent: any, index: number) => (\n                <div \n                  key={agent.id} \n                  className=\"flex items-center justify-between p-2 rounded-lg border cursor-pointer hover:bg-gray-50 transition-colors\"\n                  onClick={() => openAgentDetail(agent)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Badge variant=\"outline\" className=\"w-8 h-8 flex items-center justify-center\">\n                      {analytics.topPerformers.length - index}\n                    </Badge>\n                    <div>\n                      <p className=\"font-medium\">{agent.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{agent.team}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-lg\">{agent.value.toFixed(1)}{unit}</p>\n                    <Badge className={getStatusColor(agent.status)}>\n                      {getStatusIcon(agent.status)}\n                      {agent.status.charAt(0).toUpperCase() + agent.status.slice(1)}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Team Comparison */}\n      {analytics.teamComparison.length > 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Team Comparison</CardTitle>\n            <CardDescription>{metricName} performance by team</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.teamComparison}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"team\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"average\" fill=\"#8884d8\" name={`Average ${metricName}`} />\n                <Bar dataKey=\"aboveTargetPct\" fill=\"#82ca9d\" name=\"% Above Target\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Target Analytics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Comprehensive performance analysis for each target metric\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Target className=\"h-5 w-5 text-blue-500\" />\n          <span className=\"text-sm font-medium\">Metric Analysis</span>\n        </div>\n      </div>\n\n      {/* Team Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Analytics Filters</CardTitle>\n          <CardDescription>Filter analytics by team or view all teams</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedTeam} onValueChange={setSelectedTeam}>\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"Select Team\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Teams</SelectItem>\n              {teams.map(team => (\n                <SelectItem key={team} value={team}>{team}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Metric Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"fixed\">Fixed Rate</TabsTrigger>\n          <TabsTrigger value=\"cc\">Class Consumption</TabsTrigger>\n          <TabsTrigger value=\"sc\">Super Class</TabsTrigger>\n          <TabsTrigger value=\"up\">Upgrade Rate</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"fixed\" className=\"space-y-4\">\n          {renderMetricTab(fixedAnalytics, \"Fixed Rate\", targets.fixedRate)}\n        </TabsContent>\n\n        <TabsContent value=\"cc\" className=\"space-y-4\">\n          {renderMetricTab(ccAnalytics, \"Class Consumption\", targets.classConsumption)}\n        </TabsContent>\n\n        <TabsContent value=\"sc\" className=\"space-y-4\">\n          {renderMetricTab(scAnalytics, \"Super Class\", targets.superClassConsumption)}\n        </TabsContent>\n\n        <TabsContent value=\"up\" className=\"space-y-4\">\n          {renderMetricTab(upAnalytics, \"Upgrade Rate\", targets.upgradeRate)}\n        </TabsContent>\n      </Tabs>\n\n      {/* Agent Detail Modal */}\n      {selectedAgent && (\n        <AgentDetailModal\n          agent={selectedAgent}\n          isOpen={isModalOpen}\n          onClose={closeAgentDetail}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Analytics;","size_bytes":21693}},"version":1}